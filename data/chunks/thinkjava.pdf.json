[
  {
    "text": "Think Java\nHow to Think Like a Computer Scientist\nVersion 6.1.3",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 0,
      "page_label": "i"
    }
  },
  {
    "text": "Think Java\nHow to Think Like a Computer Scientist\nVersion 6.1.3\nAllen B. Downey and Chris May\ufb01eld\nGreen Tea Press\nNeedham, Massachusetts",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 2,
      "page_label": "iii"
    }
  },
  {
    "text": "Copyright \u00a9 2016 Allen B. Downey and Chris May\ufb01eld.\nGreen Tea Press\n9 Washburn Ave\nNeedham, MA 02492\nPermission is granted to copy, distribute, and/or modify this work under\nthe terms of the Creative Commons Attribution-NonCommercial-ShareAlike\n3.0 Unported License, which is available at http://creativecommons.org/\nlicenses/by-nc-sa/3.0/.\nThe original form of this book is LATEX source code. Compiling this code has\nthe e\ufb00ect of generating a device-independent representation of the book, which",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 3,
      "page_label": "iv"
    }
  },
  {
    "text": "can be converted to other formats and printed.\nThe LATEX source for this book is available from http://thinkjava.org.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 3,
      "page_label": "iv"
    }
  },
  {
    "text": "Contents\nPreface xiii\n1 The way of the program 1\n1.1 What is programming? . . . . . . . . . . . . . . . . . . . . . 1\n1.2 What is computer science? . . . . . . . . . . . . . . . . . . . 2\n1.3 Programming languages . . . . . . . . . . . . . . . . . . . . 3\n1.4 The hello world program . . . . . . . . . . . . . . . . . . . . 4\n1.5 Displaying strings . . . . . . . . . . . . . . . . . . . . . . . . 6\n1.6 Escape sequences . . . . . . . . . . . . . . . . . . . . . . . . 7",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 4,
      "page_label": "v"
    }
  },
  {
    "text": "1.7 Formatting code . . . . . . . . . . . . . . . . . . . . . . . . . 8\n1.8 Debugging code . . . . . . . . . . . . . . . . . . . . . . . . . 9\n1.9 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n1.10 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n2 Variables and operators 15\n2.1 Declaring variables . . . . . . . . . . . . . . . . . . . . . . . 15\n2.2 Assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . 16",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 4,
      "page_label": "v"
    }
  },
  {
    "text": "2.3 State diagrams . . . . . . . . . . . . . . . . . . . . . . . . . 17\n2.4 Printing variables . . . . . . . . . . . . . . . . . . . . . . . . 18\n2.5 Arithmetic operators . . . . . . . . . . . . . . . . . . . . . . 19",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 4,
      "page_label": "v"
    }
  },
  {
    "text": "vi CONTENTS\n2.6 Floating-point numbers . . . . . . . . . . . . . . . . . . . . . 21\n2.7 Rounding errors . . . . . . . . . . . . . . . . . . . . . . . . . 22\n2.8 Operators for strings . . . . . . . . . . . . . . . . . . . . . . 23\n2.9 Composition . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n2.10 Types of errors . . . . . . . . . . . . . . . . . . . . . . . . . 25\n2.11 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 5,
      "page_label": "vi"
    }
  },
  {
    "text": "2.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n3 Input and output 33\n3.1 The System class . . . . . . . . . . . . . . . . . . . . . . . . 33\n3.2 The Scanner class . . . . . . . . . . . . . . . . . . . . . . . . 34\n3.3 Program structure . . . . . . . . . . . . . . . . . . . . . . . . 36\n3.4 Inches to centimeters . . . . . . . . . . . . . . . . . . . . . . 37\n3.5 Literals and constants . . . . . . . . . . . . . . . . . . . . . . 38",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 5,
      "page_label": "vi"
    }
  },
  {
    "text": "3.6 Formatting output . . . . . . . . . . . . . . . . . . . . . . . 38\n3.7 Centimeters to inches . . . . . . . . . . . . . . . . . . . . . . 40\n3.8 Modulus operator . . . . . . . . . . . . . . . . . . . . . . . . 41\n3.9 Putting it all together . . . . . . . . . . . . . . . . . . . . . . 41\n3.10 The Scanner bug . . . . . . . . . . . . . . . . . . . . . . . . 43\n3.11 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 5,
      "page_label": "vi"
    }
  },
  {
    "text": "3.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n4 Void methods 49\n4.1 Math methods . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n4.2 Composition revisited . . . . . . . . . . . . . . . . . . . . . . 50\n4.3 Adding new methods . . . . . . . . . . . . . . . . . . . . . . 51\n4.4 Flow of execution . . . . . . . . . . . . . . . . . . . . . . . . 54",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 5,
      "page_label": "vi"
    }
  },
  {
    "text": "CONTENTS vii\n4.5 Parameters and arguments . . . . . . . . . . . . . . . . . . . 55\n4.6 Multiple parameters . . . . . . . . . . . . . . . . . . . . . . . 56\n4.7 Stack diagrams . . . . . . . . . . . . . . . . . . . . . . . . . 57\n4.8 Reading documentation . . . . . . . . . . . . . . . . . . . . . 59\n4.9 Writing documentation . . . . . . . . . . . . . . . . . . . . . 61\n4.10 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 6,
      "page_label": "vii"
    }
  },
  {
    "text": "4.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n5 Conditionals and logic 67\n5.1 Relational operators . . . . . . . . . . . . . . . . . . . . . . . 67\n5.2 Logical operators . . . . . . . . . . . . . . . . . . . . . . . . 68\n5.3 Conditional statements . . . . . . . . . . . . . . . . . . . . . 69\n5.4 Chaining and nesting . . . . . . . . . . . . . . . . . . . . . . 71\n5.5 Flag variables . . . . . . . . . . . . . . . . . . . . . . . . . . 72",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 6,
      "page_label": "vii"
    }
  },
  {
    "text": "5.6 The return statement . . . . . . . . . . . . . . . . . . . . . . 72\n5.7 Validating input . . . . . . . . . . . . . . . . . . . . . . . . . 73\n5.8 Recursive methods . . . . . . . . . . . . . . . . . . . . . . . 74\n5.9 Recursive stack diagrams . . . . . . . . . . . . . . . . . . . . 76\n5.10 Binary numbers . . . . . . . . . . . . . . . . . . . . . . . . . 77\n5.11 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 6,
      "page_label": "vii"
    }
  },
  {
    "text": "5.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n6 Value methods 85\n6.1 Return values . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n6.2 Writing methods . . . . . . . . . . . . . . . . . . . . . . . . 88\n6.3 Method composition . . . . . . . . . . . . . . . . . . . . . . 90\n6.4 Overloading . . . . . . . . . . . . . . . . . . . . . . . . . . . 92",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 6,
      "page_label": "vii"
    }
  },
  {
    "text": "viii CONTENTS\n6.5 Boolean methods . . . . . . . . . . . . . . . . . . . . . . . . 93\n6.6 Javadoc tags . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n6.7 More recursion . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n6.8 Leap of faith . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n6.9 One more example . . . . . . . . . . . . . . . . . . . . . . . 98\n6.10 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 7,
      "page_label": "viii"
    }
  },
  {
    "text": "6.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n7 Loops 105\n7.1 The while statement . . . . . . . . . . . . . . . . . . . . . . 105\n7.2 Generating tables . . . . . . . . . . . . . . . . . . . . . . . . 107\n7.3 Encapsulation and generalization . . . . . . . . . . . . . . . 109\n7.4 More generalization . . . . . . . . . . . . . . . . . . . . . . . 112\n7.5 The for statement . . . . . . . . . . . . . . . . . . . . . . . . 114",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 7,
      "page_label": "viii"
    }
  },
  {
    "text": "7.6 The do-while loop . . . . . . . . . . . . . . . . . . . . . . . . 115\n7.7 Break and continue . . . . . . . . . . . . . . . . . . . . . . . 116\n7.8 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n7.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n8 Arrays 123\n8.1 Creating arrays . . . . . . . . . . . . . . . . . . . . . . . . . 123\n8.2 Accessing elements . . . . . . . . . . . . . . . . . . . . . . . 124",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 7,
      "page_label": "viii"
    }
  },
  {
    "text": "8.3 Displaying arrays . . . . . . . . . . . . . . . . . . . . . . . . 125\n8.4 Copying arrays . . . . . . . . . . . . . . . . . . . . . . . . . 127\n8.5 Array length . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\n8.6 Array traversal . . . . . . . . . . . . . . . . . . . . . . . . . 128\n8.7 Random numbers . . . . . . . . . . . . . . . . . . . . . . . . 129",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 7,
      "page_label": "viii"
    }
  },
  {
    "text": "CONTENTS ix\n8.8 Traverse and count . . . . . . . . . . . . . . . . . . . . . . . 131\n8.9 Building a histogram . . . . . . . . . . . . . . . . . . . . . . 131\n8.10 The enhanced for loop . . . . . . . . . . . . . . . . . . . . . 133\n8.11 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n8.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n9 Strings and things 139\n9.1 Characters . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 8,
      "page_label": "ix"
    }
  },
  {
    "text": "9.2 Strings are immutable . . . . . . . . . . . . . . . . . . . . . 141\n9.3 String traversal . . . . . . . . . . . . . . . . . . . . . . . . . 141\n9.4 Substrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\n9.5 The indexOf method . . . . . . . . . . . . . . . . . . . . . . 144\n9.6 String comparison . . . . . . . . . . . . . . . . . . . . . . . . 144\n9.7 String formatting . . . . . . . . . . . . . . . . . . . . . . . . 145",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 8,
      "page_label": "ix"
    }
  },
  {
    "text": "9.8 Wrapper classes . . . . . . . . . . . . . . . . . . . . . . . . . 146\n9.9 Command-line arguments . . . . . . . . . . . . . . . . . . . . 147\n9.10 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148\n9.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\n10 Objects 155\n10.1 Point objects . . . . . . . . . . . . . . . . . . . . . . . . . . 155\n10.2 Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 8,
      "page_label": "ix"
    }
  },
  {
    "text": "10.3 Objects as parameters . . . . . . . . . . . . . . . . . . . . . 157\n10.4 Objects as return types . . . . . . . . . . . . . . . . . . . . . 158\n10.5 Mutable objects . . . . . . . . . . . . . . . . . . . . . . . . . 159\n10.6 Aliasing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160\n10.7 The null keyword . . . . . . . . . . . . . . . . . . . . . . . . 161",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 8,
      "page_label": "ix"
    }
  },
  {
    "text": "x CONTENTS\n10.8 Garbage collection . . . . . . . . . . . . . . . . . . . . . . . 162\n10.9 Class diagrams . . . . . . . . . . . . . . . . . . . . . . . . . 162\n10.10 Java library source . . . . . . . . . . . . . . . . . . . . . . . 163\n10.11 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164\n10.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\n11 Classes 171\n11.1 The Time class . . . . . . . . . . . . . . . . . . . . . . . . . 172",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 9,
      "page_label": "x"
    }
  },
  {
    "text": "11.2 Constructors . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n11.3 More constructors . . . . . . . . . . . . . . . . . . . . . . . . 174\n11.4 Getters and setters . . . . . . . . . . . . . . . . . . . . . . . 176\n11.5 Displaying objects . . . . . . . . . . . . . . . . . . . . . . . . 178\n11.6 The toString method . . . . . . . . . . . . . . . . . . . . . . 179\n11.7 The equals method . . . . . . . . . . . . . . . . . . . . . . . 180",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 9,
      "page_label": "x"
    }
  },
  {
    "text": "11.8 Adding times . . . . . . . . . . . . . . . . . . . . . . . . . . 181\n11.9 Pure methods and modi\ufb01ers . . . . . . . . . . . . . . . . . . 183\n11.10 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n11.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\n12 Arrays of objects 189\n12.1 Card objects . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\n12.2 Card toString . . . . . . . . . . . . . . . . . . . . . . . . . . 191",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 9,
      "page_label": "x"
    }
  },
  {
    "text": "12.3 Class variables . . . . . . . . . . . . . . . . . . . . . . . . . . 193\n12.4 The compareTo method . . . . . . . . . . . . . . . . . . . . 194\n12.5 Cards are immutable . . . . . . . . . . . . . . . . . . . . . . 195\n12.6 Arrays of cards . . . . . . . . . . . . . . . . . . . . . . . . . 196\n12.7 Sequential search . . . . . . . . . . . . . . . . . . . . . . . . 198",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 9,
      "page_label": "x"
    }
  },
  {
    "text": "CONTENTS xi\n12.8 Binary search . . . . . . . . . . . . . . . . . . . . . . . . . . 199\n12.9 Tracing the code . . . . . . . . . . . . . . . . . . . . . . . . 201\n12.10 Recursive version . . . . . . . . . . . . . . . . . . . . . . . . 202\n12.11 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\n12.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\n13 Objects of arrays 205\n13.1 The Deck class . . . . . . . . . . . . . . . . . . . . . . . . . 205",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 10,
      "page_label": "xi"
    }
  },
  {
    "text": "13.2 Shu\ufb04ing decks . . . . . . . . . . . . . . . . . . . . . . . . . . 207\n13.3 Selection sort . . . . . . . . . . . . . . . . . . . . . . . . . . 208\n13.4 Merge sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208\n13.5 Subdecks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\n13.6 Merging decks . . . . . . . . . . . . . . . . . . . . . . . . . . 210\n13.7 Adding recursion . . . . . . . . . . . . . . . . . . . . . . . . 211",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 10,
      "page_label": "xi"
    }
  },
  {
    "text": "13.8 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\n13.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\n14 Objects of objects 215\n14.1 Decks and hands . . . . . . . . . . . . . . . . . . . . . . . . 216\n14.2 CardCollection . . . . . . . . . . . . . . . . . . . . . . . . . 216\n14.3 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\n14.4 Dealing cards . . . . . . . . . . . . . . . . . . . . . . . . . . 221",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 10,
      "page_label": "xi"
    }
  },
  {
    "text": "14.5 The Player class . . . . . . . . . . . . . . . . . . . . . . . . . 223\n14.6 The Eights class . . . . . . . . . . . . . . . . . . . . . . . . . 226\n14.7 Class relationships . . . . . . . . . . . . . . . . . . . . . . . 230\n14.8 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231\n14.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 10,
      "page_label": "xi"
    }
  },
  {
    "text": "xii CONTENTS\nA Development tools 233\nA.1 Installing DrJava . . . . . . . . . . . . . . . . . . . . . . . . 233\nA.2 DrJava interactions . . . . . . . . . . . . . . . . . . . . . . . 235\nA.3 Command-line interface . . . . . . . . . . . . . . . . . . . . . 236\nA.4 Command-line testing . . . . . . . . . . . . . . . . . . . . . . 237\nA.5 Running Checkstyle . . . . . . . . . . . . . . . . . . . . . . . 239\nA.6 Tracing with a debugger . . . . . . . . . . . . . . . . . . . . 240",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 11,
      "page_label": "xii"
    }
  },
  {
    "text": "A.7 Testing with JUnit . . . . . . . . . . . . . . . . . . . . . . . 241\nA.8 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\nB Java 2D graphics 245\nB.1 Creating graphics . . . . . . . . . . . . . . . . . . . . . . . . 245\nB.2 Graphics methods . . . . . . . . . . . . . . . . . . . . . . . . 246\nB.3 Example drawing . . . . . . . . . . . . . . . . . . . . . . . . 248\nB.4 Vocabulary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 11,
      "page_label": "xii"
    }
  },
  {
    "text": "B.5 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250\nC Debugging 253\nC.1 Compile-time errors . . . . . . . . . . . . . . . . . . . . . . . 253\nC.2 Run-time errors . . . . . . . . . . . . . . . . . . . . . . . . . 257\nC.3 Logic errors . . . . . . . . . . . . . . . . . . . . . . . . . . . 261\nIndex 267",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 11,
      "page_label": "xii"
    }
  },
  {
    "text": "Preface\nThink Java is an introduction to computer science and programming intended\nfor readers with little or no experience. We start with the most basic concepts\nand are careful to de\ufb01ne all terms when they are \ufb01rst used. The book presents\neach new idea in a logical progression. Larger topics, like recursion and object-\noriented programming, are divided into smaller examples and introduced over\nthe course of several chapters.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 12,
      "page_label": "xiii"
    }
  },
  {
    "text": "the course of several chapters.\nThis book is intentionally concise. Each chapter is 12\u201314 pages and covers the\nmaterial for one week of a college course. It is not meant to be a comprehensive\npresentation of Java, but rather, an initial exposure to programming constructs\nand techniques. We begin with small problems and basic algorithms and work\nup to object-oriented design. In the vocabulary of computer science pedagogy,\nthis book uses the \u201cobjects late\u201d approach.\nThe philosophy behind the book",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 12,
      "page_label": "xiii"
    }
  },
  {
    "text": "The philosophy behind the book\nHere are the guiding principles that make the book the way it is:\n\u0088 One concept at a time. We break down topics that give beginners trouble\ninto a series of small steps, so that they can exercise each new concept\nin isolation before continuing.\n\u0088 Balance of Java and concepts. The book is not primarily about Java;\nit uses code examples to demonstrate computer science. Most chapters\nstart with language features and end with concepts.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 12,
      "page_label": "xiii"
    }
  },
  {
    "text": "xiv PREFACE\n\u0088 Conciseness. An important goal of the book is to be small enough so\nthat students can read and understand the entire text in a one-semester\ncollege or AP course.\n\u0088 Emphasis on vocabulary. We try to introduce the minimum number\nof terms and de\ufb01ne them carefully when they are \ufb01rst used. We also\norganize them in glossaries at the end of each chapter.\n\u0088 Program development. There are many strategies for writing programs,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 13,
      "page_label": "xiv"
    }
  },
  {
    "text": "including bottom-up, top-down, and others. We demonstrate multiple\nprogram development techniques, allowing readers to choose methods\nthat work best for them.\n\u0088 Multiple learning curves. To write a program, you have to understand\nthe algorithm, know the programming language, and be able to debug\nerrors. We discuss these and other aspects throughout the book, and\ninclude an appendix that summarizes our advice.\nObject-oriented programming",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 13,
      "page_label": "xiv"
    }
  },
  {
    "text": "Object-oriented programming\nSome Java books introduce classes and objects immediately; others begin with\nprocedural programming and transition to object-oriented more gradually.\nMany of Java\u2019s object-oriented features are motivated by problems with previ-\nous languages, and their implementations are in\ufb02uenced by this history. Some\nof these features are hard to explain when people aren\u2019t familiar with the\nproblems they solve.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 13,
      "page_label": "xiv"
    }
  },
  {
    "text": "problems they solve.\nWe get to object-oriented programming as quickly as possible, limited by the\nrequirement that we introduce concepts one at a time, as clearly as possible,\nin a way that allows readers to practice each idea in isolation before moving\non. So it takes some time to get there.\nBut you can\u2019t write Java programs (even hello world) without encountering\nobject-oriented features. In some cases we explain a feature brie\ufb02y when it\n\ufb01rst appears, and then explain it more deeply later on.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 13,
      "page_label": "xiv"
    }
  },
  {
    "text": "This book is well suited to prepare students for the AP Computer Science\nA exam, which includes object-oriented design and implementation. (AP is",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 13,
      "page_label": "xiv"
    }
  },
  {
    "text": "PREFACE xv\na registered trademark of the College Board.) We introduce nearly every\ntopic in the \u201cAP Java subset\u201d with a few exceptions. A mapping of Think\nJava section numbers to the current AP course description is available on our\nwebsite: http://thinkjava.org.\nAppendixes\nThe chapters of this book are meant to be read in order, because each one\nbuilds on the previous one. We also include three appendixes with material\nthat can be read at any time:\nAppendix 1: Development tools",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 14,
      "page_label": "xv"
    }
  },
  {
    "text": "Appendix 1: Development tools\nThe steps for compiling, running, and debugging Java code depend on\nthe details of the development environment and operating system. We\navoided putting these details in the main text, because they can be\ndistracting. Instead, we provide this appendix with a brief introduction\nto DrJava \u2013 an interactive development environment (IDE) that is helpful\nfor beginners \u2013 and other development tools, including Checkstyle for\ncode quality and JUnit for testing.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 14,
      "page_label": "xv"
    }
  },
  {
    "text": "code quality and JUnit for testing.\nAppendix 2: Java 2D graphics\nJava provides libraries for working with graphics and animation, and\nthese topics can be engaging for students. The libraries require object-\noriented features that readers will not completely understand until after\nChapter 11, but they can be used much earlier.\nAppendix 3: Debugging\nWe provide debugging suggestions throughout the book, but we also col-\nlect our debugging advice in an appendix. We recommend that readers",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 14,
      "page_label": "xv"
    }
  },
  {
    "text": "review this appendix several times as they work through the book.\nUsing the code examples\nMost of the code examples in this book are available from a Git repository at\nhttps://github.com/AllenDowney/ThinkJavaCode. Git is a \u201cversion con-\ntrol system\u201d that allows you to keep track of the \ufb01les that make up a project.\nA collection of \ufb01les under Git\u2019s control is called a \u201crepository\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 14,
      "page_label": "xv"
    }
  },
  {
    "text": "xvi PREFACE\nGitHub is a hosting service that provides storage for Git repositories and a\nconvenient web interface. It provides several ways to work with the code:\n\u0088 You can create a copy of the repository on GitHub by pressing the Fork\nbutton. If you don\u2019t already have a GitHub account, you\u2019ll need to\ncreate one. After forking, you\u2019ll have your own repository on GitHub\nthat you can use to keep track of code you write. Then you can \u201cclone\u201d",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 15,
      "page_label": "xvi"
    }
  },
  {
    "text": "the repository, which downloads a copy of the \ufb01les to your computer.\n\u0088 Alternatively, you could clone the repository without forking. If you\nchoose this option, you don\u2019t need a GitHub account, but you won\u2019t be\nable to save your changes on GitHub.\n\u0088 If you don\u2019t want to use Git at all, you can download the code in a ZIP\narchive using the Download ZIPbutton on the GitHub page, or this link:\nhttp://tinyurl.com/ThinkJavaCodeZip.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 15,
      "page_label": "xvi"
    }
  },
  {
    "text": "http://tinyurl.com/ThinkJavaCodeZip.\nAfter you clone the repository or unzip the ZIP \ufb01le, you should have a directory\ncalled ThinkJavaCode with a subdirectory for each chapter in the book.\nAll examples in this book were developed and tested using Java SE Develop-\nment Kit 8. If you are using a more recent version, the examples in this book\nshould still work. If you are using an older version, some of them may not.\nContributors over the years",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 15,
      "page_label": "xvi"
    }
  },
  {
    "text": "Contributors over the years\nMany people have sent corrections and suggestions, and we appreciate their\nvaluable feedback!\n\u0088 Ellen Hildreth used this book to teach Data Structures at Wellesley\nCollege and submitted a whole stack of corrections, along with some\ngreat suggestions.\n\u0088 Tania Pass\ufb01eld pointed out that some glossaries had leftover terms that\nno longer appeared in the text.\n\u0088 Elizabeth Wietho\ufb00 noticed that the series expansion of exp( \u2212x2) was",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 15,
      "page_label": "xvi"
    }
  },
  {
    "text": "wrong. She has also worked on a Ruby version of the book.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 15,
      "page_label": "xvi"
    }
  },
  {
    "text": "PREFACE xvii\n\u0088 Matt Crawford sent in a whole patch \ufb01le full of corrections.\n\u0088 Chi-Yu Li pointed out a typo and an error in one of the code examples.\n\u0088 Doan Thanh Nam corrected an example.\n\u0088 Muhammad Saied translated the book into Arabic, and found several\nerrors in the process.\n\u0088 Marius Margowski found an inconsistency in a code example.\n\u0088 Leslie Klein discovered another error in the series expansion of exp(\u2212x2),\nidenti\ufb01ed typos in the card array \ufb01gures, and gave helpful suggestions",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 16,
      "page_label": "xvii"
    }
  },
  {
    "text": "to clarify several exercises.\n\u0088 Micah Lindstrom reported half a dozen typos and sent corrections.\n\u0088 James Riely ported the textbook source from LaTeX to Sphinx.\nhttp://fpl.cs.depaul.edu/jriely/thinkapjava/\n\u0088 Peter Knaggs ported the book to C#.\nhttp://www.rigwit.co.uk/think/sharp/\n\u0088 Heidi Gentry-Kolen recorded several video lectures that follow the book.\nhttps://www.youtube.com/user/digipipeline\nWe are especially grateful to our technical reviewers: Blythe Samuels, David",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 16,
      "page_label": "xvii"
    }
  },
  {
    "text": "Wisneski, and Stephen Rose. They found errors, made many great suggestions,\nand helped make the book much better.\nAdditional contributors who found one or more typos: Stijn Debrouwere, Guy\nDriesen, Andai Velican, Chris Kuszmaul, Daniel Kurikesu, Josh Donath, Rens\nFindhammer, Elisa Abedrapo, Yousef BaA\ufb01f, Bruce Hill, Matt Underwood,\nIsaac Sultan, Dan Rice, Robert Beard, Daniel Pierce, Michael Giftthaler, and\nMin Zeng.\nIf you have additional comments or ideas about the text, please send them to:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 16,
      "page_label": "xvii"
    }
  },
  {
    "text": "feedback@greenteapress.com.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 16,
      "page_label": "xvii"
    }
  },
  {
    "text": "xviii PREFACE",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 17,
      "page_label": "xviii"
    }
  },
  {
    "text": "Chapter 1\nThe way of the program\nThe goal of this book is to teach you to think like a computer scientist. This\nway of thinking combines some of the best features of mathematics, engineer-\ning, and natural science. Like mathematicians, computer scientists use formal\nlanguages to denote ideas, speci\ufb01cally computations. Like engineers, they\ndesign things, assembling components into systems and evaluating trade-o\ufb00s\namong alternatives. And like scientists, they observe the behavior of complex",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 18,
      "page_label": "1"
    }
  },
  {
    "text": "systems, form hypotheses, and test predictions.\nThe single most important skill for a computer scientist is problem solving.\nIt involves the ability to formulate problems, think creatively about solutions,\nand express solutions clearly and accurately. As it turns out, the process of\nlearning to program is an excellent opportunity to develop problem solving\nskills. That\u2019s why this chapter is called, \u201cThe way of the program\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 18,
      "page_label": "1"
    }
  },
  {
    "text": "On one level you will be learning to program, a useful skill by itself. But on\nanother level you will use programming as a means to an end. As we go along,\nthat end will become clearer.\n1.1 What is programming?\nA program is a sequence of instructions that speci\ufb01es how to perform a\ncomputation. The computation might be something mathematical, like solving",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 18,
      "page_label": "1"
    }
  },
  {
    "text": "2 Chapter 1 The way of the program\na system of equations or \ufb01nding the roots of a polynomial. It can also be\na symbolic computation, like searching and replacing text in a document or\n(strangely enough) compiling a program. The details look di\ufb00erent in di\ufb00erent\nlanguages, but a few basic instructions appear in just about every language.\ninput: Get data from the keyboard, a \ufb01le, a sensor, or some other device.\noutput: Display data on the screen, or send data to a \ufb01le or other device.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 19,
      "page_label": "2"
    }
  },
  {
    "text": "math: Perform basic mathematical operations like addition and division.\ndecisions: Check for certain conditions and execute the appropriate code.\nrepetition: Perform some action repeatedly, usually with some variation.\nBelieve it or not, that\u2019s pretty much all there is to it. Every program you\u2019ve\never used, no matter how complicated, is made up of small instructions that\nlook much like these. So you can think of programming as the process of",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 19,
      "page_label": "2"
    }
  },
  {
    "text": "breaking down a large, complex task into smaller and smaller subtasks. The\nprocess continues until the subtasks are simple enough to be performed with\nthe basic instructions provided by the computer.\n1.2 What is computer science?\nOne of the most interesting aspects of writing programs is deciding how to\nsolve a particular problem, especially when there are multiple solutions. For\nexample, there are numerous ways to sort a list of numbers, and each way has",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 19,
      "page_label": "2"
    }
  },
  {
    "text": "its advantages. In order to determine which way is best for a given situation,\nwe need techniques for describing and analyzing solutions formally.\nComputer science is the science of algorithms, including their discovery and\nanalysis. An algorithm is a sequence of steps that speci\ufb01es how to solve a\nproblem. Some algorithms are faster than others, and some use less space\nin computer memory. As you learn to develop algorithms for problems you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 19,
      "page_label": "2"
    }
  },
  {
    "text": "haven\u2019t solved before, you also learn to think like a computer scientist.\nDesigning algorithms and writing code is di\ufb03cult and error-prone. For histor-\nical reasons, programming errors are called bugs, and the process of tracking",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 19,
      "page_label": "2"
    }
  },
  {
    "text": "1.3 Programming languages 3\nthem down and correcting them is called debugging. As you learn to debug\nyour programs, you will develop new problem solving skills. You will need to\nthink creatively when unexpected errors happen.\nAlthough it can be frustrating, debugging is an intellectually rich, challenging,\nand interesting part of computer programming. In some ways, debugging is\nlike detective work. You are confronted with clues, and you have to infer the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 20,
      "page_label": "3"
    }
  },
  {
    "text": "processes and events that led to the results you see. Thinking about how to\ncorrect programs and improve their performance sometimes even leads to the\ndiscovery of new algorithms.\n1.3 Programming languages\nThe programming language you will learn is Java, which is a high-level lan-\nguage. Other high-level languages you may have heard of include Python, C\nand C++, Ruby, and JavaScript.\nBefore they can run, programs in high-level languages have to be translated",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 20,
      "page_label": "3"
    }
  },
  {
    "text": "into a low-level language, also called \u201cmachine language\u201d. This translation\ntakes some time, which is a small disadvantage of high-level languages. But\nhigh-level languages have two advantages:\n\u0088 It is much easier to program in a high-level language. Programs take\nless time to write, they are shorter and easier to read, and they are more\nlikely to be correct.\n\u0088 High-level languages are portable, meaning they can run on di\ufb00erent\nkinds of computers with few or no modi\ufb01cations. Low-level programs",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 20,
      "page_label": "3"
    }
  },
  {
    "text": "can only run on one kind of computer, and have to be rewritten to run\non another.\nTwo kinds of programs translate high-level languages into low-level languages:\ninterpreters and compilers. An interpreter reads a high-level program and\nexecutes it, meaning that it does what the program says. It processes the pro-\ngram a little at a time, alternately reading lines and performing computations.\nFigure 1.1 shows the structure of an interpreter.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 20,
      "page_label": "3"
    }
  },
  {
    "text": "Figure 1.1 shows the structure of an interpreter.\nIn contrast, a compiler reads the entire program and translates it completely\nbefore the program starts running. In this context, the high-level program",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 20,
      "page_label": "3"
    }
  },
  {
    "text": "4 Chapter 1 The way of the program\nFigure 1.1: How interpreted languages are executed.\nis called the source code , and the translated program is called the object\ncode or the executable. Once a program is compiled, you can execute it\nrepeatedly without further translation. As a result, compiled programs often\nrun faster than interpreted programs.\nJava is both compiled and interpreted. Instead of translating programs directly",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 21,
      "page_label": "4"
    }
  },
  {
    "text": "into machine language, the Java compiler generates byte code . Similar to\nmachine language, byte code is easy and fast to interpret. But it is also\nportable, so it is possible to compile a Java program on one machine, transfer\nthe byte code to another machine, and run the byte code on the other machine.\nThe interpreter that runs byte code is called a \u201cJava Virtual Machine\u201d (JVM).\nFigure 1.2: The process of compiling and running a Java program.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 21,
      "page_label": "4"
    }
  },
  {
    "text": "Figure 1.2 shows the steps of this process. Although it might seem complicated,\nthese steps are automated for you in most program development environments.\nUsually you only have to press a button or type a single command to compile\nand run your program. On the other hand, it is important to know what steps\nare happening in the background, so if something goes wrong you can \ufb01gure\nout what it is.\n1.4 The hello world program\nTraditionally, the \ufb01rst program you write when learning a new programming",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 21,
      "page_label": "4"
    }
  },
  {
    "text": "language is called the hello world program. All it does is display the words\n\u201cHello, World!\u201d on the screen. In Java, it looks like this:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 21,
      "page_label": "4"
    }
  },
  {
    "text": "1.4 The hello world program 5\npublic class Hello {\npublic static void main(String[] args) {\n// generate some simple output\nSystem.out.println(\"Hello, World!\");\n}\n}\nWhen this program runs it displays:\nHello, World!\nNotice that the output does not include the quotation marks.\nJava programs are made up of class and method de\ufb01nitions, and methods are\nmade up of statements. A statement is a line of code that performs a basic\noperation. In the hello world program, this line is a print statement that",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 22,
      "page_label": "5"
    }
  },
  {
    "text": "displays a message on the screen:\nSystem.out.println(\"Hello, World!\");\nSystem.out.println displays results on the screen; the name println stands\nfor \u201cprint line\u201d. Confusingly, print can mean both \u201cdisplay on the screen\u201d and\n\u201csend to the printer\u201d. In this book, we\u2019ll try to say \u201cdisplay\u201d when we mean\noutput to the screen. Like most statements, the print statement ends with a\nsemicolon (;).\nJava is \u201ccase-sensitive\u201d, which means that uppercase and lowercase are not the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 22,
      "page_label": "5"
    }
  },
  {
    "text": "same. In this example, System has to begin with an uppercase letter; system\nand SYSTEM won\u2019t work.\nA method is a named sequence of statements. This program de\ufb01nes one\nmethod named main:\npublic static void main(String[] args)\nThe name and format of main is special: when the program runs, it starts at\nthe \ufb01rst statement in main and ends when it \ufb01nishes the last statement. Later,\nwe will see programs that de\ufb01ne more than one method.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 22,
      "page_label": "5"
    }
  },
  {
    "text": "A class is a collection of methods. This program de\ufb01nes a class named Hello.\nYou can give a class any name you like, but it is conventional to start with a",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 22,
      "page_label": "5"
    }
  },
  {
    "text": "6 Chapter 1 The way of the program\ncapital letter. The name of the class has to match the name of the \ufb01le it is in,\nso this class has to be in a \ufb01le named Hello.java.\nJava uses squiggly braces ({and }) to group things together. In Hello.java,\nthe outermost braces contain the class de\ufb01nition, and the inner braces contain\nthe method de\ufb01nition.\nThe line that begins with two slashes ( //) is a comment, which is a bit of\nEnglish text that explains the code. When the compiler sees //, it ignores",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 23,
      "page_label": "6"
    }
  },
  {
    "text": "everything from there until the end of the line. Comments have no e\ufb00ect on\nthe execution of the program, but they make it easier for other programmers\n(and your future self) to understand what you meant to do.\n1.5 Displaying strings\nYou can put as many statements as you like in main. For example, to display\nmore than one line of output:\npublic class Hello {\npublic static void main(String[] args) {\n// generate some simple output\nSystem.out.println(\"Hello, World!\"); // first line",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 23,
      "page_label": "6"
    }
  },
  {
    "text": "System.out.println(\"How are you?\"); // another line\n}\n}\nAs this example shows, you can put comments at the end of a line as well as\non lines all by themselves.\nPhrases that appear in quotation marks are called strings, because they con-\ntain a sequence of \u201ccharacters\u201d strung together. Characters can be letters,\nnumbers, punctuation marks, symbols, spaces, tabs, etc.\nSystem.out.println appends a special character, called a newline, that",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 23,
      "page_label": "6"
    }
  },
  {
    "text": "moves to the beginning of the next line. If you don\u2019t want a newline at the\nend, you can use print instead of println:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 23,
      "page_label": "6"
    }
  },
  {
    "text": "1.6 Escape sequences 7\npublic class Goodbye {\npublic static void main(String[] args) {\nSystem.out.print(\"Goodbye, \");\nSystem.out.println(\"cruel world\");\n}\n}\nIn this example, the \ufb01rst statement does not add a newline, so the output\nappears on a single line as Goodbye, cruel world. Notice that there is a\nspace at the end of the \ufb01rst string, which appears in the output.\n1.6 Escape sequences\nIt is possible to display multiple lines of output in just one line of code. You",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 24,
      "page_label": "7"
    }
  },
  {
    "text": "just have to tell Java where to put the line breaks.\npublic class Hello {\npublic static void main(String[] args) {\nSystem.out.print(\"Hello!\\nHow are you doing?\\n\");\n}\n}\nThe output is two lines, each ending with a newline character:\nHello!\nHow are you doing?\nThe \\n is an escape sequence, which is a sequence of characters that rep-\nresents a special character. The backslash allows you to \u201cescape\u201d the string\u2019s\nliteral interpretation. Notice there is no space between \\n and How. If you add",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 24,
      "page_label": "7"
    }
  },
  {
    "text": "a space there, there will be a space at the beginning of the second line.\nAnother common use of escape sequences is to have quotation marks inside\nof strings. Since double quotes indicate the beginning and end of strings, you\nneed to escape them with a backslash.\nSystem.out.println(\"She said \\\"Hello!\\\" to me.\");",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 24,
      "page_label": "7"
    }
  },
  {
    "text": "8 Chapter 1 The way of the program\n\\n newline\n\\t tab\n\\\" double quote\n\\\\ backslash\nTable 1.1: Common escape sequences\nThe result is:\nShe said \"Hello!\" to me.\n1.7 Formatting code\nIn Java programs, some spaces are required. For example, you need at least\none space between words, so this program is not legal:\npublicclassGoodbye{\npublicstaticvoidmain(String[] args) {\nSystem.out.print(\"Goodbye, \");\nSystem.out.println(\"cruel world\");\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 25,
      "page_label": "8"
    }
  },
  {
    "text": "System.out.println(\"cruel world\");\n}\n}\nBut most other spaces are optional. For example, this program is legal:\npublic class Goodbye {\npublic static void main(String[] args) {\nSystem.out.print(\"Goodbye, \");\nSystem.out.println(\"cruel world\");\n}\n}\nThe newlines are optional, too. So we could just write:\npublic class Goodbye { public static void main(String[] args)\n{ System.out.print(\"Goodbye, \"); System.out.println\n(\"cruel world\");}}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 25,
      "page_label": "8"
    }
  },
  {
    "text": "1.8 Debugging code 9\nIt still works, but the program is getting harder and harder to read. Newlines\nand spaces are important for organizing your program visually, making it easier\nto understand the program and \ufb01nd errors when they occur.\nMany editors will automatically format source code with consistent indenting\nand line breaks. For example, in DrJava (see Appendix A) you can indent the\ncode by selecting all text ( Ctrl+A) and pressing the Tab key.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 26,
      "page_label": "9"
    }
  },
  {
    "text": "Organizations that do a lot of software development usually have strict guide-\nlines on how to format source code. For example, Google publishes its Java\ncoding standards for use in open-source projects: http://google.github.\nio/styleguide/javaguide.html.\nYou might not understand these guidelines now, because they refer to language\nfeatures we haven\u2019t yet seen. But you might want to refer back to them\nperiodically as you read this book.\n1.8 Debugging code",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 26,
      "page_label": "9"
    }
  },
  {
    "text": "1.8 Debugging code\nIt is a good idea to read this book in front of a computer so you can try out the\nexamples as you go. You can run many of the examples directly in DrJava\u2019s\nInteractions Pane (see Appendix A). But if you put the code in a source \ufb01le,\nit will be easier to try out variations.\nWhenever you are experimenting with a new feature, you should also try to\nmake mistakes. For example, in the hello world program, what happens if you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 26,
      "page_label": "9"
    }
  },
  {
    "text": "leave out one of the quotation marks? What if you leave out both? What\nif you spell println wrong? These kinds of experiments help you remember\nwhat you read. They also help with debugging, because you learn what the\nerror messages mean. It is better to make mistakes now and on purpose than\nlater on and accidentally.\nDebugging is like an experimental science: once you have an idea about what\nis going wrong, you modify your program and try again. If your hypothesis",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 26,
      "page_label": "9"
    }
  },
  {
    "text": "was correct, then you can predict the result of the modi\ufb01cation, and you take\na step closer to a working program. If your hypothesis was wrong, you have\nto come up with a new one.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 26,
      "page_label": "9"
    }
  },
  {
    "text": "10 Chapter 1 The way of the program\nProgramming and debugging should go hand in hand. Don\u2019t just write a bunch\nof code and then perform trial and error debugging until it all works. Instead,\nstart with a program that does something and make small modi\ufb01cations, de-\nbugging them as you go, until the program does what you want. That way\nyou will always have a working program, and it will be easier to isolate errors.\nA great example of this principle is the Linux operating system, which contains",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 27,
      "page_label": "10"
    }
  },
  {
    "text": "millions of lines of code. It started out as a simple program Linus Torvalds\nused to explore the Intel 80386 chip. According to Larry Green\ufb01eld in The\nLinux Users\u2019 Guide, \u201cOne of Linus\u2019s earlier projects was a program that would\nswitch between printing AAAA and BBBB. This later evolved to Linux.\u201d\nFinally, programming sometimes brings out strong emotions. If you are strug-\ngling with a di\ufb03cult bug, you might feel angry, despondent, or embarrassed.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 27,
      "page_label": "10"
    }
  },
  {
    "text": "Remember that you are not alone, and most if not all programmers have had\nsimilar experiences. Don\u2019t hesitate to reach out to a friend and ask questions!\n1.9 Vocabulary\nThroughout the book, we try to de\ufb01ne each term the \ufb01rst time we use it. At\nthe end of each chapter, we include the new terms and their de\ufb01nitions in\norder of appearance. If you spend some time learning this vocabulary, you\nwill have an easier time reading the following chapters.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 27,
      "page_label": "10"
    }
  },
  {
    "text": "problem solving: The process of formulating a problem, \ufb01nding a solution,\nand expressing the solution.\nprogram: A sequence of instructions that speci\ufb01es how to perform tasks on\na computer.\nprogramming: The application of problem solving to creating executable\ncomputer programs.\ncomputer science: The scienti\ufb01c and practical approach to computation\nand its applications.\nalgorithm: A procedure or formula for solving a problem, with or without a\ncomputer.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 27,
      "page_label": "10"
    }
  },
  {
    "text": "1.9 Vocabulary 11\nbug: An error in a program.\ndebugging: The process of \ufb01nding and removing errors.\nhigh-level language: A programming language that is designed to be easy\nfor humans to read and write.\nlow-level language: A programming language that is designed to be easy\nfor a computer to run. Also called \u201cmachine language\u201d or \u201cassembly\nlanguage\u201d.\nportable: The ability of a program to run on more than one kind of computer.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 28,
      "page_label": "11"
    }
  },
  {
    "text": "interpret: To run a program in a high-level language by translating it one\nline at a time and immediately executing the corresponding instructions.\ncompile: To translate a program in a high-level language into a low-level\nlanguage, all at once, in preparation for later execution.\nsource code: A program in a high-level language, before being compiled.\nobject code: The output of the compiler, after translating the program.\nexecutable: Another name for object code that is ready to run on speci\ufb01c",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 28,
      "page_label": "11"
    }
  },
  {
    "text": "hardware.\nbyte code: A special kind of object code used for Java programs. Byte code\nis similar to a low-level language, but it is portable like a high-level\nlanguage.\nstatement: Part of a program that speci\ufb01es one step of an algorithm.\nprint statement: A statement that causes output to be displayed on the\nscreen.\nmethod: A named sequence of statements.\nclass: For now, a collection of related methods. (We will see later that there\nis more to it.)",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 28,
      "page_label": "11"
    }
  },
  {
    "text": "is more to it.)\ncomment: A part of a program that contains information about the program\nbut has no e\ufb00ect when the program runs.\nstring: A sequence of characters; the primary data type for text.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 28,
      "page_label": "11"
    }
  },
  {
    "text": "12 Chapter 1 The way of the program\nnewline: A special character signifying the end of a line of text. Also known\nas line ending, end of line (EOL), or line break.\nescape sequence: A sequence of code that represents a special character\nwhen used inside a string.\n1.10 Exercises\nAt the end of each chapter, we include exercises you can do with the things\nyou\u2019ve learned. We encourage you to at least attempt every problem. You\ncan\u2019t learn to program only by reading about it; you have to practice.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 29,
      "page_label": "12"
    }
  },
  {
    "text": "Before you can compile and run Java programs, you might have to download\nand install a few tools. There are many good options, but we recommend\nDrJava, which is an \u201cintegrated development environment\u201d (IDE) well suited\nfor beginners. Instructions for getting started are in Appendix A.1.\nThe code for this chapter is in the ch01 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 29,
      "page_label": "12"
    }
  },
  {
    "text": "the exercises, we recommend that you compile and run the examples.\nExercise 1.1 Computer scientists have the annoying habit of using common\nEnglish words to mean something other than their common English meaning.\nFor example, in English, statements and comments are the same thing, but in\nprograms they are di\ufb00erent.\n1. In computer jargon, what\u2019s the di\ufb00erence between a statement and a\ncomment?\n2. What does it mean to say that a program is portable?",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 29,
      "page_label": "12"
    }
  },
  {
    "text": "3. In common English, what does the word compile mean?\n4. What is an executable? Why is that word used as a noun?\nThe glossary at the end of each chapter is intended to highlight words and\nphrases that have special meanings in computer science. When you see familiar\nwords, don\u2019t assume that you know what they mean!",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 29,
      "page_label": "12"
    }
  },
  {
    "text": "1.10 Exercises 13\nExercise 1.2 Before you do anything else, \ufb01nd out how to compile and run\na Java program. Some environments provide sample programs similar to the\nexample in Section 1.4.\n1. Type in the hello world program, then compile and run it.\n2. Add a print statement that displays a second message after the \u201cHello,\nWorld!\u201d. Say something witty like, \u201cHow are you?\u201d Compile and run\nthe program again.\n3. Add a comment to the program (anywhere), recompile, and run it again.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 30,
      "page_label": "13"
    }
  },
  {
    "text": "The new comment should not a\ufb00ect the result.\nThis exercise may seem trivial, but it is the starting place for many of the\nprograms we will work with. To debug with con\ufb01dence, you will need to have\ncon\ufb01dence in your programming environment.\nIn some environments, it is easy to lose track of which program is executing.\nYou might \ufb01nd yourself trying to debug one program while you are accidentally\nrunning another. Adding (and changing) print statements is a simple way to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 30,
      "page_label": "13"
    }
  },
  {
    "text": "be sure that the program you are looking at is the program you are running.\nExercise 1.3 It is a good idea to commit as many errors as you can think\nof, so that you see what error messages the compiler produces. Sometimes the\ncompiler tells you exactly what is wrong, and all you have to do is \ufb01x it. But\nsometimes the error messages are misleading. Over time you will develop a\nsense for when you can trust the compiler and when you have to \ufb01gure things\nout yourself.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 30,
      "page_label": "13"
    }
  },
  {
    "text": "out yourself.\nStarting with the hello world program, try out each of the following errors.\nAfter you make each change, compile the program, read the error message (if\nthere is one), and then \ufb01x the error.\n1. Remove one of the open squiggly braces.\n2. Remove one of the close squiggly braces.\n3. Instead of main, write mian.\n4. Remove the word static.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 30,
      "page_label": "13"
    }
  },
  {
    "text": "14 Chapter 1 The way of the program\n5. Remove the word public.\n6. Remove the word System.\n7. Replace println with Println.\n8. Replace println with print.\n9. Delete one of the parentheses. Add an extra one.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 31,
      "page_label": "14"
    }
  },
  {
    "text": "Chapter 2\nVariables and operators\nThis chapter describes how to write statements using variables, which store\nvalues like numbers and words, and operators, which are symbols that perform\na computation. We also explain three kinds of programming errors and o\ufb00er\nadditional debugging advice.\n2.1 Declaring variables\nOne of the most powerful features of a programming language is the ability to\nde\ufb01ne and manipulate variables. A variable is a named location that stores",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 32,
      "page_label": "15"
    }
  },
  {
    "text": "a value. Values may be numbers, text, images, sounds, and other types of\ndata. To store a value, you \ufb01rst have to declare a variable.\nString message;\nThis statement is a declaration, because it declares that the variable named\nmessage has the type String. Each variable has a type that determines what\nkind of values it can store. For example, the int type can store integers, and\nthe char type can store characters.\nSome types begin with a capital letter and some with lowercase. We will learn",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 32,
      "page_label": "15"
    }
  },
  {
    "text": "the signi\ufb01cance of this distinction later, but for now you should take care to\nget it right. There is no such type as Int or string.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 32,
      "page_label": "15"
    }
  },
  {
    "text": "16 Chapter 2 Variables and operators\nTo declare an integer variable named x, you simply type:\nint x;\nNote that x is an arbitrary name for the variable. In general, you should use\nnames that indicate what the variables mean. For example, if you saw these\ndeclarations, you could probably guess what values would be stored:\nString firstName;\nString lastName;\nint hour, minute;\nThis example declares two variables with type String and two with type",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 33,
      "page_label": "16"
    }
  },
  {
    "text": "int. When a variable name contains more than one word, like firstName,\nit is conventional to capitalize the \ufb01rst letter of each word except the \ufb01rst.\nVariable names are case-sensitive, so firstName is not the same as firstname\nor FirstName.\nThis example also demonstrates the syntax for declaring multiple variables\nwith the same type on one line: hour and minute are both integers. Note that\neach declaration statement ends with a semicolon.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 33,
      "page_label": "16"
    }
  },
  {
    "text": "each declaration statement ends with a semicolon.\nYou can use any name you want for a variable. But there are about 50 reserved\nwords, called keywords, that you are not allowed to use as variable names.\nThese words include public, class, static, void, and int, which are used\nby the compiler to analyze the structure of the program.\nYou can \ufb01nd the complete list of keywords at http://docs.oracle.com/\njavase/tutorial/java/nutsandbolts/_keywords.html, but you don\u2019t have",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 33,
      "page_label": "16"
    }
  },
  {
    "text": "to memorize them. Most programming editors provide \u201csyntax highlighting\u201d,\nwhich makes di\ufb00erent parts of the program appear in di\ufb00erent colors.\n2.2 Assignment\nNow that we have declared variables, we want to use them to store values. We\ndo that with an assignment statement.\nmessage = \"Hello!\"; // give message the value \"Hello!\"\nhour = 11; // assign the value 11 to hour\nminute = 59; // set minute to 59",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 33,
      "page_label": "16"
    }
  },
  {
    "text": "2.3 State diagrams 17\nThis example shows three assignments, and the comments illustrate di\ufb00erent\nways people sometimes talk about assignment statements. The vocabulary\ncan be confusing here, but the idea is straightforward:\n\u0088 When you declare a variable, you create a named storage location.\n\u0088 When you make an assignment to a variable, you update its value.\nAs a general rule, a variable has to have the same type as the value you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 34,
      "page_label": "17"
    }
  },
  {
    "text": "assign to it. For example, you cannot store a string in minute or an integer\nin message. We will see some examples that seem to break this rule, but we\u2019ll\nget to that later.\nA common source of confusion is that some strings look like integers, but they\nare not. For example, message can contain the string \"123\", which is made\nup of the characters ' 1' , ' 2' , and ' 3' . But that is not the same thing as the\ninteger 123.\nmessage = \"123\"; // legal\nmessage = 123; // not legal",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 34,
      "page_label": "17"
    }
  },
  {
    "text": "message = 123; // not legal\nVariables must be initialized (assigned for the \ufb01rst time) before they can\nbe used. You can declare a variable and then assign a value later, as in the\nprevious example. You can also declare and initialize on the same line:\nString message = \"Hello!\";\nint hour = 11;\nint minute = 59;\n2.3 State diagrams\nBecause Java uses the = symbol for assignment, it is tempting to interpret the\nstatement a = b as a statement of equality. It is not!",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 34,
      "page_label": "17"
    }
  },
  {
    "text": "Equality is commutative, and assignment is not. For example, in mathematics\nif a = 7 then 7 = a. In Java a = 7; is a legal assignment statement, but\n7 = a; is not. The left side of an assignment statement has to be a variable\nname (storage location).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 34,
      "page_label": "17"
    }
  },
  {
    "text": "18 Chapter 2 Variables and operators\nAlso, in mathematics, a statement of equality is true for all time. If a = b\nnow, a is always equal to b. In Java, an assignment statement can make two\nvariables equal, but they don\u2019t have to stay that way.\nint a = 5;\nint b = a; // a and b are now equal\na = 3; // a and b are no longer equal\nThe third line changes the value of a, but it does not change the value of b,\nso they are no longer equal.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 35,
      "page_label": "18"
    }
  },
  {
    "text": "so they are no longer equal.\nTaken together, the variables in a program and their current values make up\nthe program\u2019s state. Figure 2.1 shows the state of the program after these\nassignment statements run.\n5\n3a\nb\nFigure 2.1: State diagram of the variables a and b.\nDiagrams like this one that show the state of the program are called state\ndiagrams. Each variable is represented with a box showing the name of the\nvariable on the outside and the value inside. As the program runs, the state",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 35,
      "page_label": "18"
    }
  },
  {
    "text": "changes, so you should think of a state diagram as a snapshot of a particular\npoint in time.\n2.4 Printing variables\nYou can display the value of a variable using print or println. The fol-\nlowing statements declare a variable named firstLine, assign it the value\n\"Hello, again!\", and display that value.\nString firstLine = \"Hello, again!\";\nSystem.out.println(firstLine);\nWhen we talk about displaying a variable, we generally mean the value of the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 35,
      "page_label": "18"
    }
  },
  {
    "text": "variable. To display the name of a variable, you have to put it in quotes.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 35,
      "page_label": "18"
    }
  },
  {
    "text": "2.5 Arithmetic operators 19\nSystem.out.print(\"The value of firstLine is \");\nSystem.out.println(firstLine);\nFor this example, the output is:\nThe value of firstLine is Hello, again!\nConveniently, the syntax for displaying a variable is the same regardless of its\ntype. For example:\nint hour = 11;\nint minute = 59;\nSystem.out.print(\"The current time is \");\nSystem.out.print(hour);\nSystem.out.print(\":\");\nSystem.out.print(minute);\nSystem.out.println(\".\");\nThe output of this program is:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 36,
      "page_label": "19"
    }
  },
  {
    "text": "The output of this program is:\nThe current time is 11:59.\nTo output multiple values on the same line, it\u2019s common to use several print\nstatements followed by println at the end. But don\u2019t forget the println!\nOn many computers, the output from print is stored without being displayed\nuntil println is run; then the entire line is displayed at once. If you omit the\nprintln, the program might display the stored output at unexpected times or\neven terminate without displaying anything.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 36,
      "page_label": "19"
    }
  },
  {
    "text": "even terminate without displaying anything.\n2.5 Arithmetic operators\nOperators are symbols that represent simple computations. For example, the\naddition operator is +, subtraction is -, multiplication is *, and division is /.\nThe following program converts a time of day to minutes:\nint hour = 11;\nint minute = 59;\nSystem.out.print(\"Number of minutes since midnight: \");\nSystem.out.println(hour * 60 + minute);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 36,
      "page_label": "19"
    }
  },
  {
    "text": "20 Chapter 2 Variables and operators\nIn this program, hour * 60 + minute is an expression, which represents a\nsingle value to be computed. When the program runs, each variable is replaced\nby its current value, and then the operators are applied. The values operators\nwork with are called operands.\nThe result of the previous example is:\nNumber of minutes since midnight: 719\nExpressions are generally a combination of numbers, variables, and operators.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 37,
      "page_label": "20"
    }
  },
  {
    "text": "When complied and executed, they become a single value.\nFor example, the expression1 + 1 has the value2. In the expression hour - 1,\nJava replaces the variable with its value, yielding 11 - 1, which has the value\n10. In the expression hour * 60 + minute, both variables get replaced, yield-\ning 11 * 60 + 59. The multiplication happens \ufb01rst, yielding 660 + 59. Then\nthe addition yields 719.\nAddition, subtraction, and multiplication all do what you expect, but you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 37,
      "page_label": "20"
    }
  },
  {
    "text": "might be surprised by division. For example, the following fragment tries to\ncompute the fraction of an hour that has elapsed:\nSystem.out.print(\"Fraction of the hour that has passed: \");\nSystem.out.println(minute / 60);\nThe output is:\nFraction of the hour that has passed: 0\nThis result often confuses people. The value of minute is 59, and 59 divided\nby 60 should be 0.98333, not 0. The problem is that Java performs \u201cinteger",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 37,
      "page_label": "20"
    }
  },
  {
    "text": "division\u201d when the operands are integers. By design, integer division always\nrounds toward zero, even in cases like this one where the next integer is close.\nAs an alternative, we can calculate a percentage rather than a fraction:\nSystem.out.print(\"Percent of the hour that has passed: \");\nSystem.out.println(minute * 100 / 60);\nThe new output is:\nPercent of the hour that has passed: 98\nAgain the result is rounded down, but at least now it\u2019s approximately correct.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 37,
      "page_label": "20"
    }
  },
  {
    "text": "2.6 Floating-point numbers 21\n2.6 Floating-point numbers\nA more general solution is to use\ufb02oating-point numbers, which can represent\nfractions as well as integers. In Java, the default \ufb02oating-point type is called\ndouble, which is short for double-precision. You can create double variables\nand assign values to them using the same syntax we used for the other types:\ndouble pi;\npi = 3.14159;\nJava performs \u201c\ufb02oating-point division\u201d when one or more operands aredouble",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 38,
      "page_label": "21"
    }
  },
  {
    "text": "values. So we can solve the problem we saw in the previous section:\ndouble minute = 59.0;\nSystem.out.print(\"Fraction of the hour that has passed: \");\nSystem.out.println(minute / 60.0);\nThe output is:\nFraction of the hour that has passed: 0.9833333333333333\nAlthough \ufb02oating-point numbers are useful, they can be a source of confusion.\nFor example, Java distinguishes the integer value 1 from the \ufb02oating-point\nvalue 1.0, even though they seem to be the same number. They belong to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 38,
      "page_label": "21"
    }
  },
  {
    "text": "di\ufb00erent data types, and strictly speaking, you are not allowed to make as-\nsignments between types.\nThe following is illegal because the variable on the left is an int and the value\non the right is a double:\nint x = 1.1; // compiler error\nIt is easy to forget this rule because in many cases Java automatically converts\nfrom one type to another:\ndouble y = 1; // legal, but bad style\nThe preceding example should be illegal, but Java allows it by converting the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 38,
      "page_label": "21"
    }
  },
  {
    "text": "int value 1 to the double value 1.0 automatically. This leniency is convenient,\nbut it often causes problems for beginners. For example:\ndouble y = 1 / 3; // common mistake",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 38,
      "page_label": "21"
    }
  },
  {
    "text": "22 Chapter 2 Variables and operators\nYou might expect the variable y to get the value 0.333333, which is a legal\n\ufb02oating-point value. But instead it gets the value 0.0. The expression on the\nright divides two integers, so Java does integer division, which yields the int\nvalue 0. Converted to double, the value assigned to y is 0.0.\nOne way to solve this problem (once you \ufb01gure out the bug) is to make the\nright-hand side a \ufb02oating-point expression. The following sets y to 0.333333,\nas expected:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 39,
      "page_label": "22"
    }
  },
  {
    "text": "as expected:\ndouble y = 1.0 / 3.0; // correct\nAs a matter of style, you should always assign \ufb02oating-point values to \ufb02oating-\npoint variables. The compiler won\u2019t make you do it, but you never know when\na simple mistake will come back and haunt you.\n2.7 Rounding errors\nMost \ufb02oating-point numbers are only approximately correct. Some numbers,\nlike reasonably-sized integers, can be represented exactly. But repeating frac-\ntions, like 1 /3, and irrational numbers, like \u03c0, cannot. To represent these",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 39,
      "page_label": "22"
    }
  },
  {
    "text": "numbers, computers have to round o\ufb00 to the nearest \ufb02oating-point number.\nThe di\ufb00erence between the number we want and the \ufb02oating-point number\nwe get is called rounding error. For example, the following two statements\nshould be equivalent:\nSystem.out.println(0.1 * 10);\nSystem.out.println(0.1 + 0.1 + 0.1 + 0.1 + 0.1\n+ 0.1 + 0.1 + 0.1 + 0.1 + 0.1);\nBut on many machines, the output is:\n1.0\n0.9999999999999999\nThe problem is that0.1, which is a terminating fraction in decimal, is a repeat-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 39,
      "page_label": "22"
    }
  },
  {
    "text": "ing fraction in binary. So its \ufb02oating-point representation is only approximate.\nWhen we add up the approximations, the rounding errors accumulate.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 39,
      "page_label": "22"
    }
  },
  {
    "text": "2.8 Operators for strings 23\nFor many applications, like computer graphics, encryption, statistical analysis,\nand multimedia rendering, \ufb02oating-point arithmetic has bene\ufb01ts that outweigh\nthe costs. But if you need absolute precision, use integers instead. For example,\nconsider a bank account with a balance of $ 123.45:\ndouble balance = 123.45; // potential rounding error\nIn this example, balances will become inaccurate over time as the variable is",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 40,
      "page_label": "23"
    }
  },
  {
    "text": "used in arithmetic operations like deposits and withdrawals. The result would\nbe angry customers and potential lawsuits. You can avoid the problem by\nrepresenting the balance as an integer:\nint balance = 12345; // total number of cents\nThis solution works as long as the number of cents doesn\u2019t exceed the largest\ninteger, which is about 2 billion.\n2.8 Operators for strings\nIn general, you cannot perform mathematical operations on strings, even if",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 40,
      "page_label": "23"
    }
  },
  {
    "text": "the strings look like numbers. The following expressions are illegal:\n\"Hello\" - 1 \"World\" / 123 \"Hello\" * \"World\"\nThe + operator works with strings, but it might not do what you expect. For\nstrings, the + operator performs concatenation, which means joining end-to-\nend. So \"Hello, \" + \"World!\" yields the string \"Hello, World!\".\nOr if you have a variable called name that has type String, the expression\n\"Hello, \" + name appends the value ofname to the hello string, which creates",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 40,
      "page_label": "23"
    }
  },
  {
    "text": "a personalized greeting.\nSince addition is de\ufb01ned for both numbers and strings, Java performs auto-\nmatic conversions you may not expect:\nSystem.out.println(1 + 2 + \"Hello\");\n// the output is 3Hello\nSystem.out.println(\"Hello\" + 1 + 2);\n// the output is Hello12",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 40,
      "page_label": "23"
    }
  },
  {
    "text": "24 Chapter 2 Variables and operators\nJava executes these operations from left to right. In the \ufb01rst line, 1 + 2 is\n3, and 3 + \"Hello\" is \"3Hello\". But in the second line, \"Hello\" + 1 is\n\"Hello1\", and \"Hello1\" + 2 is \"Hello12\".\nWhen more than one operator appears in an expression, they are evaluated\naccording to order of operations . Generally speaking, Java evaluates oper-\nators from left to right (as we saw in the previous section). But for numeric",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 41,
      "page_label": "24"
    }
  },
  {
    "text": "operators, Java follows mathematical conventions:\n\u0088 Multiplication and division take \u201cprecedence\u201d over addition and subtrac-\ntion, which means they happen \ufb01rst. So 1 + 2 * 3 yields 7, not 9, and\n2 + 4 / 2 yields 4, not 3.\n\u0088 If the operators have the same precedence, they are evaluated from left\nto right. So in the expression minute * 100 / 60, the multiplication\nhappens \ufb01rst; if the value of minute is 59, we get 5900 / 60, which",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 41,
      "page_label": "24"
    }
  },
  {
    "text": "yields 98. If these same operations had gone from right to left, the result\nwould have been 59 * 1, which is incorrect.\n\u0088 Any time you want to override the order of operations (or you are not\nsure what it is) you can use parentheses. Expressions in parentheses are\nevaluated \ufb01rst, so (1 + 2) * 3 is 9. You can also use parentheses to\nmake an expression easier to read, as in (minute * 100) / 60, even\nthough it doesn\u2019t change the result.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 41,
      "page_label": "24"
    }
  },
  {
    "text": "though it doesn\u2019t change the result.\nDon\u2019t work too hard to remember the order of operations, especially for other\noperators. If it\u2019s not obvious by looking at the expression, use parentheses to\nmake it clear.\n2.9 Composition\nSo far we have looked at the elements of a programming language \u2013 variables,\nexpressions, and statements \u2013 in isolation, without talking about how to put\nthem together.\nOne of the most useful features of programming languages is their ability to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 41,
      "page_label": "24"
    }
  },
  {
    "text": "take small building blocks and compose them. For example, we know how to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 41,
      "page_label": "24"
    }
  },
  {
    "text": "2.10 Types of errors 25\nmultiply numbers and we know how to display values. We can combine these\noperations into a single statement:\nSystem.out.println(17 * 3);\nAny arithmetic expression can be used inside a print statement. We\u2019ve already\nseen one example:\nSystem.out.println(hour * 60 + minute);\nYou can also put arbitrary expressions on the right side of an assignment:\nint percentage;\npercentage = (minute * 100) / 60;\nThe left side of an assignment must be a variable name, not an expression.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 42,
      "page_label": "25"
    }
  },
  {
    "text": "That\u2019s because the left side indicates where the result will be stored, and\nexpressions do not represent storage locations.\nhour = minute + 1; // correct\nminute + 1 = hour; // compiler error\nThe ability to compose operations may not seem impressive now, but we will\nsee examples later on that allow us to write complex computations neatly and\nconcisely. But don\u2019t get too carried away. Large, complex expressions can be\nhard to read and debug.\n2.10 Types of errors",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 42,
      "page_label": "25"
    }
  },
  {
    "text": "hard to read and debug.\n2.10 Types of errors\nThree kinds of errors can occur in a program: compile-time errors, run-time\nerrors, and logic errors. It is useful to distinguish among them in order to\ntrack them down more quickly.\nCompile-time errors occur when you violate the syntax rules of the Java\nlanguage. For example, parentheses and braces have to come in matching\npairs. So (1 + 2) is legal, but 8) is not. In the latter case, the program",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 42,
      "page_label": "25"
    }
  },
  {
    "text": "cannot be compiled, and the compiler displays an error.\nError messages from the compiler usually indicate where in the program the\nerror occurred, and sometimes they can tell you exactly what the error is. As\nan example, let\u2019s get back to the hello world program from Section 1.4.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 42,
      "page_label": "25"
    }
  },
  {
    "text": "26 Chapter 2 Variables and operators\npublic class Hello {\npublic static void main(String[] args) {\n// generate some simple output\nSystem.out.println(\"Hello, World!\");\n}\n}\nIf you forget the semicolon at the end of the print statement, you might get\nan error message like this:\nFile: Hello.java [line: 5]\nError: ' ;' expected\nThat\u2019s pretty good: the location of the error is correct, and the error message\ntells you what\u2019s wrong.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 43,
      "page_label": "26"
    }
  },
  {
    "text": "tells you what\u2019s wrong.\nBut error messages are not always easy to understand. Sometimes the compiler\nreports the place in the program where the error was detected, not where it\nactually occurred. And sometimes the description of the problem is more\nconfusing than helpful.\nFor example, if you leave out the closing brace at the end of main (line 6), you\nmight get a message like this:\nFile: Hello.java [line: 7]\nError: reached end of file while parsing",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 43,
      "page_label": "26"
    }
  },
  {
    "text": "Error: reached end of file while parsing\nThere are two problems here. First, the error message is written from the com-\npiler\u2019s point of view, not yours. Parsing is the process of reading a program\nbefore translating; if the compiler gets to the end of the \ufb01le while still parsing,\nthat means something was omitted. But the compiler doesn\u2019t know what. It\nalso doesn\u2019t know where. The compiler discovers the error at the end of the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 43,
      "page_label": "26"
    }
  },
  {
    "text": "program (line 7), but the missing brace should be on the previous line.\nError messages contain useful information, so you should make an e\ufb00ort to\nread and understand them. But don\u2019t take them too literally.\nDuring the \ufb01rst few weeks of your programming career, you will probably spend\na lot of time tracking down compile-time errors. But as you gain experience,\nyou will make fewer mistakes and \ufb01nd them more quickly.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 43,
      "page_label": "26"
    }
  },
  {
    "text": "2.10 Types of errors 27\nThe second type of error is a run-time error, so-called because it does not\nappear until after the program has started running. In Java, these errors\noccur while the interpreter is executing byte code and something goes wrong.\nThese errors are also called \u201cexceptions\u201d because they usually indicate that\nsomething exceptional (and bad) has happened.\nRun-time errors are rare in the simple programs you will see in the \ufb01rst few",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 44,
      "page_label": "27"
    }
  },
  {
    "text": "chapters, so it might be a while before you encounter one. When a run-time\nerror occurs, the interpreter displays an error message that explains what\nhappened and where.\nFor example, if you accidentally divide by zero you will get a message like this:\nException in thread \"main\" java.lang.ArithmeticException: / by zero\nat Hello.main(Hello.java:5)\nSome parts of this output are useful for debugging. The \ufb01rst line includes\nthe name of the exception, java.lang.ArithmeticException, and a message",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 44,
      "page_label": "27"
    }
  },
  {
    "text": "that indicates more speci\ufb01cally what happened, / by zero. The next line\nshows the method where the error occurred; Hello.main indicates the method\nmain in the class Hello. It also reports the \ufb01le where the method is de\ufb01ned,\nHello.java, and the line number where the error occurred, 5.\nError messages sometimes contain additional information that won\u2019t make\nsense yet. So one of the challenges is to \ufb01gure out where to \ufb01nd the useful",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 44,
      "page_label": "27"
    }
  },
  {
    "text": "parts without being overwhelmed by extraneous information. Also, keep in\nmind that the line where the program crashed may not be the line that needs\nto be corrected.\nThe third type of error is the logic error. If your program has a logic error, it\nwill compile and run without generating error messages, but it will not do the\nright thing. Instead, it will do exactly what you told it to do. For example,\nhere is a version of the hello world program with a logic error:\npublic class Hello {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 44,
      "page_label": "27"
    }
  },
  {
    "text": "public class Hello {\npublic static void main(String[] args) {\nSystem.out.println(\"Hello, \");\nSystem.out.println(\"World!\");\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 44,
      "page_label": "27"
    }
  },
  {
    "text": "28 Chapter 2 Variables and operators\nThis program compiles and runs just \ufb01ne, but the output is:\nHello,\nWorld!\nAssuming that we wanted the output on one line, this is not correct. The\nproblem is that the \ufb01rst line uses println, when we probably meant to use\nprint (see the \u201cgoodbye world\u201d example of Section 1.5).\nIdentifying logic errors can be hard because you have to work backwards,\nlooking at the output of the program, trying to \ufb01gure out why it is doing the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 45,
      "page_label": "28"
    }
  },
  {
    "text": "wrong thing, and how to make it do the right thing. Usually the compiler and\nthe interpreter can\u2019t help you, since they don\u2019t know what the right thing is.\nNow that you know about the three kinds of errors, you might want to read\nAppendix C, where we\u2019ve collected some of our favorite debugging advice. It\nrefers to language features we haven\u2019t talked about yet, so you might want to\nre-read it from time to time.\n2.11 Vocabulary",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 45,
      "page_label": "28"
    }
  },
  {
    "text": "re-read it from time to time.\n2.11 Vocabulary\nvariable: A named storage location for values. All variables have a type,\nwhich is declared when the variable is created.\nvalue: A number, string, or other data that can be stored in a variable. Every\nvalue belongs to a type (for example, int or String).\ndeclaration: A statement that creates a new variable and speci\ufb01es its type.\ntype: Mathematically speaking, a set of values. The type of a variable deter-\nmines which values it can have.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 45,
      "page_label": "28"
    }
  },
  {
    "text": "mines which values it can have.\nsyntax: The structure of a program; the arrangement of the words and sym-\nbols it contains.\nkeyword: A reserved word used by the compiler to analyze programs. You\ncannot use keywords (like public, class, and void) as variable names.\nassignment: A statement that gives a value to a variable.\ninitialize: To assign a variable for the \ufb01rst time.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 45,
      "page_label": "28"
    }
  },
  {
    "text": "2.11 Vocabulary 29\nstate: The variables in a program and their current values.\nstate diagram: A graphical representation of the state of a program at a\npoint in time.\noperator: A symbol that represents a computation like addition, multiplica-\ntion, or string concatenation.\noperand: One of the values on which an operator operates. Most operators\nin Java require two operands.\nexpression: A combination of variables, operators, and values that repre-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 46,
      "page_label": "29"
    }
  },
  {
    "text": "sents a single value. Expressions also have types, as determined by their\noperators and operands.\n\ufb02oating-point: A data type that represents numbers with an integer part\nand a fractional part. In Java, the default \ufb02oating-point type is double.\nrounding error: The di\ufb00erence between the number we want to represent\nand the nearest \ufb02oating-point number.\nconcatenate: To join two values, often strings, end-to-end.\norder of operations: The rules that determine in what order operations are\nevaluated.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 46,
      "page_label": "29"
    }
  },
  {
    "text": "evaluated.\ncomposition: The ability to combine simple expressions and statements into\ncompound expressions and statements.\ncompile-time error: An error in the source code that makes it impossible\nto compile. Also called a \u201csyntax error\u201d.\nparse: To analyze the structure of a program; what the compiler does \ufb01rst.\nrun-time error: An error in a program that makes it impossible to run to\ncompletion. Also called an \u201cexception\u201d.\nlogic error: An error in a program that makes it do something other than",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 46,
      "page_label": "29"
    }
  },
  {
    "text": "what the programmer intended.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 46,
      "page_label": "29"
    }
  },
  {
    "text": "30 Chapter 2 Variables and operators\n2.12 Exercises\nThe code for this chapter is in the ch02 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nIf you have not already read Appendix A.2, now might be a good time. It\ndescribes the DrJava Interactions Pane, which is a useful way to develop and\ntest short fragments of code without writing a complete class de\ufb01nition.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 47,
      "page_label": "30"
    }
  },
  {
    "text": "Exercise 2.1 If you are using this book in a class, you might enjoy this\nexercise. Find a partner and play \u201cStump the Chump\u201d:\nStart with a program that compiles and runs correctly. One player looks away\nwhile the other player adds an error to the program. Then the \ufb01rst player\ntries to \ufb01nd and \ufb01x the error. You get two points if you \ufb01nd the error without\ncompiling the program, one point if you \ufb01nd it using the compiler, and your\nopponent gets a point if you don\u2019t \ufb01nd it.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 47,
      "page_label": "30"
    }
  },
  {
    "text": "opponent gets a point if you don\u2019t \ufb01nd it.\nExercise 2.2 The point of this exercise is (1) to use string concatenation\nto display values with di\ufb00erent types ( int and String), and (2) to practice\ndeveloping programs gradually by adding a few statements at a time.\n1. Create a new program named Date.java. Copy or type in something\nlike the hello world program and make sure you can compile and run it.\n2. Following the example in Section 2.4, write a program that creates vari-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 47,
      "page_label": "30"
    }
  },
  {
    "text": "ables named day, date, month, and year. The variable day will contain\nthe day of the week (like Friday), and date will contain the day of the\nmonth (like the 13th). What type is each variable? Assign values to\nthose variables that represent today\u2019s date.\n3. Display (print out) the value of each variable on a line by itself. This is an\nintermediate step that is useful for checking that everything is working\nso far. Compile and run your program before moving on.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 47,
      "page_label": "30"
    }
  },
  {
    "text": "4. Modify the program so that it displays the date in standard American\nformat, for example: Thursday, July 16, 2015.\n5. Modify the program so it also displays the date in European format. The\n\ufb01nal output should be:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 47,
      "page_label": "30"
    }
  },
  {
    "text": "2.12 Exercises 31\nAmerican format:\nThursday, July 16, 2015\nEuropean format:\nThursday 16 July 2015\nExercise 2.3 The point of this exercise is to (1) use some of the arithmetic\noperators, and (2) start thinking about compound entities (like time of day)\nthat are represented with multiple values.\n1. Create a new program called Time.java. From now on, we won\u2019t remind\nyou to start with a small, working program, but you should.\n2. Following the example program in Section 2.4, create variables named",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 48,
      "page_label": "31"
    }
  },
  {
    "text": "hour, minute, and second. Assign values that are roughly the current\ntime. Use a 24-hour clock so that at 2pm the value of hour is 14.\n3. Make the program calculate and display the number of seconds since\nmidnight.\n4. Calculate and display the number of seconds remaining in the day.\n5. Calculate and display the percentage of the day that has passed. You\nmight run into problems when computing percentages with integers, so\nconsider using \ufb02oating-point.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 48,
      "page_label": "31"
    }
  },
  {
    "text": "consider using \ufb02oating-point.\n6. Change the values of hour, minute, and second to re\ufb02ect the current\ntime. Then write code to compute the elapsed time since you started\nworking on this exercise.\nHint: You might want to use additional variables to hold values during the\ncomputation. Variables that are used in a computation but never displayed\nare sometimes called \u201cintermediate\u201d or \u201ctemporary\u201d variables.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 48,
      "page_label": "31"
    }
  },
  {
    "text": "32 Chapter 2 Variables and operators",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 49,
      "page_label": "32"
    }
  },
  {
    "text": "Chapter 3\nInput and output\nThe programs we\u2019ve looked at so far simply display messages, which doesn\u2019t\ninvolve a lot of real computation. This chapter will show you how to read\ninput from the keyboard, use that input to calculate a result, and then format\nthat result for output.\n3.1 The System class\nWe have been using System.out.println for a while, but you might not\nhave thought about what it means. System is a class that provides methods",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 50,
      "page_label": "33"
    }
  },
  {
    "text": "related to the \u201csystem\u201d or environment where programs run. It also provides\nSystem.out, which is a special value that provides methods for displaying\noutput, including println.\nIn fact, we can use System.out.println to display the value of System.out:\nSystem.out.println(System.out);\nThe result is:\njava.io.PrintStream@685d72cd\nThis output indicates that System.out is a PrintStream, which is de\ufb01ned in a\npackage called java.io. A package is a collection of related classes; java.io",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 50,
      "page_label": "33"
    }
  },
  {
    "text": "contains classes for \u201cI/O\u201d which stands for input and output.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 50,
      "page_label": "33"
    }
  },
  {
    "text": "34 Chapter 3 Input and output\nThe numbers and letters after the @ sign are the address of System.out,\nrepresented as a hexadecimal (base 16) number. The address of a value is\nits location in the computer\u2019s memory, which might be di\ufb00erent on di\ufb00erent\ncomputers. In this example the address is 685d72cd, but if you run the same\ncode you might get something di\ufb00erent.\nAs shown in Figure 3.1, System is de\ufb01ned in a \ufb01le called System.java, and",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 51,
      "page_label": "34"
    }
  },
  {
    "text": "PrintStream is de\ufb01ned in PrintStream.java. These \ufb01les are part of the\nJava library, which is an extensive collection of classes you can use in your\nprograms.\nFigure 3.1: System.out.println refers to the out variable of the System\nclass, which is a PrintStream that provides a method called println.\n3.2 The Scanner class\nThe System class also provides the special value System.in, which is an\nInputStream that provides methods for reading input from the keyboard.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 51,
      "page_label": "34"
    }
  },
  {
    "text": "These methods are not easy to use; fortunately, Java provides other classes\nthat make it easier to handle common input tasks.\nFor example, Scanner is a class that provides methods for inputting words,\nnumbers, and other data. Scanner is provided by java.util, which is a",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 51,
      "page_label": "34"
    }
  },
  {
    "text": "3.2 The Scanner class 35\npackage that contains classes so useful they are called \u201cutility classes\u201d. Before\nyou can use Scanner, you have to import it like this:\nimport java.util.Scanner;\nThis import statement tells the compiler that when you say Scanner, you\nmean the one de\ufb01ned in java.util. It\u2019s necessary because there might be\nanother class named Scanner in another package. Using an import statement\nmakes your code unambiguous.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 52,
      "page_label": "35"
    }
  },
  {
    "text": "makes your code unambiguous.\nImport statements can\u2019t be inside a class de\ufb01nition. By convention, they are\nusually at the beginning of the \ufb01le.\nNext you have to create a Scanner:\nScanner in = new Scanner(System.in);\nThis line declares a Scanner variable named in and creates a new Scanner\nthat takes input from System.in.\nScanner provides a method called nextLine that reads a line of input from\nthe keyboard and returns a String. The following example reads two lines",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 52,
      "page_label": "35"
    }
  },
  {
    "text": "and repeats them back to the user:\nimport java.util.Scanner;\npublic class Echo {\npublic static void main(String[] args) {\nString line;\nScanner in = new Scanner(System.in);\nSystem.out.print(\"Type something: \");\nline = in.nextLine();\nSystem.out.println(\"You said: \" + line);\nSystem.out.print(\"Type something else: \");\nline = in.nextLine();\nSystem.out.println(\"You also said: \" + line);\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 52,
      "page_label": "35"
    }
  },
  {
    "text": "36 Chapter 3 Input and output\nIf you omit the import statement and later refer to Scanner, you will get a\ncompiler error like \u201ccannot \ufb01nd symbol\u201d. That means the compiler doesn\u2019t\nknow what you mean by Scanner.\nYou might wonder why we can use the System class without importing it.\nSystem belongs to the java.lang package, which is imported automatically.\nAccording to the documentation, java.lang \u201cprovides classes that are funda-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 53,
      "page_label": "36"
    }
  },
  {
    "text": "mental to the design of the Java programming language.\u201d The String class\nis also part of the java.lang package.\n3.3 Program structure\nAt this point, we have seen all of the elements that make up Java programs.\nFigure 3.2 shows these organizational units.\nFigure 3.2: Elements of the Java language, from largest to smallest.\nTo review, a package is a collection of classes, which de\ufb01ne methods. Methods\ncontain statements, some of which contain expressions. Expressions are made",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 53,
      "page_label": "36"
    }
  },
  {
    "text": "up of tokens, which are the basic elements of a program, including numbers,\nvariable names, operators, keywords, and punctuation like parentheses, braces\nand semicolons.\nThe standard edition of Java comes with several thousand classes you can\nimport, which can be both exciting and intimidating. You can browse this",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 53,
      "page_label": "36"
    }
  },
  {
    "text": "3.4 Inches to centimeters 37\nlibrary at http://docs.oracle.com/javase/8/docs/api/. Most of the Java\nlibrary itself is written in Java.\nNote there is a major di\ufb00erence between the Java language, which de\ufb01nes the\nsyntax and meaning of the elements in Figure 3.2, and the Java library, which\nprovides the built-in classes.\n3.4 Inches to centimeters\nNow let\u2019s see an example that\u2019s a little more useful. Although most of the world",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 54,
      "page_label": "37"
    }
  },
  {
    "text": "has adopted the metric system for weights and measures, some countries are\nstuck with English units. For example, when talking with friends in Europe\nabout the weather, people in the United States might have to convert from\nCelsius to Fahrenheit and back. Or they might want to convert height in\ninches to centimeters.\nWe can write a program to help. We\u2019ll use a Scanner to input a measurement\nin inches, convert to centimeters, and then display the results. The following",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 54,
      "page_label": "37"
    }
  },
  {
    "text": "lines declare the variables and create the Scanner:\nint inch;\ndouble cm;\nScanner in = new Scanner(System.in);\nThe next step is to prompt the user for the input. We\u2019ll use print instead\nof println so they can enter the input on the same line as the prompt. And\nwe\u2019ll use the Scanner method nextInt, which reads input from the keyboard\nand converts it to an integer:\nSystem.out.print(\"How many inches? \");\ninch = in.nextInt();\nNext we multiply the number of inches by 2.54, since that\u2019s how many cen-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 54,
      "page_label": "37"
    }
  },
  {
    "text": "timeters there are per inch, and display the results:\ncm = inch * 2.54;\nSystem.out.print(inch + \" in = \");\nSystem.out.println(cm + \" cm\");",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 54,
      "page_label": "37"
    }
  },
  {
    "text": "38 Chapter 3 Input and output\nThis code works correctly, but it has a minor problem. If another programmer\nreads this code, they might wonder where 2.54 comes from. For the bene\ufb01t of\nothers (and yourself in the future), it would be better to assign this value to\na variable with a meaningful name. We\u2019ll demonstrate in the next section.\n3.5 Literals and constants\nA value that appears in a program, like 2.54 (or \" in =\"), is called a literal.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 55,
      "page_label": "38"
    }
  },
  {
    "text": "In general, there\u2019s nothing wrong with literals. But when numbers like 2.54\nappear in an expression with no explanation, they make code hard to read.\nAnd if the same value appears many times, and might have to change in the\nfuture, it makes code hard to maintain.\nValues like that are sometimes called magic numbers (with the implication\nthat being \u201cmagic\u201d is not a good thing). A good practice is to assign magic\nnumbers to variables with meaningful names, like this:\ndouble cmPerInch = 2.54;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 55,
      "page_label": "38"
    }
  },
  {
    "text": "double cmPerInch = 2.54;\ncm = inch * cmPerInch;\nThis version is easier to read and less error-prone, but it still has a problem.\nVariables can vary, but the number of centimeters in an inch does not. Once we\nassign a value to cmPerInch, it should never change. Java provides a language\nfeature that enforces that rule, the keyword final.\nfinal double CM_PER_INCH = 2.54;\nDeclaring that a variable is final means that it cannot be reassigned once",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 55,
      "page_label": "38"
    }
  },
  {
    "text": "it has been initialized. If you try, the compiler reports an error. Variables\ndeclared as final are called constants. By convention, names for constants\nare all uppercase, with the underscore character ( _) between words.\n3.6 Formatting output\nWhen you output a double using print or println, it displays up to 16\ndecimal places:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 55,
      "page_label": "38"
    }
  },
  {
    "text": "3.6 Formatting output 39\nSystem.out.print(4.0 / 3.0);\nThe result is:\n1.3333333333333333\nThat might be more than you want. System.out provides another method,\ncalled printf, that gives you more control of the format. The \u201cf\u201d in printf\nstands for \u201cformatted\u201d. Here\u2019s an example:\nSystem.out.printf(\"Four thirds = %.3f\", 4.0 / 3.0);\nThe \ufb01rst value in the parentheses is a format string that speci\ufb01es how the\noutput should be displayed. This format string contains ordinary text followed",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 56,
      "page_label": "39"
    }
  },
  {
    "text": "by a format speci\ufb01er, which is a special sequence that starts with a percent\nsign. The format speci\ufb01er %.3f indicates that the following value should be\ndisplayed as \ufb02oating-point, rounded to three decimal places. The result is:\nFour thirds = 1.333\nThe format string can contain any number of format speci\ufb01ers; here\u2019s an ex-\nample with two:\nint inch = 100;\ndouble cm = inch * CM_PER_INCH;\nSystem.out.printf(\"%d in = %f cm\\n\", inch, cm);\nThe result is:\n100 in = 254.000000 cm",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 56,
      "page_label": "39"
    }
  },
  {
    "text": "The result is:\n100 in = 254.000000 cm\nLike print, printf does not append a newline. So format strings often end\nwith a newline character.\nThe format speci\ufb01er %d displays integer values (\u201cd\u201d stands for \u201cdecimal\u201d). The\nvalues are matched up with the format speci\ufb01ers in order, so inch is displayed\nusing %d, and cm is displayed using %f.\nLearning about format strings is like learning a sub-language within Java.\nThere are many options, and the details can be overwhelming. Table 3.1 lists",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 56,
      "page_label": "39"
    }
  },
  {
    "text": "a few common uses, to give you an idea of how things work. For more details,\nrefer to the documentation of java.util.Formatter. The easiest way to \ufb01nd\ndocumentation for Java classes is to do a web search for \u201cJava\u201d and the name\nof the class.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 56,
      "page_label": "39"
    }
  },
  {
    "text": "40 Chapter 3 Input and output\n%d decimal integer 12345\n%08d padded with zeros, at least 8 digits wide 00012345\n%f \ufb02oating-point 6.789000\n%.2f rounded to 2 decimal places 6.79\nTable 3.1: Example format speci\ufb01ers\n3.7 Centimeters to inches\nNow suppose we have a measurement in centimeters, and we want to round it\no\ufb00 to the nearest inch. It is tempting to write:\ninch = cm / CM_PER_INCH; // syntax error\nBut the result is an error \u2013 you get something like, \u201cBad types in assignment:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 57,
      "page_label": "40"
    }
  },
  {
    "text": "from double to int.\u201d The problem is that the value on the right is \ufb02oating-\npoint, and the variable on the left is an integer.\nThe simplest way to convert a \ufb02oating-point value to an integer is to use atype\ncast, so called because it molds or \u201ccasts\u201d a value from one type to another.\nThe syntax for type casting is to put the name of the type in parentheses and\nuse it as an operator.\ndouble pi = 3.14159;\nint x = (int) pi;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 57,
      "page_label": "40"
    }
  },
  {
    "text": "double pi = 3.14159;\nint x = (int) pi;\nThe (int) operator has the e\ufb00ect of converting what follows into an integer.\nIn this example, x gets the value 3. Like integer division, converting to an\ninteger always rounds toward zero, even if the fraction part is 0.999999 (or\n-0.999999). In other words, it simply throws away the fractional part.\nType casting takes precedence over arithmetic operations. In this example,\nthe value of pi gets converted to an integer before the multiplication. So the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 57,
      "page_label": "40"
    }
  },
  {
    "text": "result is 60.0, not 62.0.\ndouble pi = 3.14159;\ndouble x = (int) pi * 20.0;\nKeeping that in mind, here\u2019s how we can convert a measurement in centimeters\nto inches:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 57,
      "page_label": "40"
    }
  },
  {
    "text": "3.8 Modulus operator 41\ninch = (int) (cm / CM_PER_INCH);\nSystem.out.printf(\"%f cm = %d in\\n\", cent, inch);\nThe parentheses after the cast operator require the division to happen before\nthe type cast. And the result is rounded toward zero; we will see in the next\nchapter how to round \ufb02oating-point numbers to the closest integer.\n3.8 Modulus operator\nLet\u2019s take the example one step further: suppose you have a measurement in",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 58,
      "page_label": "41"
    }
  },
  {
    "text": "inches and you want to convert to feet and inches. The goal is divide by 12\n(the number of inches in a foot) and keep the remainder.\nWe have already seen the division operator ( /), which computes the quotient\nof two numbers. If the numbers are integers, it performs integer division.\nJava also provides the modulus operator (%), which divides two numbers and\ncomputes the remainder.\nUsing division and modulus, we can convert to feet and inches like this:\nquotient = 76 / 12; // division",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 58,
      "page_label": "41"
    }
  },
  {
    "text": "quotient = 76 / 12; // division\nremainder = 76 % 12; // modulus\nThe \ufb01rst line yields 6. The second line, which is pronounced \u201c76 mod 12\u201d,\nyields 4. So 76 inches is 6 feet, 4 inches.\nThe modulus operator looks like a percent sign, but you might \ufb01nd it helpful\nto think of it as a division sign ( \u00f7) rotated to the left.\nThe modulus operator turns out to be surprisingly useful. For example, you\ncan check whether one number is divisible by another: if x % y is zero, then",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 58,
      "page_label": "41"
    }
  },
  {
    "text": "x is divisible by y. You can use modulus to \u201cextract\u201d digits from a number:\nx % 10 yields the rightmost digit of x, and x % 100 yields the last two digits.\nAlso, many encryption algorithms use the modulus operator extensively.\n3.9 Putting it all together\nAt this point, you have seen enough Java to write useful programs that solve\neveryday problems. You can (1) import Java library classes, (2) create a",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 58,
      "page_label": "41"
    }
  },
  {
    "text": "42 Chapter 3 Input and output\nScanner, (3) get input from the keyboard, (4) format output with printf,\nand (5) divide and mod integers. Now we will put everything together in a\ncomplete program:\nimport java.util.Scanner;\n/**\n* Converts centimeters to feet and inches.\n*/\npublic class Convert {\npublic static void main(String[] args) {\ndouble cm;\nint feet, inches, remainder;\nfinal double CM_PER_INCH = 2.54;\nfinal int IN_PER_FOOT = 12;\nScanner in = new Scanner(System.in);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 59,
      "page_label": "42"
    }
  },
  {
    "text": "Scanner in = new Scanner(System.in);\n// prompt the user and get the value\nSystem.out.print(\"Exactly how many cm? \");\ncm = in.nextDouble();\n// convert and output the result\ninches = (int) (cm / CM_PER_INCH);\nfeet = inches / IN_PER_FOOT;\nremainder = inches % IN_PER_FOOT;\nSystem.out.printf(\"%.2f cm = %d ft, %d in\\n\",\ncm, feet, remainder);\n}\n}\nAlthough not required, all variables and constants are declared at the top of\nmain. This practice makes it easier to \ufb01nd their types later on, and it helps",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 59,
      "page_label": "42"
    }
  },
  {
    "text": "the reader know what data is involved in the algorithm.\nFor readability, each major step of the algorithm is separated by a blank line\nand begins with a comment. It also includes a documentation comment ( /**),\nwhich we\u2019ll learn more about in the next chapter.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 59,
      "page_label": "42"
    }
  },
  {
    "text": "3.10 The Scanner bug 43\nMany algorithms, including the Convert program, perform division and mod-\nulus together. In both steps, you divide by the same number ( IN_PER_FOOT).\nWhen statements get long (generally wider than 80 characters), a common\nstyle convention is to break them across multiple lines. The reader should\nnever have to scroll horizontally.\n3.10 The Scanner bug\nNow that you\u2019ve had some experience with Scanner, there is an unexpected",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 60,
      "page_label": "43"
    }
  },
  {
    "text": "behavior we want to warn you about. The following code fragment asks users\nfor their name and age:\nSystem.out.print(\"What is your name? \");\nname = in.nextLine();\nSystem.out.print(\"What is your age? \");\nage = in.nextInt();\nSystem.out.printf(\"Hello %s, age %d\\n\", name, age);\nThe output might look something like this:\nHello Grace Hopper, age 45\nWhen you read a String followed by an int, everything works just \ufb01ne. But\nwhen you read an int followed by a String, something strange happens.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 60,
      "page_label": "43"
    }
  },
  {
    "text": "System.out.print(\"What is your age? \");\nage = in.nextInt();\nSystem.out.print(\"What is your name? \");\nname = in.nextLine();\nSystem.out.printf(\"Hello %s, age %d\\n\", name, age);\nTry running this example code. It doesn\u2019t let you input your name, and it\nimmediately displays the output:\nWhat is your name? Hello , age 45\nTo understand what is happening, you have to understand that the Scanner\ndoesn\u2019t see input as multiple lines, like we do. Instead, it gets a \u201cstream of",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 60,
      "page_label": "43"
    }
  },
  {
    "text": "characters\u201d as shown in Figure 3.3.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 60,
      "page_label": "43"
    }
  },
  {
    "text": "44 Chapter 3 Input and output\n4 5 \\n G r a c e H o p p e r \\n\n\u2191\nFigure 3.3: A stream of characters as seen by a Scanner.\nThe arrow indicates the next character to be read by Scanner. When you call\nnextInt, it reads characters until it gets to a non-digit. Figure 3.4 shows the\nstate of the stream after nextInt is invoked.\n4 5 \\n G r a c e H o p p e r \\n\n\u2191\nFigure 3.4: A stream of characters after nextInt is invoked.\nAt this point, nextInt returns 45. The program then displays the prompt",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 61,
      "page_label": "44"
    }
  },
  {
    "text": "\"What is your name? \" and calls nextLine, which reads characters until it\ngets to a newline. But since the next character is already a newline, nextLine\nreturns the empty string \"\".\nTo solve this problem, you need an extra nextLine after nextInt.\nSystem.out.print(\"What is your age? \");\nage = in.nextInt();\nin.nextLine(); // read the newline\nSystem.out.print(\"What is your name? \");\nname = in.nextLine();\nSystem.out.printf(\"Hello %s, age %d\\n\", name, age);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 61,
      "page_label": "44"
    }
  },
  {
    "text": "This technique is common when reading int or double values that appear on\ntheir own line. First you read the number, and then you read the rest of the\nline, which is just a newline character.\n3.11 Vocabulary\npackage: A group of classes that are related to each other.\naddress: The location of a value in computer memory, often represented as\na hexadecimal integer.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 61,
      "page_label": "44"
    }
  },
  {
    "text": "3.12 Exercises 45\nlibrary: A collection of packages and classes that are available for use in other\nprograms.\nimport statement: A statement that allows programs to use classes de\ufb01ned\nin other packages.\ntoken: A basic element of a program, such as a word, space, symbol, or\nnumber.\nliteral: A value that appears in source code. For example, \"Hello\" is a string\nliteral and 74 is an integer literal.\nmagic number: A number that appears without explanation as part of an",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 62,
      "page_label": "45"
    }
  },
  {
    "text": "expression. It should generally be replaced with a constant.\nconstant: A variable, declared final, whose value cannot be changed.\nformat string: A string passed toprintf to specify the format of the output.\nformat speci\ufb01er: A special code that begins with a percent sign and speci\ufb01es\nthe data type and format of the corresponding value.\ntype cast: An operation that explicitly converts one data type into another.\nIn Java it appears as a type name in parentheses, like (int).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 62,
      "page_label": "45"
    }
  },
  {
    "text": "modulus: An operator that yields the remainder when one integer is divided\nby another. In Java, it is denoted with a percent sign; for example,\n5 % 2 is 1.\n3.12 Exercises\nThe code for this chapter is in the ch03 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nIf you have not already read Appendix A.3, now might be a good time. It",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 62,
      "page_label": "45"
    }
  },
  {
    "text": "describes the command-line interface, which is a powerful and e\ufb03cient way to\ninteract with your computer.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 62,
      "page_label": "45"
    }
  },
  {
    "text": "46 Chapter 3 Input and output\nExercise 3.1 When you use printf, the Java compiler does not check your\nformat string. See what happens if you try to display a value with type int\nusing %f. And what happens if you display a double using %d? What if you\nuse two format speci\ufb01ers, but then only provide one value?\nExercise 3.2 Write a program that converts a temperature from Celsius to\nFahrenheit. It should (1) prompt the user for input, (2) read a double value",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 63,
      "page_label": "46"
    }
  },
  {
    "text": "from the keyboard, (3) calculate the result, and (4) format the output to one\ndecimal place. For example, it should display \"24.0 C = 75.2 F\".\nHere is the formula. Be careful not to use integer division!\nF = C\u00d79\n5 + 32\nExercise 3.3 Write a program that converts a total number of seconds to\nhours, minutes, and seconds. It should (1) prompt the user for input, (2) read\nan integer from the keyboard, (3) calculate the result, and (4) use printf to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 63,
      "page_label": "46"
    }
  },
  {
    "text": "display the output. For example, \"5000 seconds = 1 hours, 23 minutes,\nand 20 seconds\".\nHint: Use the modulus operator.\nExercise 3.4 The goal of this exercise is to program a \u201cGuess My Number\u201d\ngame. When it\u2019s \ufb01nished, it will work like this:\nI' m thinking of a number between 1 and 100\n(including both). Can you guess what it is?\nType a number: 45\nYour guess is: 45\nThe number I was thinking of is: 14\nYou were off by: 31\nTo choose a random number, you can use the Random class in java.util.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 63,
      "page_label": "46"
    }
  },
  {
    "text": "Here\u2019s how it works:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 63,
      "page_label": "46"
    }
  },
  {
    "text": "3.12 Exercises 47\nimport java.util.Random;\npublic class GuessStarter {\npublic static void main(String[] args) {\n// pick a random number\nRandom random = new Random();\nint number = random.nextInt(100) + 1;\nSystem.out.println(number);\n}\n}\nLike the Scanner class we saw in this chapter, Random has to be imported\nbefore we can use it. And as we saw with Scanner, we have to use the new\noperator to create a Random (number generator).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 64,
      "page_label": "47"
    }
  },
  {
    "text": "operator to create a Random (number generator).\nThen we can use the method nextInt to generate a random number. In this\nexample, the result of nextInt(100) will be between 0 and 99, including both.\nAdding 1 yields a number between 1 and 100, including both.\n1. The de\ufb01nition of GuessStarter is in a \ufb01le called GuessStarter.java,\nin the directory called ch03, in the repository for this book.\n2. Compile and run this program.\n3. Modify the program to prompt the user, then use a Scanner to read a",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 64,
      "page_label": "47"
    }
  },
  {
    "text": "line of user input. Compile and test the program.\n4. Read the user input as an integer and display the result. Again, compile\nand test.\n5. Compute and display the di\ufb00erence between the user\u2019s guess and the\nnumber that was generated.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 64,
      "page_label": "47"
    }
  },
  {
    "text": "48 Chapter 3 Input and output",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 65,
      "page_label": "48"
    }
  },
  {
    "text": "Chapter 4\nVoid methods\nSo far we\u2019ve only written short programs that have a single class and a single\nmethod ( main). In this chapter, we\u2019ll show you how to organize longer pro-\ngrams into multiple methods and classes. We\u2019ll also present the Math class,\nwhich provides methods for common mathematical operations.\n4.1 Math methods\nIn mathematics, you have probably seen functions like sin and log, and you\nhave learned to evaluate expressions like sin( \u03c0/2) and log(1 /x). First, you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 66,
      "page_label": "49"
    }
  },
  {
    "text": "evaluate the expression in parentheses, which is called the argument of the\nfunction. Then you can evaluate the function itself, maybe by punching it into\na calculator.\nThis process can be applied repeatedly to evaluate more complex expressions\nlike log(1/sin(\u03c0/2)). First we evaluate the argument of the innermost function,\nthen evaluate the function itself, and so on.\nThe Java library includes a Math class that provides common mathematical",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 66,
      "page_label": "49"
    }
  },
  {
    "text": "operations. Math is in the java.lang package, so you don\u2019t have to import it.\nYou can use, or invoke, Math methods like this:\ndouble root = Math.sqrt(17.0);\ndouble angle = 1.5;\ndouble height = Math.sin(angle);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 66,
      "page_label": "49"
    }
  },
  {
    "text": "50 Chapter 4 Void methods\nThe \ufb01rst line sets root to the square root of 17. The third line \ufb01nds the sine\nof 1.5 (the value of angle).\nArguments of the trigonometric functions \u2013 sin, cos, and tan \u2013 should be\nin radians. To convert from degrees to radians, you can divide by 180 and\nmultiply by \u03c0. Conveniently, the Math class provides a constant double named\nPI that contains an approximation of \u03c0:\ndouble degrees = 90;\ndouble angle = degrees / 180.0 * Math.PI;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 67,
      "page_label": "50"
    }
  },
  {
    "text": "double angle = degrees / 180.0 * Math.PI;\nNotice that PI is in capital letters. Java does not recognize Pi, pi, or pie.\nAlso, PI is the name of a variable, not a method, so it doesn\u2019t have parentheses.\nThe same is true for the constantMath.E, which approximates Euler\u2019s number.\nConverting to and from radians is a common operation, so the Math class\nprovides methods that do it for you.\ndouble radians = Math.toRadians(180.0);\ndouble degrees = Math.toDegrees(Math.PI);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 67,
      "page_label": "50"
    }
  },
  {
    "text": "double degrees = Math.toDegrees(Math.PI);\nAnother useful method is round, which rounds a \ufb02oating-point value to the\nnearest integer and returns a long. A long is like an int, but bigger. More\nspeci\ufb01cally, an int uses 32 bits; the largest value it can hold is 2 31 \u22121, which\nis about 2 billion. A long uses 64 bits, so the largest value is 2 63 \u22121, which is\nabout 9 quintillion.\nlong x = Math.round(Math.PI * 20.0);\nThe result is 63 (rounded up from 62.8319).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 67,
      "page_label": "50"
    }
  },
  {
    "text": "The result is 63 (rounded up from 62.8319).\nTake a minute to read the documentation for these and other methods in the\nMath class. The easiest way to \ufb01nd documentation for Java classes is to do a\nweb search for \u201cJava\u201d and the name of the class.\n4.2 Composition revisited\nJust as with mathematical functions, Java methods can be composed. That\nmeans you can use one expression as part of another. For example, you can\nuse any expression as an argument to a method:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 67,
      "page_label": "50"
    }
  },
  {
    "text": "4.3 Adding new methods 51\ndouble x = Math.cos(angle + Math.PI / 2.0);\nThis statement divides Math.PI by two, adds the result to angle, and com-\nputes the cosine of the sum. You can also take the result of one method and\npass it as an argument to another:\ndouble x = Math.exp(Math.log(10.0));\nIn Java, the log method always uses base e. So this statement \ufb01nds the log\nbase e of 10, and then raises e to that power. The result gets assigned to x.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 68,
      "page_label": "51"
    }
  },
  {
    "text": "Some math methods take more than one argument. For example, Math.pow\ntakes two arguments and raises the \ufb01rst to the power of the second. This line\nof code assigns the value 1024.0 to the variable x:\ndouble x = Math.pow(2.0, 10.0);\nWhen using Math methods, it is a common error to forget the Math. For\nexample, if you try to invoke pow(2.0, 10.0), you get an error message like:\nFile: Test.java [line: 5]\nError: cannot find symbol\nsymbol: method pow(double,double)\nlocation: class Test",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 68,
      "page_label": "51"
    }
  },
  {
    "text": "location: class Test\nThe message \u201ccannot \ufb01nd symbol\u201d is confusing, but the last line provides a\nuseful hint. The compiler is looking for pow in the same class where it is used,\nwhich is Test. If you don\u2019t specify a class name, the compiler looks in the\ncurrent class.\n4.3 Adding new methods\nYou have probably guessed by now that you can de\ufb01ne more than one method\nin a class. Here\u2019s an example:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 68,
      "page_label": "51"
    }
  },
  {
    "text": "52 Chapter 4 Void methods\npublic class NewLine {\npublic static void newLine() {\nSystem.out.println();\n}\npublic static void main(String[] args) {\nSystem.out.println(\"First line.\");\nnewLine();\nSystem.out.println(\"Second line.\");\n}\n}\nThe name of the class is NewLine. By convention, class names begin with a\ncapital letter. NewLine contains two methods, newLine and main. Remember\nthat Java is case-sensitive, so NewLine and newLine are not the same.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 69,
      "page_label": "52"
    }
  },
  {
    "text": "Method names should begin with a lowercase letter and use \u201ccamel case\u201d,\nwhich is a cute name for jammingWordsTogetherLikeThis. You can use any\nname you want for methods, except main or any of the Java keywords.\nnewLine and main are public, which means they can be invoked from other\nclasses. They are both static, but we can\u2019t explain what that means yet.\nAnd they are both void, which means that they don\u2019t yield a result (unlike\nthe Math methods, for example).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 69,
      "page_label": "52"
    }
  },
  {
    "text": "the Math methods, for example).\nThe parentheses after the method name contain a list of variables, called pa-\nrameters, where the method stores its arguments. main has a single parame-\nter, called args, which has type String[]. That means that whoever invokes\nmain must provide an array of strings (we\u2019ll get to arrays in a later chapter).\nSince newLine has no parameters, it requires no arguments, as shown when\nit is invoked in main. And because newLine is in the same class as main, we",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 69,
      "page_label": "52"
    }
  },
  {
    "text": "don\u2019t have to specify the class name.\nThe output of this program is:\nFirst line.\nSecond line.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 69,
      "page_label": "52"
    }
  },
  {
    "text": "4.3 Adding new methods 53\nNotice the extra space between the lines. If we wanted more space between\nthem, we could invoke the same method repeatedly:\npublic static void main(String[] args) {\nSystem.out.println(\"First line.\");\nnewLine();\nnewLine();\nnewLine();\nSystem.out.println(\"Second line.\");\n}\nOr we could write a new method that displays three blank lines:\npublic static void threeLine() {\nnewLine();\nnewLine();\nnewLine();\n}\npublic static void main(String[] args) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 70,
      "page_label": "53"
    }
  },
  {
    "text": "}\npublic static void main(String[] args) {\nSystem.out.println(\"First line.\");\nthreeLine();\nSystem.out.println(\"Second line.\");\n}\nYou can invoke the same method more than once, and you can have one method\ninvoke another. In this example, main invokes threeLine, and threeLine\ninvokes newLine.\nBeginners often wonder why it is worth the trouble to create new methods.\nThere are many reasons, but this example demonstrates a few of them:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 70,
      "page_label": "53"
    }
  },
  {
    "text": "\u0088 Creating a new method gives you an opportunity to give a name to a\ngroup of statements, which makes code easier to read and understand.\n\u0088 Introducing new methods can make a program smaller by eliminating\nrepetitive code. For example, to display nine consecutive new lines, you\ncould invoke threeLine three times.\n\u0088 A common problem solving technique is to break tasks down into sub-\nproblems. Methods allow you to focus on each sub-problem in isolation,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 70,
      "page_label": "53"
    }
  },
  {
    "text": "and then compose them into a complete solution.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 70,
      "page_label": "53"
    }
  },
  {
    "text": "54 Chapter 4 Void methods\n4.4 Flow of execution\nPulling together the code from the previous section, the complete program\nlooks like this:\npublic class NewLine {\npublic static void newLine() {\nSystem.out.println();\n}\npublic static void threeLine() {\nnewLine();\nnewLine();\nnewLine();\n}\npublic static void main(String[] args) {\nSystem.out.println(\"First line.\");\nthreeLine();\nSystem.out.println(\"Second line.\");\n}\n}\nWhen you look at a class de\ufb01nition that contains several methods, it is tempt-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 71,
      "page_label": "54"
    }
  },
  {
    "text": "ing to read it from top to bottom. But that is likely to be confusing, because\nthat is not the \ufb02ow of execution of the program.\nExecution always begins at the \ufb01rst statement of main, regardless of where it\nis in the source \ufb01le. Statements are executed one at a time, in order, until you\nreach a method invocation, which you can think of as a detour. Instead of\ngoing to the next statement, you jump to the \ufb01rst line of the invoked method,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 71,
      "page_label": "54"
    }
  },
  {
    "text": "execute all the statements there, and then come back and pick up exactly\nwhere you left o\ufb00.\nThat sounds simple enough, but remember that one method can invoke an-\nother one. In the middle of main, we go o\ufb00 to execute the statements in\nthreeLine. While we are executing threeLine, we go o\ufb00 to execute newLine.\nThen newLine invokes println, which causes yet another detour.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 71,
      "page_label": "54"
    }
  },
  {
    "text": "4.5 Parameters and arguments 55\nFortunately, Java is good at keeping track of which methods are running.\nSo when println completes, it picks up where it left o\ufb00 in newLine; when\nnewLine completes, it goes back to threeLine, and when threeLine com-\npletes, it gets back to main.\nIn summary, when you read a program, don\u2019t read from top to bottom. In-\nstead, follow the \ufb02ow of execution.\n4.5 Parameters and arguments\nSome of the methods we have used require arguments, which are the values",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 72,
      "page_label": "55"
    }
  },
  {
    "text": "you provide when you invoke the method. For example, to \ufb01nd the sine of\na number, you have to provide the number, so sin takes a double as an\nargument. To display a message, you have to provide the message, so println\ntakes a String.\nWhen you use a method, you provide the arguments. When you write a\nmethod, you name the parameters. The parameter list indicates what argu-\nments are required. The following class shows an example:\npublic class PrintTwice {\npublic static void printTwice(String s) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 72,
      "page_label": "55"
    }
  },
  {
    "text": "public static void printTwice(String s) {\nSystem.out.println(s);\nSystem.out.println(s);\n}\npublic static void main(String[] args) {\nprintTwice(\"Don' t make me say this twice!\");\n}\n}\nprintTwice has a parameter named s with type String. When we invoke\nprintTwice, we have to provide an argument with type String.\nBefore the method executes, the argument gets assigned to the parameter.\nIn this example, the argument \"Don' t make me say this twice!\" gets as-\nsigned to the parameter s.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 72,
      "page_label": "55"
    }
  },
  {
    "text": "56 Chapter 4 Void methods\nThis process is called parameter passing because the value gets passed from\noutside the method to the inside. An argument can be any kind of expression,\nso if you have a String variable, you can use it as an argument:\nString argument = \"Never say never.\";\nprintTwice(argument);\nThe value you provide as an argument must have the same type as the param-\neter. For example, if you try:\nprintTwice(17); // syntax error\nYou will get an error message like this:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 73,
      "page_label": "56"
    }
  },
  {
    "text": "You will get an error message like this:\nFile: Test.java [line: 10]\nError: method printTwice in class Test cannot be applied\nto given types;\nrequired: java.lang.String\nfound: int\nreason: actual argument int cannot be converted to\njava.lang.String by method invocation conversion\nSometimes Java can convert an argument from one type to another auto-\nmatically. For example, Math.sqrt requires a double, but if you invoke\nMath.sqrt(25), the integer value25 is automatically converted to the \ufb02oating-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 73,
      "page_label": "56"
    }
  },
  {
    "text": "point value 25.0. But in the case of printTwice, Java can\u2019t (or won\u2019t) convert\nthe integer 17 to a String.\nParameters and other variables only exist inside their own methods. Inside\nmain, there is no such thing ass. If you try to use it there, you\u2019ll get a compiler\nerror. Similarly, inside printTwice there is no such thing as argument. That\nvariable belongs to main.\nBecause variables only exist inside the methods where they are de\ufb01ned, they\nare often called local variables.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 73,
      "page_label": "56"
    }
  },
  {
    "text": "are often called local variables.\n4.6 Multiple parameters\nHere is an example of a method that takes two parameters:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 73,
      "page_label": "56"
    }
  },
  {
    "text": "4.7 Stack diagrams 57\npublic static void printTime(int hour, int minute) {\nSystem.out.print(hour);\nSystem.out.print(\":\");\nSystem.out.println(minute);\n}\nIn the parameter list, it may be tempting to write:\npublic static void printTime(int hour, minute) {\n...\nBut that format (without the secondint) is only legal for variable declarations.\nIn parameter lists, you need to specify the type of each variable separately.\nTo invoke this method, we have to provide two integers as arguments:\nint hour = 11;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 74,
      "page_label": "57"
    }
  },
  {
    "text": "int hour = 11;\nint minute = 59;\nprintTime(hour, minute);\nA common error is to declare the types of the arguments, like this:\nint hour = 11;\nint minute = 59;\nprintTime(int hour, int minute); // syntax error\nThat\u2019s a syntax error; the compiler sees int hour and int minute as variable\ndeclarations, not expressions. You wouldn\u2019t declare the types of the arguments\nif they were simply integers:\nprintTime(int 11, int 59); // syntax error\n4.7 Stack diagrams",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 74,
      "page_label": "57"
    }
  },
  {
    "text": "4.7 Stack diagrams\nPulling together the code fragments from the previous section, here is a com-\nplete class de\ufb01nition:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 74,
      "page_label": "57"
    }
  },
  {
    "text": "58 Chapter 4 Void methods\npublic class PrintTime {\npublic static void printTime(int hour, int minute) {\nSystem.out.print(hour);\nSystem.out.print(\":\");\nSystem.out.println(minute);\n}\npublic static void main(String[] args) {\nint hour = 11;\nint minute = 59;\nprintTime(hour, minute);\n}\n}\nprintTime has two parameters, named hour and minute. And main has two\nvariables, also named hour and minute. Although they have the same names,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 75,
      "page_label": "58"
    }
  },
  {
    "text": "these variables are not the same. hour in printTime and hour in main refer\nto di\ufb00erent storage locations, and they can have di\ufb00erent values.\nFor example, you could invoke printTime like this:\nint hour = 11;\nint minute = 59;\nprintTime(hour + 1, 0);\nBefore the method is invoked, Java evaluates the arguments; in this example,\nthe results are 12 and 0. Then it assigns those values to the parameters. Inside\nprintTime, the value of hour is 12, not 11, and the value of minute is 0, not",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 75,
      "page_label": "58"
    }
  },
  {
    "text": "59. Furthermore, if printTime modi\ufb01es one of its parameters, that change\nhas no e\ufb00ect on the variables in main.\nOne way to keep track of everything is to draw a stack diagram, which is\na state diagram (see Section 2.3) that shows method invocations. For each\nmethod there is a box called a frame that contains the method\u2019s parame-\nters and variables. The name of the method appears outside the frame; the\nvariables and parameters appear inside.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 75,
      "page_label": "58"
    }
  },
  {
    "text": "variables and parameters appear inside.\nAs with state diagrams, stack diagrams show variables and methods at a par-\nticular point in time. Figure 4.1 is a stack diagram at the beginning of the\nprintTime method.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 75,
      "page_label": "58"
    }
  },
  {
    "text": "4.8 Reading documentation 59\nprintTime\nmain\n12\n11hour\nhour\n59minute\nminute 0\nFigure 4.1: Stack diagram for PrintTime.\n4.8 Reading documentation\nOne of the nice things about Java is that it comes with an extensive library\nof classes and methods. But before you use them, you might have to read the\ndocumentation. And sometimes that\u2019s not easy.\nAs an example, let\u2019s look at the documentation for Scanner, which we used\nin Section 3.2. You can \ufb01nd it by doing a web search for \u201cJava Scanner\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 76,
      "page_label": "59"
    }
  },
  {
    "text": "Figure 4.2 shows a screenshot of the page.\nFigure 4.2: Screenshot of the documentation for Scanner.\nDocumentation for other classes uses a similar format. The \ufb01rst line is the\npackage that contains the class, such as java.util. The second line is the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 76,
      "page_label": "59"
    }
  },
  {
    "text": "60 Chapter 4 Void methods\nname of the class. The \u201cImplemented Interfaces\u201d section lists some of the\nthings a Scanner can do; we won\u2019t say more about that for now.\nThe next section of the documentation is a narrative that explains the purpose\nof the class and includes examples of how to use it. This text can be di\ufb03cult\nto read because it uses terms we have not learned yet. But the examples are\noften very useful. A good way to get started with a new class is to paste the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 77,
      "page_label": "60"
    }
  },
  {
    "text": "examples into a test \ufb01le and see if you can compile and run them.\nOne of the examples shows how you can use a Scanner to read input from a\nString instead of System.in:\nString input = \"1 fish 2 fish red fish blue fish\";\nScanner s = new Scanner(input);\nAfter the narrative, code examples, and some other details, you will \ufb01nd the\nfollowing tables:\nConstructor summary: Ways of creating, or \u201cconstructing\u201d, a Scanner.\nMethod summary: The list of methods that Scanner provides.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 77,
      "page_label": "60"
    }
  },
  {
    "text": "Constructor detail: More information about how to create a Scanner.\nMethod detail: More information about each method.\nAs an example, here is the summary information for nextInt:\npublic int nextInt()\nScans the next token of the input as an int.\nThe \ufb01rst line is the method\u2019s signature, which speci\ufb01es the name of the\nmethod, its parameters (none), and what type it returns ( int). The next line\nis a short description of what it does.\nThe \u201cMethod detail\u201d explains more:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 77,
      "page_label": "60"
    }
  },
  {
    "text": "4.9 Writing documentation 61\npublic int nextInt()\nScans the next token of the input as an int.\nAn invocation of this method of the form nextInt() behaves in\nexactly the same way as the invocation nextInt(radix), where\nradix is the default radix of this scanner.\nReturns:\nthe int scanned from the input\nThrows:\nInputMismatchException - if the next token does not match\nthe Integer regular expression, or is out of range\nNoSuchElementException - if input is exhausted",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 78,
      "page_label": "61"
    }
  },
  {
    "text": "NoSuchElementException - if input is exhausted\nIllegalStateException - if this scanner is closed\nThe \u201cReturns\u201d section describes the result when the method succeeds. In\ncontrast, the \u201cThrows\u201d section describes possible errors and their resulting\nexceptions. Exceptions are said to be \u201cthrown\u201d, like a referee throwing a \ufb02ag,\nor like a toddler throwing a \ufb01t.\nIt might take you some time to get comfortable reading documentation and",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 78,
      "page_label": "61"
    }
  },
  {
    "text": "learning which parts to ignore. But it\u2019s worth the e\ufb00ort. Knowing what\u2019s\navailable in the library helps you avoid reinventing the wheel. And a little bit\nof documentation can save you a lot of debugging.\n4.9 Writing documentation\nAs you bene\ufb01t from reading good documentation, you should \u201cpay it forward\u201d\nby writing good documentation. A nice feature of the Java language is the\nability to embed documentation in your source code. That way, you can write",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 78,
      "page_label": "61"
    }
  },
  {
    "text": "it as you go, and as things change, it is easier to keep the documentation\nconsistent with the code.\nIf you include documentation in your source code, you can extract it automat-\nically, and generate well-formatted HTML, using a tool called Javadoc. This\ntool is included in standard Java development environments, and it is widely",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 78,
      "page_label": "61"
    }
  },
  {
    "text": "62 Chapter 4 Void methods\nused. In fact, the online documentation of the Java libraries is generated by\nJavadoc.\nJavadoc scans your source \ufb01les looking for specially-formatted documenta-\ntion comments, also known as \u201cJavadoc comments\u201d. They begin with /**\n(two stars) and end with */ (one star). Anything in between is considered\npart of the documentation.\nHere\u2019s a class de\ufb01nition with two Javadoc comments, one for the class and one\nfor the main method:\n/**",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 79,
      "page_label": "62"
    }
  },
  {
    "text": "for the main method:\n/**\n* Example program that demonstrates print vs println.\n*/\npublic class Goodbye {\n/**\n* Prints a greeting.\n*/\npublic static void main(String[] args) {\nSystem.out.print(\"Goodbye, \"); // note the space\nSystem.out.println(\"cruel world\");\n}\n}\nThe class comment explains the purpose of the class. The method comment\nexplains what the method does.\nNotice that this example also includes an inline comment, beginning with",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 79,
      "page_label": "62"
    }
  },
  {
    "text": "//. In general, inline comments are short phrases that help explain complex\nparts of a program. They are intended for other programmers reading and\nmaintaining the source code.\nIn contrast, Javadoc comments are longer, usually complete sentences. They\nexplain what each method does, but they omit details about how the method\nworks. And they are intended for people who will use the methods without\nlooking at the source code.\nAppropriate comments and documentation are essential for making source",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 79,
      "page_label": "62"
    }
  },
  {
    "text": "code readable. And remember that the person most likely to read your code\nin the future, and appreciate good documentation, is you.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 79,
      "page_label": "62"
    }
  },
  {
    "text": "4.10 Vocabulary 63\n4.10 Vocabulary\nargument: A value that you provide when you invoke a method. This value\nmust have the same type as the corresponding parameter.\ninvoke: To cause a method to execute. Also known as \u201ccalling\u201d a method.\nparameter: A piece of information that a method requires before it can run.\nParameters are variables: they contain values and have types.\n\ufb02ow of execution: The order in which Java executes methods and state-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 80,
      "page_label": "63"
    }
  },
  {
    "text": "ments. It may not necessarily be from top to bottom, left to right.\nparameter passing: The process of assigning an argument value to a pa-\nrameter variable.\nlocal variable: A variable declared inside a method. Local variables cannot\nbe accessed from outside their method.\nstack diagram: A graphical representation of the variables belonging to each\nmethod. The method calls are \u201cstacked\u201d from top to bottom, in the \ufb02ow\nof execution.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 80,
      "page_label": "63"
    }
  },
  {
    "text": "of execution.\nframe: In a stack diagram, a representation of the variables and parameters\nfor a method, along with their current values.\nsignature: The \ufb01rst line of a method that de\ufb01nes its name, return type, and\nparameters.\nJavadoc: A tool that reads Java source code and generates documentation\nin HTML format.\ndocumentation: Comments that describe the technical operation of a class\nor method.\n4.11 Exercises\nThe code for this chapter is in the ch04 directory of ThinkJavaCode. See",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 80,
      "page_label": "63"
    }
  },
  {
    "text": "page xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 80,
      "page_label": "63"
    }
  },
  {
    "text": "64 Chapter 4 Void methods\nIf you have not already read Appendix A.4, now might be a good time. It\ndescribes an e\ufb03cient way to test programs that take input from the user and\ndisplay speci\ufb01c output.\nExercise 4.1 The point of this exercise is to practice reading code and to\nmake sure that you understand the \ufb02ow of execution through a program with\nmultiple methods.\n1. What is the output of the following program? Be precise about where\nthere are spaces and where there are newlines.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 81,
      "page_label": "64"
    }
  },
  {
    "text": "there are spaces and where there are newlines.\nHint: Start by describing in words what ping and baffle do when they\nare invoked.\n2. Draw a stack diagram that shows the state of the program the \ufb01rst time\nping is invoked.\n3. What happens if you invoke baffle(); at the end of the ping method?\n(We will see why in the next chapter.)\npublic static void zoop() {\nbaffle();\nSystem.out.print(\"You wugga \");\nbaffle();\n}\npublic static void main(String[] args) {\nSystem.out.print(\"No, I \");\nzoop();",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 81,
      "page_label": "64"
    }
  },
  {
    "text": "System.out.print(\"No, I \");\nzoop();\nSystem.out.print(\"I \");\nbaffle();\n}\npublic static void baffle() {\nSystem.out.print(\"wug\");\nping();\n}\npublic static void ping() {\nSystem.out.println(\".\");\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 81,
      "page_label": "64"
    }
  },
  {
    "text": "4.11 Exercises 65\nExercise 4.2 The point of this exercise is to make sure you understand how\nto write and invoke methods that take parameters.\n1. Write the \ufb01rst line of a method named zool that takes three parameters:\nan int and two Strings.\n2. Write a line of code that calls zool, passing as arguments the value 11,\nthe name of your \ufb01rst pet, and the name of the street you grew up on.\nExercise 4.3 The purpose of this exercise is to take code from a previous",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 82,
      "page_label": "65"
    }
  },
  {
    "text": "exercise and encapsulate it in a method that takes parameters. You should\nstart with a working solution to Exercise 2.2.\n1. Write a method called printAmerican that takes the day, date, month\nand year as parameters and that displays them in American format.\n2. Test your method by invoking it from main and passing appropriate\narguments. The output should look something like this (except that the\ndate might be di\ufb00erent):\nSaturday, July 22, 2015",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 82,
      "page_label": "65"
    }
  },
  {
    "text": "date might be di\ufb00erent):\nSaturday, July 22, 2015\n3. Once you have debugged printAmerican, write another method called\nprintEuropean that displays the date in European format.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 82,
      "page_label": "65"
    }
  },
  {
    "text": "66 Chapter 4 Void methods",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 83,
      "page_label": "66"
    }
  },
  {
    "text": "Chapter 5\nConditionals and logic\nThe programs we\u2019ve seen in previous chapters do pretty much the same thing\nevery time, regardless of the input. For more complex computations, pro-\ngrams usually react to the inputs, check for certain conditions, and generate\nappropriate results. This chapter presents the features you need for programs\nto make decisions: a new data type called boolean, operators for expressing\nlogic, and if statements.\n5.1 Relational operators",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 84,
      "page_label": "67"
    }
  },
  {
    "text": "5.1 Relational operators\nRelational operators are used to check conditions like whether two values\nare equal, or whether one is greater than the other. The following expressions\nshow how they are used:\nx == y // x is equal to y\nx != y // x is not equal to y\nx > y // x is greater than y\nx < y // x is less than y\nx >= y // x is greater than or equal to y\nx <= y // x is less than or equal to y\nThe result of a relational operator is one of two special values, true or false.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 84,
      "page_label": "67"
    }
  },
  {
    "text": "These values belong to the data type boolean; in fact, they are the only\nboolean values.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 84,
      "page_label": "67"
    }
  },
  {
    "text": "68 Chapter 5 Conditionals and logic\nYou are probably familiar with these operations, but notice that the Java\noperators are di\ufb00erent from the mathematical symbols like =, \u0338=, and \u2264. A\ncommon error is to use a single = instead of a double ==. Remember that = is\nthe assignment operator, and == is a comparison operator. Also, there is no\nsuch thing as the =< or => operators.\nThe two sides of a relational operator have to be compatible. For example, the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 85,
      "page_label": "68"
    }
  },
  {
    "text": "expression 5 < \"6\" is invalid because 5 is an int and \"6\" is a String. When\ncomparing values of di\ufb00erent numeric types, Java applies the same conversion\nrules we saw previously with the assignment operator. For example, when\nevaluating the expression 5 < 6.0, Java automatically converts the 5 to 5.0.\nMost relational operators don\u2019t work with strings. But confusingly, == and\n!= do work with strings \u2013 they just don\u2019t do what you expect. We\u2019ll explain",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 85,
      "page_label": "68"
    }
  },
  {
    "text": "what they do later; in the meantime, don\u2019t use them with strings. Instead,\nyou should use the equals method:\nString fruit1 = \"Apple\";\nString fruit2 = \"Orange\";\nSystem.out.println(fruit1.equals(fruit2));\nThe result of fruit1.equals(fruit2) is the boolean value false.\n5.2 Logical operators\nJava has three logical operators: &&, ||, and !, which respectively stand for\nand, or, and not. The results of these operators are similar to their meanings\nin English.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 85,
      "page_label": "68"
    }
  },
  {
    "text": "in English.\nFor example, x > 0 && x < 10 is true when x is both greater than zero and\nless than 10. The expression evenFlag || n % 3 == 0 is true if either con-\ndition is true, that is, if evenFlag is true or the number n is divisible by 3.\nFinally, the ! operator inverts a boolean expression. So !evenFlag is true if\nevenFlag is not true.\nLogical operators evaluate the second expression only when necessary. For\nexample, true || anything is always true, so Java does not need to evalu-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 85,
      "page_label": "68"
    }
  },
  {
    "text": "ate the expression anything. Likewise, false && anything is always false.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 85,
      "page_label": "68"
    }
  },
  {
    "text": "5.3 Conditional statements 69\nIgnoring the second operand, when possible, is called short circuit evalua-\ntion, by analogy with an electrical circuit. Short circuit evaluation can save\ntime, especially if anything takes a long time to evaluate. It can also avoid\nunnecessary errors, if anything might fail.\nIf you ever have to negate an expression that contains logical operators, and\nyou probably will, De Morgan\u2019s laws can help:\n\u0088 !(A && B) is the same as !A || !B",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 86,
      "page_label": "69"
    }
  },
  {
    "text": "\u0088 !(A && B) is the same as !A || !B\n\u0088 !(A || B) is the same as !A && !B\nNegating a logical expression is the same as negating each term and changing\nthe operator. The ! operator takes precedence over && and ||, so you don\u2019t\nhave to put parentheses around the individual terms !A and !B.\nDe Morgan\u2019s laws also apply to the relational operators. In this case, negating\neach term means using the \u201copposite\u201d relational operator.\n\u0088 !(x < 5 && y == 3) is the same as x >= 5 || y != 3",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 86,
      "page_label": "69"
    }
  },
  {
    "text": "\u0088 !(x >= 1 || y != 7) is the same as x < 1 && y == 7\nIt may help to read these examples out loud in English. For instance, \u201cIf I\ndon\u2019t want the case where x is less than 5 and y is 3, then I need x to be\ngreater than or equal to 5, or I need y to be anything but 3.\u201d\n5.3 Conditional statements\nTo write useful programs, we almost always need to check conditions and\nreact accordingly. Conditional statements give us this ability. The simplest\nconditional statement in Java is the if statement:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 86,
      "page_label": "69"
    }
  },
  {
    "text": "if (x > 0) {\nSystem.out.println(\"x is positive\");\n}\nThe expression in parentheses is called the condition. If it is true, the state-\nments in braces get executed. If the condition is false, execution skips over that\nblock of code. The condition in parentheses can be any boolean expression.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 86,
      "page_label": "69"
    }
  },
  {
    "text": "70 Chapter 5 Conditionals and logic\nA second form of conditional statement has two possibilities, indicated by if\nand else. The possibilities are called branches, and the condition determines\nwhich one gets executed:\nif (x % 2 == 0) {\nSystem.out.println(\"x is even\");\n} else {\nSystem.out.println(\"x is odd\");\n}\nIf the remainder when x is divided by 2 is zero, we know that x is even, and\nthis fragment displays a message to that e\ufb00ect. If the condition is false, the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 87,
      "page_label": "70"
    }
  },
  {
    "text": "second print statement is executed instead. Since the condition must be true\nor false, exactly one of the branches will run.\nThe braces are optional for branches that have only one statement. So we\ncould have written the previous example this way:\nif (x % 2 == 0)\nSystem.out.println(\"x is even\");\nelse\nSystem.out.println(\"x is odd\");\nHowever, it\u2019s better to use braces \u2013 even when they are optional \u2013 to avoid\nmaking the mistake of adding statements to anif or else block and forgetting",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 87,
      "page_label": "70"
    }
  },
  {
    "text": "to add the braces.\nif (x > 0)\nSystem.out.println(\"x is positive\");\nSystem.out.println(\"x is not zero\");\nThis code is misleading because it\u2019s not indented correctly. Since there are no\nbraces, only the \ufb01rst println is part of the if statement. Here is what the\ncompiler actually sees:\nif (x > 0) {\nSystem.out.println(\"x is positive\");\n}\nSystem.out.println(\"x is not zero\");\nAs a result, the second println runs no matter what. Even experienced",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 87,
      "page_label": "70"
    }
  },
  {
    "text": "programmers make this mistake; search the web for Apple\u2019s \u201cgoto fail\u201d bug.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 87,
      "page_label": "70"
    }
  },
  {
    "text": "5.4 Chaining and nesting 71\n5.4 Chaining and nesting\nSometimes you want to check related conditions and choose one of several\nactions. One way to do this is by chaining a series of if and else statements:\nif (x > 0) {\nSystem.out.println(\"x is positive\");\n} else if (x < 0) {\nSystem.out.println(\"x is negative\");\n} else {\nSystem.out.println(\"x is zero\");\n}\nThese chains can be as long as you want, although they can be di\ufb03cult to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 88,
      "page_label": "71"
    }
  },
  {
    "text": "read if they get out of hand. One way to make them easier to read is to use\nstandard indentation, as demonstrated in these examples. If you keep all the\nstatements and braces lined up, you are less likely to make syntax errors.\nIn addition to chaining, you can also make complex decisions by nesting one\nconditional statement inside another. We could have written the previous\nexample as:\nif (x == 0) {\nSystem.out.println(\"x is zero\");\n} else {\nif (x > 0) {\nSystem.out.println(\"x is positive\");",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 88,
      "page_label": "71"
    }
  },
  {
    "text": "if (x > 0) {\nSystem.out.println(\"x is positive\");\n} else {\nSystem.out.println(\"x is negative\");\n}\n}\nThe outer conditional has two branches. The \ufb01rst branch contains a print\nstatement, and the second branch contains another conditional statement,\nwhich has two branches of its own. These two branches are also print state-\nments, but they could have been conditional statements as well.\nThese kinds of nested structures are common, but they get di\ufb03cult to read",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 88,
      "page_label": "71"
    }
  },
  {
    "text": "very quickly. Good indentation is essential to make the structure (or intended\nstructure) apparent to the reader.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 88,
      "page_label": "71"
    }
  },
  {
    "text": "72 Chapter 5 Conditionals and logic\n5.5 Flag variables\nTo store a true or false value, you need a boolean variable. You can create\none like this:\nboolean flag;\nflag = true;\nboolean testResult = false;\nThe \ufb01rst line is a variable declaration, the second is an assignment, and the\nthird is both. Since relational operators evaluate to a boolean value, you can\nstore the result of a comparison in a variable:\nboolean evenFlag = (n % 2 == 0); // true if n is even",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 89,
      "page_label": "72"
    }
  },
  {
    "text": "boolean positiveFlag = (x > 0); // true if x is positive\nThe parentheses are unnecessary, but they make the code easier to read. A\nvariable de\ufb01ned in this way is called a \ufb02ag, because it signals or \u201c\ufb02ags\u201d the\npresence or absence of a condition.\nYou can use \ufb02ag variables as part of a conditional statement later:\nif (evenFlag) {\nSystem.out.println(\"n was even when I checked it\");\n}\nNotice that you don\u2019t have to writeif (evenFlag == true). Since evenFlag",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 89,
      "page_label": "72"
    }
  },
  {
    "text": "is a boolean, it\u2019s already a condition. Likewise, to check if a \ufb02ag is false:\nif (!evenFlag) {\nSystem.out.println(\"n was odd when I checked it\");\n}\n5.6 The return statement\nThe return statement allows you to terminate a method before you reach the\nend of it. One reason to use return is if you detect an error condition:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 89,
      "page_label": "72"
    }
  },
  {
    "text": "5.7 Validating input 73\npublic static void printLogarithm(double x) {\nif (x <= 0.0) {\nSystem.err.println(\"Error: x must be positive.\");\nreturn;\n}\ndouble result = Math.log(x);\nSystem.out.println(\"The log of x is \" + result);\n}\nThis example de\ufb01nes a method named printLogarithm that takes a double\nvalue (named x) as a parameter. It checks whether x is less than or equal to\nzero, in which case it displays an error message and then uses return to exit",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 90,
      "page_label": "73"
    }
  },
  {
    "text": "the method. The \ufb02ow of execution immediately returns to where the method\nwas invoked, and the remaining lines of the method are not executed.\nThis example uses System.err, which is an OutputStream normally used for\nerror messages and warnings. Some development environments display output\nto System.err with a di\ufb00erent color or in a separate window.\n5.7 Validating input\nHere is a method that uses printLogarithm from the previous section:\npublic static void scanDouble(Scanner in) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 90,
      "page_label": "73"
    }
  },
  {
    "text": "public static void scanDouble(Scanner in) {\nSystem.out.print(\"Enter a number: \");\ndouble x = in.nextDouble();\nprintLogarithm(x);\n}\nThis example uses nextDouble, so the Scanner (provided by themain method)\ntries to read a double. If the user enters a \ufb02oating-point number, the Scanner\nconverts it to adouble. But if the user types anything else, theScanner throws\nan InputMismatchException.\nWe can prevent this error by checking the input before parsing it:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 90,
      "page_label": "73"
    }
  },
  {
    "text": "74 Chapter 5 Conditionals and logic\npublic static void scanDouble(Scanner in) {\nSystem.out.print(\"Enter a number: \");\nif (!in.hasNextDouble()) {\nString word = in.next();\nSystem.err.println(word + \" is not a number\");\nreturn;\n}\ndouble x = in.nextDouble();\nprintLogarithm(x);\n}\nThe Scanner class provides hasNextDouble, which checks whether the next\ntoken in the input stream can be interpreted as a double. If so, we can call\nnextDouble with no chance of throwing an exception. If not, we display an",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 91,
      "page_label": "74"
    }
  },
  {
    "text": "error message and return.\n5.8 Recursive methods\nNow that we have conditional statements, we can explore one of the most\nmagical things a program can do: recursion. Consider the following example:\npublic static void countdown(int n) {\nif (n == 0) {\nSystem.out.println(\"Blastoff!\");\n} else {\nSystem.out.println(n);\ncountdown(n - 1);\n}\n}\nThe name of the method is countdown; it takes a single integer as a parameter.\nIf the parameter is zero, it displays the word \u201cBlasto\ufb00\u201d. Otherwise, it displays",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 91,
      "page_label": "74"
    }
  },
  {
    "text": "the number and then invokes itself, passing n - 1 as the argument. A method\nthat invokes itself is called recursive.\nWhat happens if we invoke countdown(3) from main?\nThe execution of countdown begins with n == 3, and since n is not\nzero, it displays the value 3, and then invokes itself...",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 91,
      "page_label": "74"
    }
  },
  {
    "text": "5.8 Recursive methods 75\nThe execution of countdown begins with n == 2, and\nsince n is not zero, it displays the value 2, and then\ninvokes itself...\nThe execution ofcountdown begins with n == 1,\nand since n is not zero, it displays the value 1,\nand then invokes itself...\nThe execution of countdown begins with\nn == 0, and since n is zero, it displays\nthe word \u201cBlasto\ufb00!\u201d and then returns.\nThe countdown that got n == 1 returns.\nThe countdown that got n == 2 returns.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 92,
      "page_label": "75"
    }
  },
  {
    "text": "The countdown that got n == 2 returns.\nThe countdown that got n == 3 returns.\nAnd then you\u2019re back in main. So the total output looks like:\n3\n2\n1\nBlastoff!\nAs a second example, we\u2019ll rewrite the methods newLine and threeLine from\nSection 4.3.\npublic static void newLine() {\nSystem.out.println();\n}\npublic static void threeLine() {\nnewLine();\nnewLine();\nnewLine();\n}\nAlthough these methods work, they would not help if we wanted to display\ntwo newlines, or maybe 100. A better alternative would be:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 92,
      "page_label": "75"
    }
  },
  {
    "text": "76 Chapter 5 Conditionals and logic\npublic static void nLines(int n) {\nif (n > 0) {\nSystem.out.println();\nnLines(n - 1);\n}\n}\nThis method takes an integer, n, as a parameter and displays n newlines. The\nstructure is similar to countdown. As long as nis greater than zero, it displays\na newline and then invokes itself to display ( n\u22121) additional newlines. The\ntotal number of newlines is 1 + ( n\u22121), which is just what we wanted: n.\n5.9 Recursive stack diagrams",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 93,
      "page_label": "76"
    }
  },
  {
    "text": "5.9 Recursive stack diagrams\nIn the previous chapter, we used a stack diagram to represent the state of a\nprogram during a method invocation. The same kind of diagram can make it\neasier to interpret a recursive method.\nRemember that every time a method gets called, Java creates a new frame\nthat contains the current method\u2019s parameters and variables. Figure 5.1 is a\nstack diagram for countdown, called with n == 3.\ncountdown\ncountdown\nmain\ncountdown\ncountdown\n3\n2\n1\n0\nn\nn\nn\nn",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 93,
      "page_label": "76"
    }
  },
  {
    "text": "main\ncountdown\ncountdown\n3\n2\n1\n0\nn\nn\nn\nn\nFigure 5.1: Stack diagram for the countdown program.\nBy convention, the stack for main is at the top and the stack grows down. The\nframe for main is empty because main does not have any variables. (It has the\nparameter args, but since we\u2019re not using it, we left it out of the diagram.)",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 93,
      "page_label": "76"
    }
  },
  {
    "text": "5.10 Binary numbers 77\nThere are four frames for countdown, each with a di\ufb00erent value for the pa-\nrameter n. The last frame, with n == 0, is called the base case. It does not\nmake a recursive call, so there are no more frames below it.\nIf there is no base case in a recursive method, or if the base case is never\nreached, the stack would grow forever, at least in theory. In practice, the size\nof the stack is limited; if you exceed the limit, you get aStackOverflowError.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 94,
      "page_label": "77"
    }
  },
  {
    "text": "For example, here is a recursive method without a base case:\npublic static void forever(String s) {\nSystem.out.println(s);\nforever(s);\n}\nThis method displays the string until the stack over\ufb02ows, at which point it\nthrows an exception.\n5.10 Binary numbers\nThe countdown example has three parts: (1) it checks the base case, (2)\ndisplays something, and (3) makes a recursive call. What do you think happens\nif you reverse steps 2 and 3, making the recursive call before displaying?",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 94,
      "page_label": "77"
    }
  },
  {
    "text": "public static void countup(int n) {\nif (n == 0) {\nSystem.out.println(\"Blastoff!\");\n} else {\ncountup(n - 1);\nSystem.out.println(n);\n}\n}\nThe stack diagram is the same as before, and the method is still called n\ntimes. But now the System.out.println happens just before each recursive\ncall returns. As a result, it counts up instead of down:\nBlastoff!\n1\n2\n3",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 94,
      "page_label": "77"
    }
  },
  {
    "text": "78 Chapter 5 Conditionals and logic\nThis behavior comes in handy when it is easier to compute results in reverse or-\nder. For example, to convert a decimal integer into its binary representation,\nyou repeatedly divide the number by two:\n23 / 2 is 11 remainder 1\n11 / 2 is 5 remainder 1\n5 / 2 is 2 remainder 1\n2 / 2 is 1 remainder 0\n1 / 2 is 0 remainder 1\nReading these remainders from bottom to top, 23 in binary is 10111. For\nmore background about binary numbers, see http://www.mathsisfun.com/",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 95,
      "page_label": "78"
    }
  },
  {
    "text": "binary-number-system.html.\nHere is a recursive method that displays the binary representation of any\npositive integer:\npublic static void displayBinary(int value) {\nif (value > 0) {\ndisplayBinary(value / 2);\nSystem.out.print(value % 2);\n}\n}\nIf value is zero, displayBinary does nothing (that\u2019s the base case). If the\nargument is positive, the method divides it by two and calls displayBinary\nrecursively. When the recursive call returns, the method displays one digit of",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 95,
      "page_label": "78"
    }
  },
  {
    "text": "the result and returns (again).\nThe leftmost digit is at the bottom of the stack, so it gets displayed \ufb01rst. The\nrightmost digit, at the top of the stack, gets displayed last. After invoking\ndisplayBinary, we use println to complete the output.\ndisplayBinary(23);\nSystem.out.println();\n// output is 10111\nLearning to think recursively is an important aspect of learning to think like a\ncomputer scientist. Many algorithms can be written concisely with recursive",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 95,
      "page_label": "78"
    }
  },
  {
    "text": "methods that perform computations on the way down, on the way up, or both.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 95,
      "page_label": "78"
    }
  },
  {
    "text": "5.11 Vocabulary 79\n5.11 Vocabulary\nboolean: A data type with only two values, true and false.\nrelational operator: An operator that compares two values and produces a\nboolean indicating the relationship between them.\nlogical operator: An operator that combines boolean values and produces a\nboolean value.\nshort circuit: A way of evaluating logical operators that only evaluates the\nsecond operand if necessary.\nDe Morgan\u2019s laws: Mathematical rules that show how to negate a logical\nexpression.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 96,
      "page_label": "79"
    }
  },
  {
    "text": "expression.\nconditional statement: A statement that uses a condition to determine\nwhich statements to execute.\nbranch: One of the alternative sets of statements inside a conditional state-\nment.\nchaining: A way of joining several conditional statements in sequence.\nnesting: Putting a conditional statement inside one or both branches of an-\nother conditional statement.\n\ufb02ag: A variable (usually boolean) that represents a condition or status.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 96,
      "page_label": "79"
    }
  },
  {
    "text": "recursion: The process of invoking (and restarting) the same method that is\ncurrently executing.\nrecursive: A method that invokes itself, usually with di\ufb00erent arguments.\nbase case: A condition that causes a recursive method not to make another\nrecursive call.\nbinary: A system that uses only zeros and ones to represent numbers. Also\nknown as \u201cbase 2\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 96,
      "page_label": "79"
    }
  },
  {
    "text": "80 Chapter 5 Conditionals and logic\n5.12 Exercises\nThe code for this chapter is in the ch05 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nIf you have not already read Appendix A.6, now might be a good time. It\ndescribes the DrJava debugger, which is a useful tool for tracing the \ufb02ow of\nexecution.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 97,
      "page_label": "80"
    }
  },
  {
    "text": "execution.\nExercise 5.1 Logical operators can simplify nested conditional statements.\nFor example, can you rewrite this code using a single if statement?\nif (x > 0) {\nif (x < 10) {\nSystem.out.println(\"positive single digit number.\");\n}\n}\nExercise 5.2 For the following program:\n1. Draw a stack diagram that shows the state of the program the second\ntime zoop is invoked.\n2. What is the complete output?\npublic static void zoop(String fred, int bob) {\nSystem.out.println(fred);\nif (bob == 5) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 97,
      "page_label": "80"
    }
  },
  {
    "text": "System.out.println(fred);\nif (bob == 5) {\nping(\"not \");\n} else {\nSystem.out.println(\"!\");\n}\n}\npublic static void main(String[] args) {\nint bizz = 5;\nint buzz = 2;\nzoop(\"just for\", bizz);\nclink(2 * buzz);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 97,
      "page_label": "80"
    }
  },
  {
    "text": "5.12 Exercises 81\npublic static void clink(int fork) {\nSystem.out.print(\"It' s \");\nzoop(\"breakfast \", fork);\n}\npublic static void ping(String strangStrung) {\nSystem.out.println(\"any \" + strangStrung + \"more \");\n}\nExercise 5.3 Draw a stack diagram that shows the state of the program in\nSection 5.8 after main invokes nLines with the parameter n == 4, just before\nthe last invocation of nLines returns.\nExercise 5.4 Fermat\u2019s Last Theorem says that there are no integers a, b,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 98,
      "page_label": "81"
    }
  },
  {
    "text": "and c such that an + bn = cn, except when n\u22642.\nWrite a method named checkFermat that takes four integers as parameters \u2013\na, b, c and n \u2013 and checks to see if Fermat\u2019s theorem holds. If n is greater\nthan 2 and an + bn = cn, the program should display \u201cHoly smokes, Fermat\nwas wrong!\u201d Otherwise the program should display \u201cNo, that doesn\u2019t work.\u201d\nHint: You may want to use Math.pow.\nExercise 5.5 The purpose of this exercise is to take a problem and break",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 98,
      "page_label": "81"
    }
  },
  {
    "text": "it into smaller problems, and to solve the smaller problems by writing simple\nmethods. Consider the \ufb01rst verse of the song \u201c99 Bottles of Beer\u201d:\n99 bottles of beer on the wall,\n99 bottles of beer,\nya\u2019 take one down, ya\u2019 pass it around,\n98 bottles of beer on the wall.\nSubsequent verses are identical except that the number of bottles gets smaller\nby one in each verse, until the last verse:\nNo bottles of beer on the wall,\nno bottles of beer,\nya\u2019 can\u2019t take one down, ya\u2019 can\u2019t pass it around,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 98,
      "page_label": "81"
    }
  },
  {
    "text": "\u2019cause there are no more bottles of beer on the wall!",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 98,
      "page_label": "81"
    }
  },
  {
    "text": "82 Chapter 5 Conditionals and logic\nAnd then the song (\ufb01nally) ends.\nWrite a program that displays the entire lyrics of \u201c99 Bottles of Beer\u201d. Your\nprogram should include a recursive method that does the hard part, but you\nmight want to write additional methods to separate other parts of the program.\nAs you develop your code, test it with a small number of verses, like 3.\nExercise 5.6 This exercise reviews the \ufb02ow of execution through a program",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 99,
      "page_label": "82"
    }
  },
  {
    "text": "with multiple methods. Read the following code and answer the questions.\npublic class Buzz {\npublic static void baffle(String blimp) {\nSystem.out.println(blimp);\nzippo(\"ping\", -5);\n}\npublic static void zippo(String quince, int flag) {\nif (flag < 0) {\nSystem.out.println(quince + \" zoop\");\n} else {\nSystem.out.println(\"ik\");\nbaffle(quince);\nSystem.out.println(\"boo-wa-ha-ha\");\n}\n}\npublic static void main(String[] args) {\nzippo(\"rattle\", 13);\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 99,
      "page_label": "82"
    }
  },
  {
    "text": "zippo(\"rattle\", 13);\n}\n}\n1. Write the number 1 next to the \ufb01rst line of code in this program that\nwill execute.\n2. Write the number 2 next to the second line of code, and so on until the\nend of the program. If a line is executed more than once, it might end\nup with more than one number next to it.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 99,
      "page_label": "82"
    }
  },
  {
    "text": "5.12 Exercises 83\n3. What is the value of the parameter blimp when baffle gets invoked?\n4. What is the output of this program?\nExercise 5.7 Now that we have conditional statements, we can get back to\nthe \u201cGuess My Number\u201d game from Exercise 3.4.\nYou should already have a program that chooses a random number, prompts\nthe user to guess it, and displays the di\ufb00erence between the guess and the\nchosen number.\nAdding a small amount of code at a time, and testing as you go, modify the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 100,
      "page_label": "83"
    }
  },
  {
    "text": "program so it tells the user whether the guess is too high or too low, and then\nprompts the user for another guess.\nThe program should continue until the user gets it right. Hint: Use two\nmethods, and make one of them recursive.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 100,
      "page_label": "83"
    }
  },
  {
    "text": "84 Chapter 5 Conditionals and logic",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 101,
      "page_label": "84"
    }
  },
  {
    "text": "Chapter 6\nValue methods\nSome of the methods we have used, like the Math methods, return values. But\nall the methods we have written so far have been void; that is, they don\u2019t\nreturn values. In this chapter, we\u2019ll write methods that return values, which\nwe call value methods.\n6.1 Return values\nWhen you invoke a void method, the invocation is usually on a line all by\nitself. For example, here is the countup method from Section 5.8:\npublic static void countup(int n) {\nif (n == 0) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 102,
      "page_label": "85"
    }
  },
  {
    "text": "public static void countup(int n) {\nif (n == 0) {\nSystem.out.println(\"Blastoff!\");\n} else {\ncountup(n - 1);\nSystem.out.println(n);\n}\n}\nAnd here is how it is invoked:\ncountup(3);\nSystem.out.println(\"Have a nice day.\");",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 102,
      "page_label": "85"
    }
  },
  {
    "text": "86 Chapter 6 Value methods\nOn the other hand, when you invoke a value method, you have to do something\nwith the return value. We usually assign it to a variable or use it as part of\nan expression, like this:\ndouble error = Math.abs(expected - actual);\ndouble height = radius * Math.sin(angle);\nCompared to void methods, value methods di\ufb00er in two ways:\n\u0088 They declare the type of the return value (the return type);\n\u0088 They use at least one return statement to provide a return value.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 103,
      "page_label": "86"
    }
  },
  {
    "text": "Here\u2019s an example: calculateArea takes a double as a parameter and returns\nthe area of a circle with that radius:\npublic static double calculateArea(double radius) {\ndouble result = Math.PI * radius * radius;\nreturn result;\n}\nAs usual, this method is public and static. But in the place where we are\nused to seeing void, we see double, which means that the return value from\nthis method is a double.\nThe last line is a new form of the return statement that includes a return",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 103,
      "page_label": "86"
    }
  },
  {
    "text": "value. This statement means, \u201creturn immediately from this method and use\nthe following expression as the return value.\u201d The expression you provide can\nbe arbitrarily complex, so we could have written this method more concisely:\npublic static double calculateArea(double radius) {\nreturn Math.PI * radius * radius;\n}\nOn the other hand, temporary variables like result often make debugging\neasier, especially when you are stepping through code using an interactive\ndebugger (see Appendix A.6).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 103,
      "page_label": "86"
    }
  },
  {
    "text": "debugger (see Appendix A.6).\nThe type of the expression in the return statement must match the return\ntype of the method. When you declare that the return type is double, you are\nmaking a promise that this method will eventually produce a double value. If",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 103,
      "page_label": "86"
    }
  },
  {
    "text": "6.1 Return values 87\nyou try to return with no expression, or an expression with the wrong type,\nthe compiler will generate an error.\nSometimes it is useful to have multiple return statements, for example, one in\neach branch of a conditional:\npublic static double absoluteValue(double x) {\nif (x < 0) {\nreturn -x;\n} else {\nreturn x;\n}\n}\nSince these return statements are in a conditional statement, only one will be\nexecuted. As soon as either of them executes, the method terminates without",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 104,
      "page_label": "87"
    }
  },
  {
    "text": "executing any more statements.\nCode that appears after a return statement (in the same block), or any place\nelse where it can never be executed, is called dead code. The compiler will\ngive you an \u201cunreachable statement\u201d error if part of your code is dead. For\nexample, this method contains dead code:\npublic static double absoluteValue(double x) {\nif (x < 0) {\nreturn -x;\n} else {\nreturn x;\n}\nSystem.out.println(\"This line is dead.\");\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 104,
      "page_label": "87"
    }
  },
  {
    "text": "}\nSystem.out.println(\"This line is dead.\");\n}\nIf you put return statements inside a conditional statement, you have to\nmake sure that every possible path through the program reaches a return\nstatement. The compiler will let you know if that\u2019s not the case. For example,\nthe following method is incomplete:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 104,
      "page_label": "87"
    }
  },
  {
    "text": "88 Chapter 6 Value methods\npublic static double absoluteValue(double x) {\nif (x < 0) {\nreturn -x;\n} else if (x > 0) {\nreturn x;\n}\n// syntax error\n}\nWhen x is 0, neither condition is true, so the method ends without hitting\na return statement. The error message in this case might be something like\n\u201cmissing return statement\u201d, which is confusing since there are already two of\nthem. But hopefully you will know what it means.\n6.2 Writing methods",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 105,
      "page_label": "88"
    }
  },
  {
    "text": "6.2 Writing methods\nBeginners often make the mistake of writing a lot of code before they try to\ncompile and run it. Then they spend way too much time debugging. A better\napproach is what we call incremental development. The key aspects of\nincremental development are:\n\u0088 Start with a working program and make small, incremental changes. At\nany point, if there is an error, you will know where to look.\n\u0088 Use variables to hold intermediate values so you can check them, either",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 105,
      "page_label": "88"
    }
  },
  {
    "text": "with print statements or by using a debugger.\n\u0088 Once the program is working, you can consolidate multiple statements\ninto compound expressions (but only if it does not make the program\nmore di\ufb03cult to read).\nAs an example, suppose you want to \ufb01nd the distance between two points,\ngiven by the coordinates ( x1,y1) and (x2,y2). By the usual de\ufb01nition:\ndistance=\n\u221a\n(x2 \u2212x1)2 + (y2 \u2212y1)2\nThe \ufb01rst step is to consider what a distance method should look like in Java.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 105,
      "page_label": "88"
    }
  },
  {
    "text": "In other words, what are the inputs (parameters) and what is the output",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 105,
      "page_label": "88"
    }
  },
  {
    "text": "6.2 Writing methods 89\n(return value)? In this case, the two points are the parameters, and it is\nnatural to represent them using four double values. The return value is the\ndistance, which should also have type double.\nAlready we can write an outline for the method, which is sometimes called a\nstub. The stub includes the method signature and a return statement:\npublic static double distance\n(double x1, double y1, double x2, double y2) {\nreturn 0.0;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 106,
      "page_label": "89"
    }
  },
  {
    "text": "return 0.0;\n}\nThe return statement is a placeholder that is necessary for the program to\ncompile. At this stage the program doesn\u2019t do anything useful, but it is good\nto compile it so we can \ufb01nd any syntax errors before we add more code.\nIt\u2019s usually a good idea to think about testingbefore you develop new methods;\ndoing so can help you \ufb01gure out how to implement them. To test the method,\nwe can invoke it from main using sample values:\ndouble dist = distance(1.0, 2.0, 4.0, 6.0);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 106,
      "page_label": "89"
    }
  },
  {
    "text": "double dist = distance(1.0, 2.0, 4.0, 6.0);\nWith these values, the horizontal distance is 3.0 and the vertical distance is\n4.0. So the result should be 5.0, the hypotenuse of a 3-4-5 triangle. When you\nare testing a method, it is helpful to know the right answer.\nOnce we have compiled the stub, we can start adding lines of code one at a\ntime. After each incremental change, we recompile and run the program. If\nthere is an error at any point, we have a good idea where to look: the last line",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 106,
      "page_label": "89"
    }
  },
  {
    "text": "we added.\nThe next step is to \ufb01nd the di\ufb00erences x2 \u2212x1 and y2 \u2212y1. We store those\nvalues in temporary variables named dx and dy.\npublic static double distance\n(double x1, double y1, double x2, double y2) {\ndouble dx = x2 - x1;\ndouble dy = y2 - y1;\nSystem.out.println(\"dx is \" + dx);\nSystem.out.println(\"dy is \" + dy);\nreturn 0.0;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 106,
      "page_label": "89"
    }
  },
  {
    "text": "90 Chapter 6 Value methods\nThe print statements allows us to check the intermediate values before pro-\nceeding. They should be 3.0 and 4.0. We will remove the print statements\nwhen the method is \ufb01nished. Code like that is called sca\ufb00olding, because it\nis helpful for building the program, but it is not part of the \ufb01nal product.\nThe next step is to square dx and dy. We could use the Math.pow method,\nbut it is simpler to multiply each term by itself.\npublic static double distance",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 107,
      "page_label": "90"
    }
  },
  {
    "text": "public static double distance\n(double x1, double y1, double x2, double y2) {\ndouble dx = x2 - x1;\ndouble dy = y2 - y1;\ndouble dsquared = dx * dx + dy * dy;\nSystem.out.println(\"dsquared is \" + dsquared);\nreturn 0.0;\n}\nAgain, you should compile and run the program at this stage and check the\nintermediate value, which should be 25.0. Finally, we can use Math.sqrt to\ncompute and return the result.\npublic static double distance\n(double x1, double y1, double x2, double y2) {\ndouble dx = x2 - x1;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 107,
      "page_label": "90"
    }
  },
  {
    "text": "double dx = x2 - x1;\ndouble dy = y2 - y1;\ndouble dsquared = dx * dx + dy * dy;\ndouble result = Math.sqrt(dsquared);\nreturn result;\n}\nAs you gain more experience programming, you might write and debug more\nthan one line at a time. Nevertheless, incremental development can save you\na lot of time.\n6.3 Method composition\nOnce you de\ufb01ne a new method, you can use it as part of an expression, or\nbuild new methods using existing methods. For example, suppose someone",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 107,
      "page_label": "90"
    }
  },
  {
    "text": "6.3 Method composition 91\ngave you two points, the center of the circle and a point on the perimeter,\nand asked for the area of the circle. Let\u2019s say the center point is stored in the\nvariables xc and yc, and the perimeter point is in xp and yp.\nThe \ufb01rst step is to \ufb01nd the radius of the circle, which is the distance between\nthe two points. Fortunately, we have a method that does just that (distance).\ndouble radius = distance(xc, yc, xp, yp);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 108,
      "page_label": "91"
    }
  },
  {
    "text": "double radius = distance(xc, yc, xp, yp);\nThe second step is to \ufb01nd the area of a circle with that radius. We have a\nmethod for that computation too ( calculateArea).\ndouble area = calculateArea(radius);\nreturn area;\nPutting everything together in a new method, we get:\npublic static double circleArea\n(double xc, double yc, double xp, double yp) {\ndouble radius = distance(xc, yc, xp, yp);\ndouble area = calculateArea(radius);\nreturn area;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 108,
      "page_label": "91"
    }
  },
  {
    "text": "return area;\n}\nThe temporary variables radius and area are useful for development and\ndebugging, but once the program is working we can make it more concise by\ncomposing the method calls:\npublic static double circleArea\n(double xc, double yc, double xp, double yp) {\nreturn calculateArea(distance(xc, yc, xp, yp));\n}\nThis example demonstrates a process calledfunctional decomposition; that\nis, breaking a complex computation into simple methods, testing the methods",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 108,
      "page_label": "91"
    }
  },
  {
    "text": "in isolation, and then composing the methods to perform the computation.\nThis process reduces debugging time and yields code that is more likely to be\ncorrect and easier to maintain.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 108,
      "page_label": "91"
    }
  },
  {
    "text": "92 Chapter 6 Value methods\n6.4 Overloading\nYou might have noticed thatcircleArea and calculateArea perform similar\nfunctions. They both \ufb01nd the area of a circle, but they take di\ufb00erent param-\neters. For calculateArea, we have to provide the radius; for circleArea we\nprovide two points.\nIf two methods do the same thing, it is natural to give them the same name.\nHaving more than one method with the same name is called overloading,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 109,
      "page_label": "92"
    }
  },
  {
    "text": "and it is legal in Java as long as each version takes di\ufb00erent parameters. So\nwe could rename circleArea to calculateArea:\npublic static double calculateArea\n(double xc, double yc, double xp, double yp) {\nreturn calculateArea(distance(xc, yc, xp, yp));\n}\nNote that this new calculateArea method is not recursive. When you invoke\nan overloaded method, Java knows which version you want by looking at the\narguments that you provide. If you write:\ndouble x = calculateArea(3.0);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 109,
      "page_label": "92"
    }
  },
  {
    "text": "double x = calculateArea(3.0);\nJava looks for a method named calculateArea that takes one double as an\nargument, and so it uses the \ufb01rst version, which interprets the argument as a\nradius. If you write:\ndouble y = calculateArea(1.0, 2.0, 4.0, 6.0);\nJava uses the second version of calculateArea, which interprets the argu-\nments as two points. In this example, the second version actually invokes the\n\ufb01rst version.\nMany Java methods are overloaded, meaning that there are di\ufb00erent versions",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 109,
      "page_label": "92"
    }
  },
  {
    "text": "that accept di\ufb00erent numbers or types of parameters. For example, there are\nversions of print and println that accept a single parameter of any data\ntype. In the Math class, there is a version of abs that works on doubles, and\nthere is also a version for ints.\nAlthough overloading is a useful feature, it should be used with caution. You\nmight get yourself nicely confused if you are trying to debug one version of a\nmethod while accidentally invoking a di\ufb00erent one.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 109,
      "page_label": "92"
    }
  },
  {
    "text": "6.5 Boolean methods 93\n6.5 Boolean methods\nMethods can return boolean values, just like any other type, which is often\nconvenient for hiding tests inside methods. For example:\npublic static boolean isSingleDigit(int x) {\nif (x > -10 && x < 10) {\nreturn true;\n} else {\nreturn false;\n}\n}\nThe name of this method is isSingleDigit. It is common to give boolean\nmethods names that sound like yes/no questions. Since the return type is\nboolean, the return statement has to provide a boolean expression.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 110,
      "page_label": "93"
    }
  },
  {
    "text": "The code itself is straightforward, although it is longer than it needs to be.\nRemember that the expressionx > -10 && x < 10 has type boolean, so there\nis nothing wrong with returning it directly (without the if statement):\npublic static boolean isSingleDigit(int x) {\nreturn x > -10 && x < 10;\n}\nIn main, you can invoke the method in the usual ways:\nSystem.out.println(isSingleDigit(2));\nboolean bigFlag = !isSingleDigit(17);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 110,
      "page_label": "93"
    }
  },
  {
    "text": "boolean bigFlag = !isSingleDigit(17);\nThe \ufb01rst line displays true because 2 is a single-digit number. The second\nline sets bigFlag to true, because 17 is not a single-digit number.\nConditional statements often invoke boolean methods and use the result as\nthe condition:\nif (isSingleDigit(z)) {\nSystem.out.println(\"z is small\");\n} else {\nSystem.out.println(\"z is big\");\n}\nExamples like this one almost read like English: \u201cIf is single digit z, print ...\nelse print ...\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 110,
      "page_label": "93"
    }
  },
  {
    "text": "94 Chapter 6 Value methods\n6.6 Javadoc tags\nIn Section 4.9, we discussed how to write documentation comments using /**.\nIt\u2019s generally a good idea to document each class and method, so that other\nprogrammers can understand what they do without having to read the code.\nTo organize the documentation into sections, Javadoc supports optional tags\nthat begin with the at sign ( @). For example, we can use @param and @return\nto provide additional information about parameters and return values.\n/**",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 111,
      "page_label": "94"
    }
  },
  {
    "text": "/**\n* Tests whether x is a single digit integer.\n*\n* @param x the integer to test\n* @return true if x has one digit, false otherwise\n*/\npublic static boolean isSingleDigit(int x) {\nFigure 6.1 shows part of the resulting HTML page generated by Javadoc.\nNotice the relationship between the source code and the documentation.\nisSingleDigit\np u b l i c  s t a t i c \u00a0 b o o l e a n \u00a0 i s S i n g l e D i g i t ( i n t \u00a0 x )\nTests\u00a0whether\u00a0x\u00a0is\u00a0a\u00a0single\u00a0digit\u00a0integer.\nParameters:\nx \u00a0\u00ad\u00a0the\u00a0integer\u00a0to\u00a0test",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 111,
      "page_label": "94"
    }
  },
  {
    "text": "Parameters:\nx \u00a0\u00ad\u00a0the\u00a0integer\u00a0to\u00a0test\nReturns:\ntrue\u00a0if\u00a0x\u00a0has\u00a0one\u00a0digit,\u00a0false\u00a0otherwise\nFigure 6.1: HTML documentation for isSingleDigit.\nMethods with multiple parameters should have separate @param tags that\ndescribe each one. Void methods should have no @return tag, since they do\nnot return a value.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 111,
      "page_label": "94"
    }
  },
  {
    "text": "6.7 More recursion 95\n6.7 More recursion\nNow that we have methods that return values, we have a Turing complete\nprogramming language. That means Java can compute anything computable,\nfor any reasonable de\ufb01nition of \u201ccomputable\u201d. This idea was developed by\nAlonzo Church and Alan Turing, so it is known as the Church-Turing thesis.\nTo give you an idea of what you can do with the tools we have learned, let\u2019s look\nat some methods for evaluating recursively-de\ufb01ned mathematical functions.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 112,
      "page_label": "95"
    }
  },
  {
    "text": "A recursive de\ufb01nition is similar to a circular de\ufb01nition, in the sense that the\nde\ufb01nition refers to the thing being de\ufb01ned.\nOf course, a truly circular de\ufb01nition is not very useful:\nrecursive: An adjective used to describe a method that is recursive.\nIf you saw that de\ufb01nition in the dictionary, you might be annoyed. But if you\nsearch for recursion on Google, it displays \u201cDid you mean: recursion\u201d as an\ninside joke.\nMany mathematical functions are de\ufb01ned recursively, because that is often the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 112,
      "page_label": "95"
    }
  },
  {
    "text": "simplest way. For example, the factorial of an integer n, which is written n!,\nis de\ufb01ned like this:\n0! = 1\nn! = n\u00b7(n\u22121)!\nDon\u2019t confuse the mathematical symbol !, which means factorial, with the\nJava operator !, which means not. This de\ufb01nition says that factorial(0) is\n1, and that factorial(n) is n * factorial(n - 1).\nSo factorial(3) is 3 * factorial(2); factorial(2) is 2 * factorial(1);\nfactorial(1) is 1 * factorial(0); and factorial(0) is 1. Putting it all",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 112,
      "page_label": "95"
    }
  },
  {
    "text": "together, we get 3 * 2 * 1 * 1, which is 6.\nIf you can formulate a recursive de\ufb01nition of something, you can easily write\na Java method to evaluate it. The \ufb01rst step is to decide what the parameters\nand return type are. Since factorial is de\ufb01ned for integers, the method takes\nan int as a parameter and returns an int. So here\u2019s a good starting place:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 112,
      "page_label": "95"
    }
  },
  {
    "text": "96 Chapter 6 Value methods\npublic static int factorial(int n) {\nreturn 0;\n}\nNext, we think about the base case. If the argument happens to be zero, we\nreturn 1.\npublic static int factorial(int n) {\nif (n == 0) {\nreturn 1;\n}\nreturn 0;\n}\nOtherwise, and this is the interesting part, we have to make a recursive call\nto \ufb01nd the factorial of n\u22121, and then multiply it by n.\npublic static int factorial(int n) {\nif (n == 0) {\nreturn 1;\n}\nint recurse = factorial(n - 1);\nint result = n * recurse;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 113,
      "page_label": "96"
    }
  },
  {
    "text": "int result = n * recurse;\nreturn result;\n}\nThe \ufb02ow of execution for this program is similar tocountdown from Section 5.8.\nIf we invoke factorial with the value 3:\nSince 3 is not zero, we take the second branch and calculate the\nfactorial of n\u22121...\nSince 2 is not zero, we take the second branch and cal-\nculate the factorial of n\u22121...\nSince 1 is not zero, we take the second branch\nand calculate the factorial of n\u22121...\nSince 0 is zero, we take the \ufb01rst branch\nand return the value 1 immediately.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 113,
      "page_label": "96"
    }
  },
  {
    "text": "and return the value 1 immediately.\nThe return value (1) gets multiplied byn, which\nis 1, and the result is returned.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 113,
      "page_label": "96"
    }
  },
  {
    "text": "6.8 Leap of faith 97\nThe return value (1) gets multiplied by n, which is 2,\nand the result is returned.\nThe return value (2) gets multiplied byn, which is 3, and the result,\n6, is returned to whatever invoked factorial(3).\nFigure 6.2 shows what the stack diagram looks like for this sequence of method\ninvocations. The return values are shown being passed back up the stack.\nNotice that recurse and result do not exist in the last frame, because when",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 114,
      "page_label": "97"
    }
  },
  {
    "text": "n == 0 the code that declares them does not execute.\nfactorial\nfactorial\nfactorial\nfactorial\nmain\n3\n2\n1\n0\n2\n1\n1\n6\n2\n1\nn\nn\nn\nn\nrecurse\nrecurse\nrecurse result\nresult\nresult\n1\n1\n2\n6\nFigure 6.2: Stack diagram for the factorial method.\n6.8 Leap of faith\nFollowing the \ufb02ow of execution is one way to read programs, but it can quickly\nbecome overwhelming. An alternative is the leap of faith : when you come\nto a method invocation, instead of following the \ufb02ow of execution, you assume",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 114,
      "page_label": "97"
    }
  },
  {
    "text": "that the method works correctly and returns the appropriate value.\nIn fact, you are already practicing a leap of faith when you use methods in the\nJava library. When you invoke Math.cos or System.out.println, you don\u2019t\nexamine the implementations of those methods. You just assume that they\nwork properly.\nYou should apply the same reasoning to your own methods. For example, in\nSection 6.5 we wrote a method called isSingleDigit that determines whether",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 114,
      "page_label": "97"
    }
  },
  {
    "text": "98 Chapter 6 Value methods\na number is between 0 and 9. Once we convince ourselves that this method\nis correct \u2013 by testing and examination of the code \u2013 we can use the method\nwithout ever looking at the implementation again.\nThe same is true of recursive methods. When you get to the recursive call,\ninstead of following the \ufb02ow of execution you should assume that the recursive\ninvocation works. For example, \u201cAssuming that I can \ufb01nd the factorial of",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 115,
      "page_label": "98"
    }
  },
  {
    "text": "n\u22121, can I compute the factorial of n?\u201d Yes you can, by multiplying by n.\nOf course, it is strange to assume that the method works correctly when you\nhave not \ufb01nished writing it, but that\u2019s why it\u2019s called a leap of faith!\n6.9 One more example\nAnother common recursively-de\ufb01ned mathematical function is the Fibonacci\nsequence, which has the following de\ufb01nition:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\u22121) + fibonacci(n\u22122)\nTranslated into Java, this function is:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 115,
      "page_label": "98"
    }
  },
  {
    "text": "Translated into Java, this function is:\npublic static int fibonacci(int n) {\nif (n == 1 || n == 2) {\nreturn 1;\n}\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n}\nIf you try to follow the \ufb02ow of execution here, even for small values of n, your\nhead will explode. But if we take a leap of faith and assume that the two\nrecursive invocations work correctly, it is clear that their sum is the result.\n6.10 Vocabulary\nvoid method: A method that does not return a value.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 115,
      "page_label": "98"
    }
  },
  {
    "text": "6.11 Exercises 99\nvalue method: A method that returns a value.\nreturn type: The type of value a method returns.\nreturn value: The value provided as the result of a method invocation.\ntemporary variable: A short-lived variable, often used for debugging.\ndead code: Part of a program that can never be executed, often because it\nappears after a return statement.\nincremental development: A process for creating programs by writing a\nfew lines at a time, compiling, and testing.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 116,
      "page_label": "99"
    }
  },
  {
    "text": "few lines at a time, compiling, and testing.\nstub: A placeholder for an incomplete method so that the class will compile.\nsca\ufb00olding: Code that is used during program development but is not part\nof the \ufb01nal version.\nfunctional decomposition: A process for breaking down a complex compu-\ntation into simple methods, then composing the methods to perform the\ncomputation.\noverload: To de\ufb01ne more than one method with the same name but di\ufb00erent\nparameters.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 116,
      "page_label": "99"
    }
  },
  {
    "text": "parameters.\ntag: A label that begins with an at sign (@) and is used by Javadoc to organize\ndocumentation into sections.\nTuring complete: A programming language that can implement any theo-\nretically possible algorithm.\nfactorial: The product of all the integers up to and including a given integer.\nleap of faith: A way to read recursive programs by assuming that the recur-\nsive call works, rather than following the \ufb02ow of execution.\n6.11 Exercises",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 116,
      "page_label": "99"
    }
  },
  {
    "text": "6.11 Exercises\nThe code for this chapter is in the ch06 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 116,
      "page_label": "99"
    }
  },
  {
    "text": "100 Chapter 6 Value methods\nIf you have not already read Appendix A.7, now might be a good time. It\ndescribes JUnit, a tool for e\ufb03ciently testing value methods.\nExercise 6.1 If you have a question about whether something is legal, and\nwhat happens if it is not, a good way to \ufb01nd out is to ask the compiler. Answer\nthe following questions by trying them out.\n1. What happens if you invoke a value method and don\u2019t do anything with",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 117,
      "page_label": "100"
    }
  },
  {
    "text": "the result; that is, if you don\u2019t assign it to a variable or use it as part of\na larger expression?\n2. What happens if you use a void method as part of an expression? For\nexample, try System.out.println(\"boo!\") + 7;\nExercise 6.2 Write a method named isDivisible that takes two integers,\nn and m, and that returns true if n is divisible by m, and false otherwise.\nExercise 6.3 If you are given three sticks, you may or may not be able to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 117,
      "page_label": "100"
    }
  },
  {
    "text": "arrange them in a triangle. For example, if one of the sticks is 12 inches long\nand the other two are one inch long, you will not be able to get the short sticks\nto meet in the middle. For any three lengths, there is a simple test to see if it\nis possible to form a triangle:\nIf any of the three lengths is greater than the sum of the other two,\nyou cannot form a triangle.\nWrite a method named isTriangle that takes three integers as arguments",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 117,
      "page_label": "100"
    }
  },
  {
    "text": "and returns either true or false, depending on whether you can or cannot\nform a triangle from sticks with the given lengths. The point of this exercise\nis to use conditional statements to write a value method.\nExercise 6.4 Many computations can be expressed more concisely using the\n\u201cmultadd\u201d operation, which takes three operands and computes a * b + c.\nSome processors even provide a hardware implementation of this operation for\n\ufb02oating-point numbers.\n1. Create a new program called Multadd.java.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 117,
      "page_label": "100"
    }
  },
  {
    "text": "1. Create a new program called Multadd.java.\n2. Write a method called multadd that takes three doubles as parameters\nand that returns a * b + c.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 117,
      "page_label": "100"
    }
  },
  {
    "text": "6.11 Exercises 101\n3. Write a main method that tests multadd by invoking it with a few simple\nparameters, like 1.0, 2.0, 3.0.\n4. Also in main, use multadd to compute the following values:\nsin \u03c0\n4 +\ncos \u03c0\n4\n2\nlog 10 + log 20\n5. Write a method called expSum that takes a double as a parameter and\nthat uses multadd to calculate:\nxe\u2212x +\n\u221a\n1 \u2212e\u2212x\nHint: The method for raising e to a power is Math.exp.\nIn the last part of this exercise, you need to write a method that invokes",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 118,
      "page_label": "101"
    }
  },
  {
    "text": "another method you wrote. Whenever you do that, it is a good idea to test\nthe \ufb01rst method carefully before working on the second. Otherwise, you might\n\ufb01nd yourself debugging two methods at the same time, which can be di\ufb03cult.\nOne of the purposes of this exercise is to practice pattern-matching: the ability\nto recognize a speci\ufb01c problem as an instance of a general category of problems.\nExercise 6.5 What is the output of the following program?\npublic static void main(String[] args) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 118,
      "page_label": "101"
    }
  },
  {
    "text": "public static void main(String[] args) {\nboolean flag1 = isHoopy(202);\nboolean flag2 = isFrabjuous(202);\nSystem.out.println(flag1);\nSystem.out.println(flag2);\nif (flag1 && flag2) {\nSystem.out.println(\"ping!\");\n}\nif (flag1 || flag2) {\nSystem.out.println(\"pong!\");\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 118,
      "page_label": "101"
    }
  },
  {
    "text": "102 Chapter 6 Value methods\npublic static boolean isHoopy(int x) {\nboolean hoopyFlag;\nif (x % 2 == 0) {\nhoopyFlag = true;\n} else {\nhoopyFlag = false;\n}\nreturn hoopyFlag;\n}\npublic static boolean isFrabjuous(int x) {\nboolean frabjuousFlag;\nif (x > 0) {\nfrabjuousFlag = true;\n} else {\nfrabjuousFlag = false;\n}\nreturn frabjuousFlag;\n}\nThe purpose of this exercise is to make sure you understand logical operators\nand the \ufb02ow of execution through value methods.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 119,
      "page_label": "102"
    }
  },
  {
    "text": "and the \ufb02ow of execution through value methods.\nExercise 6.6 In this exercise, you will use a stack diagram to understand\nthe execution of the following recursive program.\npublic static void main(String[] args) {\nSystem.out.println(prod(1, 4));\n}\npublic static int prod(int m, int n) {\nif (m == n) {\nreturn n;\n} else {\nint recurse = prod(m, n - 1);\nint result = n * recurse;\nreturn result;\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 119,
      "page_label": "102"
    }
  },
  {
    "text": "6.11 Exercises 103\n1. Draw a stack diagram showing the state of the program just before the\nlast invocation of prod completes.\n2. What is the output of this program? (Try to answer this question on\npaper \ufb01rst, then run the code to check your answer.)\n3. Explain in a few words what prod does (without getting into the details\nof how it works).\n4. Rewrite prod without the temporary variables recurse and result.\nHint: You only need one line for the else branch.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 120,
      "page_label": "103"
    }
  },
  {
    "text": "Hint: You only need one line for the else branch.\nExercise 6.7 Write a recursive method named oddSum that takes a positive\nodd integer n and returns the sum of odd integers from 1 to n. Start with\na base case, and use temporary variables to debug your solution. You might\n\ufb01nd it helpful to print the value of n each time oddSum is invoked.\nExercise 6.8 The goal of this exercise is to translate a recursive de\ufb01nition\ninto a Java method. The Ackermann function is de\ufb01ned for non-negative",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 120,
      "page_label": "103"
    }
  },
  {
    "text": "integers as follows:\nA(m,n) =\n\uf8f1\n\uf8f4\uf8f2\n\uf8f4\uf8f3\nn+ 1 if m= 0\nA(m\u22121,1) if m> 0 and n= 0\nA(m\u22121,A(m,n \u22121)) if m> 0 and n> 0\nWrite a method called ack that takes two ints as parameters and that com-\nputes and returns the value of the Ackermann function.\nTest your implementation of Ackermann by invoking it frommain and display-\ning the return value. Note the return value gets very big very quickly. You\nshould try it only for small values of m and n (not bigger than 3).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 120,
      "page_label": "103"
    }
  },
  {
    "text": "Exercise 6.9 Write a recursive method called power that takes a double x\nand an integer n and returns xn.\nHint: A recursive de\ufb01nition of this operation is xn = x\u00b7xn\u22121. Also, remember\nthat anything raised to the zeroth power is 1.\nOptional challenge: you can make this method more e\ufb03cient, when n is even,\nusing xn =\n(\nxn/2)2\n.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 120,
      "page_label": "103"
    }
  },
  {
    "text": "104 Chapter 6 Value methods",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 121,
      "page_label": "104"
    }
  },
  {
    "text": "Chapter 7\nLoops\nComputers are often used to automate repetitive tasks. Repeating tasks with-\nout making errors is something that computers do well and people do poorly.\nRunning the same code multiple times is callediteration. We have seen meth-\nods, like countdown and factorial, that use recursion to iterate. Although\nrecursion is elegant and powerful, it takes some getting used to. Java pro-\nvides language features that make iteration much easier: the while and for\nstatements.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 122,
      "page_label": "105"
    }
  },
  {
    "text": "statements.\n7.1 The while statement\nUsing a while statement, we can rewrite countdown like this:\npublic static void countdown(int n) {\nwhile (n > 0) {\nSystem.out.println(n);\nn = n - 1;\n}\nSystem.out.println(\"Blastoff!\");\n}\nYou can almost read the while statement like English: \u201cWhile n is greater\nthan zero, print the value of n and then reduce the value of n by 1. When you\nget to zero, print Blasto\ufb00!\u201d",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 122,
      "page_label": "105"
    }
  },
  {
    "text": "106 Chapter 7 Loops\nThe expression in parentheses is called the condition. The statements in braces\nare called the body. The \ufb02ow of execution for a while statement is:\n1. Evaluate the condition, yielding true or false.\n2. If the condition is false, skip the body and go to the next statement.\n3. If the condition is true, execute the body and go back to step 1.\nThis type of \ufb02ow is called a loop, because the last step loops back around to\nthe \ufb01rst.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 123,
      "page_label": "106"
    }
  },
  {
    "text": "the \ufb01rst.\nThe body of the loop should change the value of one or more variables so that,\neventually, the condition becomes false and the loop terminates. Otherwise\nthe loop will repeat forever, which is called anin\ufb01nite loop. An endless source\nof amusement for computer scientists is the observation that the directions on\nshampoo, \u201cLather, rinse, repeat,\u201d are an in\ufb01nite loop.\nIn the case of countdown, we can prove that the loop terminates when n is",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 123,
      "page_label": "106"
    }
  },
  {
    "text": "positive. But in general, it is not so easy to tell whether a loop terminates. For\nexample, this loop continues until n is 1 (which makes the condition false):\npublic static void sequence(int n) {\nwhile (n != 1) {\nSystem.out.println(n);\nif (n % 2 == 0) { // n is even\nn = n / 2;\n} else { // n is odd\nn = n * 3 + 1;\n}\n}\n}\nEach time through the loop, the program displays the value of n and then\nchecks whether it is even or odd. If it is even, the value of n is divided by two.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 123,
      "page_label": "106"
    }
  },
  {
    "text": "If it is odd, the value is replaced by 3 n+ 1. For example, if the starting value\n(the argument passed to sequence) is 3, the resulting sequence is 3, 10, 5, 16,\n8, 4, 2, 1.\nSince n sometimes increases and sometimes decreases, there is no obvious proof\nthat n will ever reach 1 and that the program will ever terminate. For some",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 123,
      "page_label": "106"
    }
  },
  {
    "text": "7.2 Generating tables 107\nvalues of n, we can prove that it terminates. For example, if the starting value\nis a power of two, then the value of n will be even every time through the loop\nuntil we get to 1. The previous example ends with such a sequence, starting\nwhen n is 16.\nThe hard question is whether this program terminates for all values of n. So\nfar, no one has been able to prove it or disprove it! For more information, see\nhttps://en.wikipedia.org/wiki/Collatz_conjecture.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 124,
      "page_label": "107"
    }
  },
  {
    "text": "https://en.wikipedia.org/wiki/Collatz_conjecture.\n7.2 Generating tables\nLoops are good for generating and displaying tabular data. Before computers\nwere readily available, people had to calculate logarithms, sines and cosines,\nand other common mathematical functions by hand. To make that easier,\nthere were books of tables where you could look up values of various functions.\nCreating these tables by hand was slow and boring, and the results were often\nfull of errors.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 124,
      "page_label": "107"
    }
  },
  {
    "text": "full of errors.\nWhen computers appeared on the scene, one of the initial reactions was: \u201cThis\nis great! We can use a computer to generate the tables, so there will be no\nerrors.\u201d That turned out to be true (mostly), but shortsighted. Not much\nlater, computers were so pervasive that printed tables became obsolete.\nEven so, for some operations, computers use tables of values to get an approx-\nimate answer, and then perform computations to improve the approximation.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 124,
      "page_label": "107"
    }
  },
  {
    "text": "In some cases, there have been errors in the underlying tables, most famously\nin the table the original Intel Pentium used to perform \ufb02oating-point division\n(see https://en.wikipedia.org/wiki/Pentium_FDIV_bug).\nAlthough a \u201clog table\u201d is not as useful as it once was, it still makes a good\nexample of iteration. The following loop displays a table with a sequence of\nvalues in the left column and their logarithms in the right column:\nint i = 1;\nwhile (i < 10) {\ndouble x = i;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 124,
      "page_label": "107"
    }
  },
  {
    "text": "int i = 1;\nwhile (i < 10) {\ndouble x = i;\nSystem.out.println(x + \" \" + Math.log(x));\ni = i + 1;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 124,
      "page_label": "107"
    }
  },
  {
    "text": "108 Chapter 7 Loops\nThe output of this program is:\n1.0 0.0\n2.0 0.6931471805599453\n3.0 1.0986122886681098\n4.0 1.3862943611198906\n5.0 1.6094379124341003\n6.0 1.791759469228055\n7.0 1.9459101490553132\n8.0 2.0794415416798357\n9.0 2.1972245773362196\nMath.log computes natural logarithms, that is, logarithms base e. For com-\nputer science applications, we often want logarithms with respect to base 2.\nTo compute them, we can apply this equation:\nlog2 x= logex\nloge2\nWe can modify the loop as follows:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 125,
      "page_label": "108"
    }
  },
  {
    "text": "loge2\nWe can modify the loop as follows:\nint i = 1;\nwhile (i < 10) {\ndouble x = i;\nSystem.out.println(x + \" \" + Math.log(x) / Math.log(2));\ni = i + 1;\n}\nAnd here are the results:\n1.0 0.0\n2.0 1.0\n3.0 1.5849625007211563\n4.0 2.0\n5.0 2.321928094887362\n6.0 2.584962500721156\n7.0 2.807354922057604\n8.0 3.0\n9.0 3.1699250014423126\nEach time through the loop, we add one to x, so the result is an arithmetic\nsequence. If we multiply x by something instead, we get a geometric sequence:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 125,
      "page_label": "108"
    }
  },
  {
    "text": "7.3 Encapsulation and generalization 109\nfinal double LOG2 = Math.log(2);\nint i = 1;\nwhile (i < 100) {\ndouble x = i;\nSystem.out.println(x + \" \" + Math.log(x) / LOG2);\ni = i * 2;\n}\nThe \ufb01rst line stores Math.log(2) in a final variable to avoid computing that\nvalue over and over again. The last line multiplies x by 2. The result is:\n1.0 0.0\n2.0 1.0\n4.0 2.0\n8.0 3.0\n16.0 4.0\n32.0 5.0\n64.0 6.0\nThis table shows the powers of two and their logarithms, base 2. Log tables",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 126,
      "page_label": "109"
    }
  },
  {
    "text": "may not be useful anymore, but for computer scientists, knowing the powers\nof two helps a lot!\n7.3 Encapsulation and generalization\nIn Section 6.2, we presented a way of writing programs called incremental\ndevelopment. In this section we present another program development\nprocess called \u201cencapsulation and generalization\u201d. The steps are:\n1. Write a few lines of code in main or another method, and test them.\n2. When they are working, wrap them in a new method, and test again.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 126,
      "page_label": "109"
    }
  },
  {
    "text": "3. If it\u2019s appropriate, replace literal values with variables and parameters.\nThe second step is called encapsulation; the third step is generalization.\nTo demonstrate this process, we\u2019ll develop methods that display multiplication\ntables. Here is a loop that displays the multiples of two, all on one line:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 126,
      "page_label": "109"
    }
  },
  {
    "text": "110 Chapter 7 Loops\nint i = 1;\nwhile (i <= 6) {\nSystem.out.printf(\"%4d\", 2 * i);\ni = i + 1;\n}\nSystem.out.println();\nThe \ufb01rst line initializes a variable named i, which is going to act as a loop\nvariable: as the loop executes, the value of i increases from 1 to 6; when i is\n7, the loop terminates.\nEach time through the loop, we display the value 2 * i padded with spaces\nso it\u2019s four characters wide. Since we use System.out.printf, the output\nappears on a single line.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 127,
      "page_label": "110"
    }
  },
  {
    "text": "appears on a single line.\nAfter the loop, we call println to print a newline and complete the line.\nRemember that in some environments, none of the output is displayed until\nthe line is complete.\nThe output of the code so far is:\n2 4 6 8 10 12\nThe next step is to \u201cencapsulate\u201d this code in a new method. Here\u2019s what it\nlooks like:\npublic static void printRow() {\nint i = 1;\nwhile (i <= 6) {\nSystem.out.printf(\"%4d\", 2 * i);\ni = i + 1;\n}\nSystem.out.println();\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 127,
      "page_label": "110"
    }
  },
  {
    "text": "i = i + 1;\n}\nSystem.out.println();\n}\nNext we replace the constant value, 2, with a parameter, n. This step is called\n\u201cgeneralization\u201d because it makes the method more general (less speci\ufb01c).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 127,
      "page_label": "110"
    }
  },
  {
    "text": "7.3 Encapsulation and generalization 111\npublic static void printRow(int n) {\nint i = 1;\nwhile (i <= 6) {\nSystem.out.printf(\"%4d\", n * i);\ni = i + 1;\n}\nSystem.out.println();\n}\nInvoking this method with the argument 2 yields the same output as before.\nWith the argument 3, the output is:\n3 6 9 12 15 18\nAnd with argument 4, the output is:\n4 8 12 16 20 24\nBy now you can probably guess how we are going to display a multiplication",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 128,
      "page_label": "111"
    }
  },
  {
    "text": "table: we\u2019ll invoke printRow repeatedly with di\ufb00erent arguments. In fact,\nwe\u2019ll use another loop to iterate through the rows.\nint i = 1;\nwhile (i <= 6) {\nprintRow(i);\ni = i + 1;\n}\nAnd the output looks like this:\n1 2 3 4 5 6\n2 4 6 8 10 12\n3 6 9 12 15 18\n4 8 12 16 20 24\n5 10 15 20 25 30\n6 12 18 24 30 36\nThe format speci\ufb01er %4d in printRow causes the output to align vertically,\nregardless of whether the numbers are one or two digits.\nFinally, we encapsulate the second loop in a method:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 128,
      "page_label": "111"
    }
  },
  {
    "text": "112 Chapter 7 Loops\npublic static void printTable() {\nint i = 1;\nwhile (i <= 6) {\nprintRow(i);\ni = i + 1;\n}\n}\nOne of the challenges of programming, especially for beginners, is \ufb01guring out\nhow to divide up a program into methods. The process of encapsulation and\ngeneralization allows you to design as you go along.\n7.4 More generalization\nThe previous version of printTable always displays six rows. We can gener-\nalize it by replacing the literal 6 with a parameter:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 129,
      "page_label": "112"
    }
  },
  {
    "text": "public static void printTable(int rows) {\nint i = 1;\nwhile (i <= rows) {\nprintRow(i);\ni = i + 1;\n}\n}\nHere is the output with the argument 7:\n1 2 3 4 5 6\n2 4 6 8 10 12\n3 6 9 12 15 18\n4 8 12 16 20 24\n5 10 15 20 25 30\n6 12 18 24 30 36\n7 14 21 28 35 42\nThat\u2019s better, but it still has a problem: it always displays the same number\nof columns. We can generalize more by adding a parameter to printRow:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 129,
      "page_label": "112"
    }
  },
  {
    "text": "7.4 More generalization 113\npublic static void printRow(int n, int cols) {\nint i = 1;\nwhile (i <= cols) {\nSystem.out.printf(\"%4d\", n * i);\ni = i + 1;\n}\nSystem.out.println();\n}\nNow printRow takes two parameters: n is the value whose multiples should be\ndisplayed, and cols is the number of columns. Since we added a parameter to\nprintRow, we also have to change the line in printTable where it is invoked:\npublic static void printTable(int rows) {\nint i = 1;\nwhile (i <= rows) {\nprintRow(i, rows);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 130,
      "page_label": "113"
    }
  },
  {
    "text": "int i = 1;\nwhile (i <= rows) {\nprintRow(i, rows);\ni = i + 1;\n}\n}\nWhen this line executes, it evaluates rows and passes the value, which is 7 in\nthis example, as an argument. In printRow, this value is assigned to cols. As\na result, the number of columns equals the number of rows, so we get a square\n7x7 table:\n1 2 3 4 5 6 7\n2 4 6 8 10 12 14\n3 6 9 12 15 18 21\n4 8 12 16 20 24 28\n5 10 15 20 25 30 35\n6 12 18 24 30 36 42\n7 14 21 28 35 42 49",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 130,
      "page_label": "113"
    }
  },
  {
    "text": "6 12 18 24 30 36 42\n7 14 21 28 35 42 49\nWhen you generalize a method appropriately, you often \ufb01nd that it has capa-\nbilities you did not plan. For example, you might notice that the multiplication\ntable is symmetric; since ab = ba, all the entries in the table appear twice.\nYou could save ink by printing half of the table, and you would only have to\nchange one line of printTable:\nprintRow(i, i);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 130,
      "page_label": "113"
    }
  },
  {
    "text": "114 Chapter 7 Loops\nIn words, the length of each row is the same as its row number. The result is\na triangular multiplication table.\n1\n2 4\n3 6 9\n4 8 12 16\n5 10 15 20 25\n6 12 18 24 30 36\n7 14 21 28 35 42 49\nGeneralization makes code more versatile, more likely to be reused, and some-\ntimes easier to write.\n7.5 The for statement\nThe loops we have written so far have several elements in common. They\nstart by initializing a variable, they have a condition that depends on that",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 131,
      "page_label": "114"
    }
  },
  {
    "text": "variable, and inside the loop they do something to update that variable. This\ntype of loop is so common that there is another statement, the for loop, that\nexpresses it more concisely.\nFor example, we could rewrite printTable like this:\npublic static void printTable(int rows) {\nfor (int i = 1; i <= rows; i = i + 1) {\nprintRow(i, rows);\n}\n}\nfor loops have three components in parentheses, separated by semicolons: the\ninitializer, the condition, and the update.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 131,
      "page_label": "114"
    }
  },
  {
    "text": "initializer, the condition, and the update.\n1. The initializer runs once at the very beginning of the loop.\n2. The condition is checked each time through the loop. If it is false, the\nloop ends. Otherwise, the body of the loop is executed (again).\n3. At the end of each iteration, the update runs, and we go back to step 2.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 131,
      "page_label": "114"
    }
  },
  {
    "text": "7.6 The do-while loop 115\nThe for loop is often easier to read because it puts all the loop-related state-\nments at the top of the loop.\nThere is one di\ufb00erence between for loops and while loops: if you declare a\nvariable in the initializer, it only exists inside the for loop. For example, here\nis a version of printRow that uses a for loop:\npublic static void printRow(int n, int cols) {\nfor (int i = 1; i <= cols; i = i + 1) {\nSystem.out.printf(\"%4d\", n * i);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 132,
      "page_label": "115"
    }
  },
  {
    "text": "System.out.printf(\"%4d\", n * i);\n}\nSystem.out.println(i); // compiler error\n}\nThe last line tries to display i (for no reason other than demonstration) but\nit won\u2019t work. If you need to use a loop variable outside the loop, you have to\ndeclare it outside the loop, like this:\npublic static void printRow(int n, int cols) {\nint i;\nfor (i = 1; i <= cols; i = i + 1) {\nSystem.out.printf(\"%4d\", n * i);\n}\nSystem.out.println(i);\n}\nAssignments like i = i + 1 don\u2019t often appear in for loops, because Java",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 132,
      "page_label": "115"
    }
  },
  {
    "text": "provides a more concise way to add and subtract by one. Speci\ufb01cally, ++ is\nthe increment operator; it has the same e\ufb00ect as i = i + 1. And -- is the\ndecrement operator; it has the same e\ufb00ect as i = i - 1.\nIf you want to increment or decrement a variable by an amount other than 1,\nyou can use += and -=. For example, i += 2 increments i by 2.\n7.6 The do-while loop\nThe while and for statements are pretest loops ; that is, they test the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 132,
      "page_label": "115"
    }
  },
  {
    "text": "condition \ufb01rst and at the beginning of each pass through the loop.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 132,
      "page_label": "115"
    }
  },
  {
    "text": "116 Chapter 7 Loops\nJava also provides a posttest loop : the do-while statement. This type of\nloop is useful when you need to run the body of the loop at least once.\nFor example, in Section 5.7 we used the return statement to avoid reading\ninvalid input from the user. We can use a do-while loop to keep reading input\nuntil it\u2019s valid:\nScanner in = new Scanner(System.in);\nboolean okay;\ndo {\nSystem.out.print(\"Enter a number: \");\nif (in.hasNextDouble()) {\nokay = true;\n} else {\nokay = false;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 133,
      "page_label": "116"
    }
  },
  {
    "text": "okay = true;\n} else {\nokay = false;\nString word = in.next();\nSystem.err.println(word + \" is not a number\");\n}\n} while (!okay);\ndouble x = in.nextDouble();\nAlthough this code looks complicated, it is essentially only three steps:\n1. Display a prompt.\n2. Check the input; if invalid, display an error and start over.\n3. Read the input.\nThe code uses a \ufb02ag variable, okay, to indicate whether we need to repeat the\nloop body. If hasNextDouble() returns false, we consume the invalid input",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 133,
      "page_label": "116"
    }
  },
  {
    "text": "by calling next(). We then display an error message via System.err. The\nloop terminates when hasNextDouble() return true.\n7.7 Break and continue\nSometimes neither a pretest nor a posttest loop will provide exactly what you\nneed. In the previous example, the \u201ctest\u201d needed to happen in the middle of\nthe loop. As a result, we used a \ufb02ag variable and a nested if-else statement.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 133,
      "page_label": "116"
    }
  },
  {
    "text": "7.7 Break and continue 117\nA simpler way to solve this problem is to use a break statement. When a\nprogram reaches a break statement, it exits the current loop.\nScanner in = new Scanner(System.in);\nwhile (true) {\nSystem.out.print(\"Enter a number: \");\nif (in.hasNextDouble()) {\nbreak;\n}\nString word = in.next();\nSystem.err.println(word + \" is not a number\");\n}\ndouble x = in.nextDouble();\nUsing true as a conditional in a while loop is an idiom that means \u201cloop",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 134,
      "page_label": "117"
    }
  },
  {
    "text": "forever\u201d, or in this case \u201cloop until you get to a break statement.\u201d\nIn addition to the break statement, which exits the loop, Java provides a\ncontinue statement that moves on to the next iteration. For example, the\nfollowing code reads integers from the keyboard and computes a running total.\nThe continue statement causes the program to skip over any negative values.\nScanner in = new Scanner(System.in);\nint x = -1;\nint sum = 0;\nwhile (x != 0) {\nx = in.nextInt();\nif (x <= 0) {\ncontinue;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 134,
      "page_label": "117"
    }
  },
  {
    "text": "x = in.nextInt();\nif (x <= 0) {\ncontinue;\n}\nSystem.out.println(\"Adding \" + x);\nsum += x;\n}\nAlthough break and continue statements give you more control of the loop\nexecution, they can make code di\ufb03cult to understand and debug. Use them\nsparingly.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 134,
      "page_label": "117"
    }
  },
  {
    "text": "118 Chapter 7 Loops\n7.8 Vocabulary\niteration: Executing a sequence of statements repeatedly.\nloop: A statement that executes a sequence of statements repeatedly.\nloop body: The statements inside the loop.\nin\ufb01nite loop: A loop whose condition is always true.\nprogram development: A process for writing programs. So far we have seen\n\u201cincremental development\u201d and \u201cencapsulation and generalization\u201d.\nencapsulate: To wrap a sequence of statements in a method.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 135,
      "page_label": "118"
    }
  },
  {
    "text": "generalize: To replace something unnecessarily speci\ufb01c (like a constant value)\nwith something appropriately general (like a variable or parameter).\nloop variable: A variable that is initialized, tested, and updated in order to\ncontrol a loop.\nincrement: Increase the value of a variable.\ndecrement: Decrease the value of a variable.\npretest loop: A loop that tests the condition before each iteration.\nposttest loop: A loop that tests the condition after each iteration.\n7.9 Exercises",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 135,
      "page_label": "118"
    }
  },
  {
    "text": "7.9 Exercises\nThe code for this chapter is in the ch07 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nIf you have not already read Appendix A.5, now might be a good time. It\ndescribes Checkstyle, a tool that analyzes many aspects of your source code.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 135,
      "page_label": "118"
    }
  },
  {
    "text": "7.9 Exercises 119\nExercise 7.1 Consider the following methods:\npublic static void main(String[] args) {\nloop(10);\n}\npublic static void loop(int n) {\nint i = n;\nwhile (i > 1) {\nSystem.out.println(i);\nif (i % 2 == 0) {\ni = i / 2;\n} else {\ni = i + 1;\n}\n}\n}\n1. Draw a table that shows the value of the variables i and n during the\nexecution of loop. The table should contain one column for each variable\nand one line for each iteration.\n2. What is the output of this program?",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 136,
      "page_label": "119"
    }
  },
  {
    "text": "2. What is the output of this program?\n3. Can you prove that this loop terminates for any positive value of n?\nExercise 7.2 Let\u2019s say you are given a number, a, and you want to \ufb01nd\nits square root. One way to do that is to start with a rough guess about the\nanswer, x0, and then improve the guess using this formula:\nx1 = (x0 + a/x0)/2\nFor example, if we want to \ufb01nd the square root of 9, and we start with x0 = 6,\nthen x1 = (6 + 9/6)/2 = 3.75, which is closer. We can repeat the procedure,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 136,
      "page_label": "119"
    }
  },
  {
    "text": "using x1 to calculate x2, and so on. In this case, x2 = 3.075 and x3 = 3.00091.\nSo it converges quickly on the correct answer.\nWrite a method called squareRoot that takes a double and returns an ap-\nproximation of the square root of the parameter, using this technique. You\nshould not use Math.sqrt.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 136,
      "page_label": "119"
    }
  },
  {
    "text": "120 Chapter 7 Loops\nAs your initial guess, you should use a/2. Your method should iterate until\nit gets two consecutive estimates that di\ufb00er by less than 0.0001. You can use\nMath.abs to calculate the absolute value of the di\ufb00erence.\nExercise 7.3 In Exercise 6.9 we wrote a recursive version of power, which\ntakes a double x and an integer n and returns xn. Now write an iterative\nmethod to perform the same calculation.\nExercise 7.4 Section 6.7 presents a recursive method that computes the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 137,
      "page_label": "120"
    }
  },
  {
    "text": "factorial function. Write an iterative version of factorial.\nExercise 7.5 One way to calculate ex is to use the in\ufb01nite series expansion:\nex = 1 + x+ x2/2! + x3/3! + x4/4! + ...\nThe ith term in the series is xi/i!.\n1. Write a method called myexp that takes x and n as parameters and\nestimates ex by adding the \ufb01rst n terms of this series. You can use the\nfactorial method from Section 6.7 or your iterative version from the\nprevious exercise.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 137,
      "page_label": "120"
    }
  },
  {
    "text": "previous exercise.\n2. You can make this method more e\ufb03cient if you realize that the numerator\nof each term is the same as its predecessor multiplied by x, and the\ndenominator is the same as its predecessor multiplied by i. Use this\nobservation to eliminate the use of Math.pow and factorial, and check\nthat you get the same result.\n3. Write a method called check that takes a parameter, x, and displays x,\nmyexp(x), and Math.exp(x). The output should look something like:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 137,
      "page_label": "120"
    }
  },
  {
    "text": "1.0 2.708333333333333 2.718281828459045\nYou can use the escape sequence \"\\t\" to put a tab character between\ncolumns of a table.\n4. Vary the number of terms in the series (the second argument that check\nsends to myexp) and see the e\ufb00ect on the accuracy of the result. Adjust\nthis value until the estimated value agrees with the correct answer when\nx is 1.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 137,
      "page_label": "120"
    }
  },
  {
    "text": "7.9 Exercises 121\n5. Write a loop in main that invokescheck with the values 0.1, 1.0, 10.0, and\n100.0. How does the accuracy of the result vary as x varies? Compare\nthe number of digits of agreement rather than the di\ufb00erence between the\nactual and estimated values.\n6. Add a loop in main that checks myexp with the values -0.1, -1.0, -10.0,\nand -100.0. Comment on the accuracy.\nExercise 7.6 One way to evaluate exp( \u2212x2) is to use the in\ufb01nite series\nexpansion:\nexp(\u2212x2) = 1 \u2212x2 + x4/2 \u2212x6/6 + ...",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 138,
      "page_label": "121"
    }
  },
  {
    "text": "expansion:\nexp(\u2212x2) = 1 \u2212x2 + x4/2 \u2212x6/6 + ...\nThe ith term in this series is ( \u22121)ix2i/i!. Write a method named gauss that\ntakes x and n as arguments and returns the sum of the \ufb01rst n terms of the\nseries. You should not use factorial or pow.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 138,
      "page_label": "121"
    }
  },
  {
    "text": "122 Chapter 7 Loops",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 139,
      "page_label": "122"
    }
  },
  {
    "text": "Chapter 8\nArrays\nUp to this point, the only variables we have used were for individual values\nsuch as numbers or strings. In this chapter, we\u2019ll learn how to store multiple\nvalues of the same type using a single variable. This language feature will\nenable you to write programs that manipulate larger amounts of data.\n8.1 Creating arrays\nAn array is a sequence of values; the values in the array are called elements.\nYou can make an array of ints, doubles, or any other type, but all the values",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 140,
      "page_label": "123"
    }
  },
  {
    "text": "in an array must have the same type.\nTo create an array, you have to declare a variable with an array type and then\ncreate the array itself. Array types look like other Java types, except they are\nfollowed by square brackets ([]). For example, the following lines declare that\ncounts is an \u201cinteger array\u201d and values is a \u201cdouble array\u201d:\nint[] counts;\ndouble[] values;\nTo create the array itself, you have to use the new operator, which we \ufb01rst saw\nin Section 3.2:\ncounts = new int[4];",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 140,
      "page_label": "123"
    }
  },
  {
    "text": "in Section 3.2:\ncounts = new int[4];\nvalues = new double[size];",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 140,
      "page_label": "123"
    }
  },
  {
    "text": "124 Chapter 8 Arrays\nThe \ufb01rst assignment makescount refer to an array of four integers. The second\nmakes values refer to an array of double, where the number of elements in\nvalues depends on the value of size.\nOf course, you can also declare the variable and create the array in a single\nline of code:\nint[] counts = new int[4];\ndouble[] values = new double[size];\nYou can use any integer expression for the size of an array, as long as the value",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 141,
      "page_label": "124"
    }
  },
  {
    "text": "is nonnegative. If you try to create an array with \u22124 elements, for example,\nyou will get a NegativeArraySizeException. An array with zero elements is\nallowed, and there are special uses for such arrays that we\u2019ll see later on.\n8.2 Accessing elements\nWhen you create an array of ints, the elements are initialized to zero. Fig-\nure 8.1 shows a state diagram of the counts array so far.\n0 1 2 3\ncounts 0 0 0 0 \nFigure 8.1: State diagram of an int array.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 141,
      "page_label": "124"
    }
  },
  {
    "text": "Figure 8.1: State diagram of an int array.\nThe arrow indicates that the value of counts is a reference to the array.\nYou should think of the array and the variable that refers to it as two di\ufb00erent\nthings. As we\u2019ll soon see, we can assign a di\ufb00erent variable to refer to the same\narray, and we can change the value of counts to refer to a di\ufb00erent array.\nThe large numbers inside the boxes are the elements of the array. The small",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 141,
      "page_label": "124"
    }
  },
  {
    "text": "numbers outside the boxes are the indexes (or indices) used to identify each\nlocation in the array. Notice that the index of the \ufb01rst element is 0, not 1, as\nyou might have expected.\nThe [] operator selects elements from an array:\nSystem.out.println(\"The zeroth element is \" + counts[0]);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 141,
      "page_label": "124"
    }
  },
  {
    "text": "8.3 Displaying arrays 125\nYou can use the [] operator anywhere in an expression:\ncounts[0] = 7;\ncounts[1] = counts[0] * 2;\ncounts[2]++;\ncounts[3] -= 60;\nFigure 8.2 shows the result of these statements.\n0 1 2 3\ncounts 7 14 1 \u221260\nFigure 8.2: State diagram after several assignment statements.\nYou can use any expression as an index, as long as it has type int. One of the\nmost common ways to index an array is with a loop variable. For example:\nint i = 0;\nwhile (i < 4) {\nSystem.out.println(counts[i]);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 142,
      "page_label": "125"
    }
  },
  {
    "text": "while (i < 4) {\nSystem.out.println(counts[i]);\ni++;\n}\nThis while loop counts from 0 up to 4. When i is 4, the condition fails and\nthe loop terminates. So the body of the loop is only executed when i is 0, 1,\n2, and 3.\nEach time through the loop we use i as an index into the array, displaying the\nith element. This type of array processing is often written using a for loop.\nfor (int i = 0; i < 4; i++) {\nSystem.out.println(counts[i]);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 142,
      "page_label": "125"
    }
  },
  {
    "text": "System.out.println(counts[i]);\n}\nFor the counts array, the only legal indexes are 0, 1, 2, and 3. If the index is\nnegative or greater than 3, the result is anArrayIndexOutOfBoundsException.\n8.3 Displaying arrays\nYou can use println to display an array, but it probably doesn\u2019t do what you\nwould like. For example, the following fragment (1) declares an array variable,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 142,
      "page_label": "125"
    }
  },
  {
    "text": "126 Chapter 8 Arrays\n(2) makes it refer to an array of four elements, and (3) attempts to display the\ncontents of the array using println:\nint[] a = {1, 2, 3, 4};\nSystem.out.println(a);\nUnfortunately, the output is something like:\n[I@bf3f7e0\nThe bracket indicates that the value is an array, I stands for \u201cinteger\u201d, and\nthe rest represents the address of the array. If we want to display the elements\nof the array, we can do it ourselves:\npublic static void printArray(int[] a) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 143,
      "page_label": "126"
    }
  },
  {
    "text": "public static void printArray(int[] a) {\nSystem.out.print(\"{\" + a[0]);\nfor (int i = 1; i < a.length; i++) {\nSystem.out.print(\", \" + a[i]);\n}\nSystem.out.println(\"}\");\n}\nGiven the previous array, the output of this method is:\n{1, 2, 3, 4}\nThe Java library provides a utility class java.util.Arrays that provides\nmethods for working with arrays. One of them, toString, returns a string\nrepresentation of an array. We can invoke it like this:\nSystem.out.println(Arrays.toString(a));\nAnd the output is:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 143,
      "page_label": "126"
    }
  },
  {
    "text": "And the output is:\n[1, 2, 3, 4]\nAs usual, we have to import java.util.Arrays before we can use it. Notice\nthat the string format is slightly di\ufb00erent: it uses square brackets instead of\ncurly braces. But it beats having to write the printArray method.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 143,
      "page_label": "126"
    }
  },
  {
    "text": "8.4 Copying arrays 127\n8.4 Copying arrays\nAs explained in Section 8.2, array variables containreferencesto arrays. When\nyou make an assignment to an array variable, it simply copies the reference.\nBut it doesn\u2019t copy the array itself! For example:\ndouble[] a = new double[3];\ndouble[] b = a;\nThese statements create an array of three doubles and make two di\ufb00erent\nvariables refer to it, as shown in Figure 8.3.\n0 1 2\n0.0 0.0 0.0\na\nb",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 144,
      "page_label": "127"
    }
  },
  {
    "text": "0 1 2\n0.0 0.0 0.0\na\nb\nFigure 8.3: State diagram showing two variables that refer to the same array.\nAny changes made through either variable will be seen by the other. For\nexample, if we set a[0] = 17.0, and then display b[0], the result is 17.0.\nBecause a and b are di\ufb00erent names for the same thing, they are sometimes\ncalled aliases.\nIf you actually want to copy the array, not just a reference, you have to create\na new array and copy the elements from the old to the new, like this:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 144,
      "page_label": "127"
    }
  },
  {
    "text": "double[] b = new double[3];\nfor (int i = 0; i < 3; i++) {\nb[i] = a[i];\n}\nAnother option is to use java.util.Arrays, which provides a method named\ncopyOf that copies an array. You can invoke it like this:\ndouble[] b = Arrays.copyOf(a, 3);\nThe second parameter is the number of elements you want to copy, so you can\nalso use copyOf to copy just part of an array.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 144,
      "page_label": "127"
    }
  },
  {
    "text": "128 Chapter 8 Arrays\n8.5 Array length\nThe examples in the previous section only work if the array has three elements.\nIt would be better to generalize the code to work with arrays of any size. We\ncan do that by replacing the magic number, 3, with a.length:\ndouble[] b = new double[a.length];\nfor (int i = 0; i < a.length; i++) {\nb[i] = a[i];\n}\nAll arrays have a built-in constant,length, that stores the number of elements.\nThe expression a.length may look like a method invocation, but there are no",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 145,
      "page_label": "128"
    }
  },
  {
    "text": "parentheses and no arguments.\nThe last time this loop gets executed, i is a.length - 1, which is the index\nof the last element. When i is equal to a.length, the condition fails and\nthe body is not executed \u2013 which is a good thing, because trying to access\na[a.length] would throw an exception.\nYou can also use a.length with Arrays.copyOf:\ndouble[] b = Arrays.copyOf(a, a.length);\n8.6 Array traversal\nMany computations can be implemented by looping through the elements of",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 145,
      "page_label": "128"
    }
  },
  {
    "text": "an array and performing an operation on each element. For example, the\nfollowing loop squares the elements of a double array:\nfor (int i = 0; i < a.length; i++) {\na[i] = Math.pow(a[i], 2.0);\n}\nLooping through the elements of an array is called a traversal. Another\ncommon pattern is a search, which involves traversing an array looking for\na particular element. For example, the following method takes an int array\nand an integer value, and it returns the index where the value appears:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 145,
      "page_label": "128"
    }
  },
  {
    "text": "8.7 Random numbers 129\npublic static int search(double[] a, double target) {\nfor (int i = 0; i < a.length; i++) {\nif (a[i] == target) {\nreturn i;\n}\n}\nreturn -1;\n}\nIf we \ufb01nd the target value in the array, we return its index immediately. If the\nloop exits without \ufb01nding the target, it returns -1, a special value chosen to\nindicate a failed search.\nAnother common traversal is a reduce operation, which \u201creduces\u201d an array\nof values down to a single value. Examples include the sum or product of the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 146,
      "page_label": "129"
    }
  },
  {
    "text": "elements, the minimum, and the maximum. The following method takes a\ndouble array and returns the sum of the elements:\npublic static double sum(double[] a) {\ndouble total = 0.0;\nfor (int i = 0; i < a.length; i++) {\ntotal += a[i];\n}\nreturn total;\n}\nBefore the loop, we initialize total to zero. Each time through the loop, we\nupdate total by adding one element from the array. At the end of the loop,\ntotal contains the sum of the elements. A variable used this way is sometimes",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 146,
      "page_label": "129"
    }
  },
  {
    "text": "called an accumulator.\n8.7 Random numbers\nMost computer programs do the same thing every time they run; programs like\nthat are deterministic. Usually determinism is a good thing, since we expect\nthe same calculation to yield the same result. But for some applications, we\nwant the computer to be unpredictable. Games are an obvious example, but\nthere are many others.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 146,
      "page_label": "129"
    }
  },
  {
    "text": "130 Chapter 8 Arrays\nMaking a program nondeterministic turns out to be hard, because it\u2019s hard\nfor a computer to generate truly random numbers. But there are algorithms\nthat generate unpredictable sequences called pseudorandom numbers. For\nmost applications, they are as good as random.\nIf you did Exercise 3.4, you have already seenjava.util.Random, which gener-\nates pseudorandom numbers. The method nextInt takes an integer argument,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 147,
      "page_label": "130"
    }
  },
  {
    "text": "n, and returns a random integer between 0 and n - 1 (inclusive).\nIf you generate a long series of random numbers, every value should appear, at\nleast approximately, the same number of times. One way to test this behavior\nof nextInt is to generate a large number of values, store them in an array,\nand count the number of times each value occurs.\nThe following method creates an int array and \ufb01lls it with random numbers\nbetween 0 and 99. The argument speci\ufb01es the size of the array, and the return",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 147,
      "page_label": "130"
    }
  },
  {
    "text": "value is a reference to the new array.\npublic static int[] randomArray(int size) {\nRandom random = new Random();\nint[] a = new int[size];\nfor (int i = 0; i < a.length; i++) {\na[i] = random.nextInt(100);\n}\nreturn a;\n}\nThe following fragment generates an array and displays it using printArray\nfrom Section 8.3:\nint numValues = 8;\nint[] array = randomArray(numValues);\nprintArray(array);\nThe output looks like this:\n{15, 62, 46, 74, 67, 52, 51, 10}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 147,
      "page_label": "130"
    }
  },
  {
    "text": "{15, 62, 46, 74, 67, 52, 51, 10}\nIf you run it, you will probably get di\ufb00erent values.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 147,
      "page_label": "130"
    }
  },
  {
    "text": "8.8 Traverse and count 131\n8.8 Traverse and count\nIf these values were exam scores \u2013 and they would be pretty bad exam scores\n\u2013 the teacher might present them to the class in the form of a histogram. In\nstatistics, a histogram is a set of counters that keeps track of the number of\ntimes each value appears.\nFor exam scores, we might have ten counters to keep track of how many\nstudents scored in the 90s, the 80s, etc. To do that, we can traverse the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 148,
      "page_label": "131"
    }
  },
  {
    "text": "array and count the number of elements that fall in a given range.\nThe following method takes an array and two integers, low and high. It\nreturns the number of elements that fall in the range from low to high.\npublic static int inRange(int[] a, int low, int high) {\nint count = 0;\nfor (int i = 0; i < a.length; i++) {\nif (a[i] >= low && a[i] < high) {\ncount++;\n}\n}\nreturn count;\n}\nThis pattern should look familiar: it is another reduce operation. Notice that",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 148,
      "page_label": "131"
    }
  },
  {
    "text": "low is included in the range ( >=), but high is excluded (<). This detail keeps\nus from counting any scores twice.\nNow we can count the number of scores in each grade range:\nint[] scores = randomArray(30);\nint a = inRange(scores, 90, 100);\nint b = inRange(scores, 80, 90);\nint c = inRange(scores, 70, 80);\nint d = inRange(scores, 60, 70);\nint f = inRange(scores, 0, 60);\n8.9 Building a histogram\nThe previous code is repetitious, but it is acceptable as long as the number of",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 148,
      "page_label": "131"
    }
  },
  {
    "text": "ranges is small. But suppose we wanted to keep track of the number of times",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 148,
      "page_label": "131"
    }
  },
  {
    "text": "132 Chapter 8 Arrays\neach score appears. We would have to write 100 lines of code:\nint count0 = inRange(scores, 0, 1);\nint count1 = inRange(scores, 1, 2);\nint count2 = inRange(scores, 2, 3);\n...\nint count99 = inRange(scores, 99, 100);\nWhat we need is a way to store 100 counters, preferably so we can use an\nindex to access them. In other words, we need another array!\nThe following fragment creates an array of 100 counters, one for each possible",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 149,
      "page_label": "132"
    }
  },
  {
    "text": "score. It loops through the scores and uses inRange to count how many times\neach score appears. Then it stores the results in the array:\nint[] counts = new int[100];\nfor (int i = 0; i < counts.length; i++) {\ncounts[i] = inRange(scores, i, i + 1);\n}\nNotice that we are using the loop variable i three times: as an index into\nthe counts array, and as two arguments for inRange. The code works, but\nit is not as e\ufb03cient as it could be. Every time the loop invokes inRange, it",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 149,
      "page_label": "132"
    }
  },
  {
    "text": "traverses the entire array.\nIt would be better to make a single pass through the array, and for each score,\ncompute which range it falls in and increment the corresponding counter. This\ncode traverses the array of scores only once to generate the histogram:\nint[] counts = new int[100];\nfor (int i = 0; i < scores.length; i++) {\nint index = scores[i];\ncounts[index]++;\n}\nEach time through the loop, it selects one element from scores and uses it",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 149,
      "page_label": "132"
    }
  },
  {
    "text": "as an index to increment the corresponding element of counts. Because this\ncode only traverses the array of scores once, it is much more e\ufb03cient.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 149,
      "page_label": "132"
    }
  },
  {
    "text": "8.10 The enhanced for loop 133\n8.10 The enhanced for loop\nSince traversing arrays is so common, Java provides an alternative syntax that\nmakes the code more compact. For example, consider a for loop that displays\nthe elements of an array on separate lines:\nfor (int i = 0; i < values.length; i++) {\nint value = values[i];\nSystem.out.println(value);\n}\nWe could rewrite the loop like this:\nfor (int value : values) {\nSystem.out.println(value);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 150,
      "page_label": "133"
    }
  },
  {
    "text": "System.out.println(value);\n}\nThis statement is called an enhanced for loop. You can read it as, \u201cfor each\nvalue in values\u201d. It\u2019s conventional to use plural nouns for array variables\nand singular nouns for element variables.\nNotice how the single line for (int value : values) replaces the \ufb01rst two\nlines of the standard for loop. It hides the details of iterating each index of\nthe array, and instead, focuses on the values themselves.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 150,
      "page_label": "133"
    }
  },
  {
    "text": "Using the enhanced for loop, and removing the temporary variable, we can\nwrite the histogram code from the previous section more concisely:\nint[] counts = new int[100];\nfor (int score : scores) {\ncounts[score]++;\n}\nEnhanced for loops often make the code more readable, especially for accu-\nmulating values. But they are not helpful when you need to refer to the index,\nas in search operations.\nfor (double d : array) {\nif (d == target) {\n// array contains d, but we don' t know the index\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 150,
      "page_label": "133"
    }
  },
  {
    "text": "134 Chapter 8 Arrays\n8.11 Vocabulary\narray: A collection of values, where all the values have the same type, and\neach value is identi\ufb01ed by an index.\nelement: One of the values in an array. The [] operator selects elements.\nindex: An integer variable or value used to indicate an element of an array.\nreference: A value that indicates another value, like an array. In a state\ndiagram, a reference appears as an arrow.\nalias: A variable that refers to the same object as another variable.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 151,
      "page_label": "134"
    }
  },
  {
    "text": "traversal: Looping through the elements of an array (or other collection).\nsearch: A traversal pattern used to \ufb01nd a particular element of an array.\nreduce: A traversal pattern that combines the elements of an array into a\nsingle value.\naccumulator: A variable used to accumulate results during a traversal.\ndeterministic: A program that does the same thing every time it is invoked.\nnondeterministic: A program that always behaves di\ufb00erently, even when\nrun multiple times with the same input.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 151,
      "page_label": "134"
    }
  },
  {
    "text": "run multiple times with the same input.\npseudorandom: A sequence of numbers that appear to be random, but which\nare actually the product of a deterministic computation.\nhistogram: An array of integers where each integer counts the number of\nvalues that fall into a certain range.\nenhanced for loop: An alternative syntax for traversing the elements (val-\nues) of an array.\n8.12 Exercises\nThe code for this chapter is in the ch08 directory of ThinkJavaCode. See",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 151,
      "page_label": "134"
    }
  },
  {
    "text": "page xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 151,
      "page_label": "134"
    }
  },
  {
    "text": "8.12 Exercises 135\nExercise 8.1 The goal of this exercise is to practice encapsulation with some\nof the examples in this chapter.\n1. Starting with the code in Section 8.6, write a method called powArray\nthat takes a double array, a, and returns a new array that contains the\nelements of a squared. Generalize it to take a second argument and raise\nthe elements of a to the given power.\n2. Starting with the code in Section 8.10, write a method called histogram",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 152,
      "page_label": "135"
    }
  },
  {
    "text": "that takes an int array of scores from 0 to (but not including) 100, and\nreturns a histogram of 100 counters. Generalize it to take the number of\ncounters as an argument.\nExercise 8.2 The purpose of this exercise is to practice reading code and\nrecognizing the traversal patterns in this chapter. The following methods are\nhard to read, because instead of using meaningful names for the variables and\nmethods, they use names of fruit.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 152,
      "page_label": "135"
    }
  },
  {
    "text": "methods, they use names of fruit.\nFor each method, write one sentence that describes what the method does,\nwithout getting into the details of how it works. For each variable, identify\nthe role it plays.\npublic static int banana(int[] a) {\nint kiwi = 1;\nint i = 0;\nwhile (i < a.length) {\nkiwi = kiwi * a[i];\ni++;\n}\nreturn kiwi;\n}\npublic static int grapefruit(int[] a, int grape) {\nfor (int i = 0; i < a.length; i++) {\nif (a[i] == grape) {\nreturn i;\n}\n}\nreturn -1;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 152,
      "page_label": "135"
    }
  },
  {
    "text": "136 Chapter 8 Arrays\npublic static int pineapple(int[] a, int apple) {\nint pear = 0;\nfor (int pine: a) {\nif (pine == apple) {\npear++;\n}\n}\nreturn pear;\n}\nExercise 8.3 What is the output of the following program? Describe in a\nfew words what mus does. Draw a stack diagram just before mus returns.\npublic static int[] make(int n) {\nint[] a = new int[n];\nfor (int i = 0; i < n; i++) {\na[i] = i + 1;\n}\nreturn a;\n}\npublic static void dub(int[] jub) {\nfor (int i = 0; i < jub.length; i++) {\njub[i] *= 2;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 153,
      "page_label": "136"
    }
  },
  {
    "text": "jub[i] *= 2;\n}\n}\npublic static int mus(int[] zoo) {\nint fus = 0;\nfor (int i = 0; i < zoo.length; i++) {\nfus += zoo[i];\n}\nreturn fus;\n}\npublic static void main(String[] args) {\nint[] bob = make(5);\ndub(bob);\nSystem.out.println(mus(bob));\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 153,
      "page_label": "136"
    }
  },
  {
    "text": "8.12 Exercises 137\nExercise 8.4 Write a method called indexOfMax that takes an array of\nintegers and returns the index of the largest element. Can you write this\nmethod using an enhanced for loop? Why or why not?\nExercise 8.5 The Sieve of Eratosthenes is \u201ca simple, ancient algorithm for\n\ufb01nding all prime numbers up to any given limit,\u201d which you can read about\nat https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes.\nWrite a method called sieve that takes an integer parameter, n, and returns",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 154,
      "page_label": "137"
    }
  },
  {
    "text": "a boolean array that indicates, for each number from 0 to n - 1, whether the\nnumber is prime.\nExercise 8.6 Write a method named areFactors that takes an integer n\nand an array of integers, and that returns true if the numbers in the array\nare all factors of n (which is to say that n is divisible by all of them).\nExercise 8.7 Write a method namedarePrimeFactors that takes an integer\nn and an array of integers, and that returns true if the numbers in the array",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 154,
      "page_label": "137"
    }
  },
  {
    "text": "are all prime and their product is n.\nExercise 8.8 Many of the patterns we have seen for traversing arrays can\nalso be written recursively. It is not common, but it is a useful exercise.\n1. Write a method called maxInRange that takes an array of integers and\ntwo indexes, lowIndex and highIndex, and \ufb01nds the maximum value\nin the array, but only considering the elements between lowIndex and\nhighIndex, including both.\nThis method should be recursive. If the length of the range is 1, that is,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 154,
      "page_label": "137"
    }
  },
  {
    "text": "if lowIndex == highIndex, we know immediately that the sole element\nin the range must be the maximum. So that\u2019s the base case.\nIf there is more than one element in the range, we can break the array\ninto two pieces, \ufb01nd the maximum in each of the pieces, and then \ufb01nd\nthe maximum of the maxima.\n2. Methods like maxInRange can be awkward to use. To \ufb01nd the largest\nelement in an array, we have to provide the range for the entire array.\ndouble max = maxInRange(a, 0, a.length - 1);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 154,
      "page_label": "137"
    }
  },
  {
    "text": "double max = maxInRange(a, 0, a.length - 1);\nWrite a method called max that takes an array and uses maxInRange to\n\ufb01nd and return the largest element.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 154,
      "page_label": "137"
    }
  },
  {
    "text": "138 Chapter 8 Arrays",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 155,
      "page_label": "138"
    }
  },
  {
    "text": "Chapter 9\nStrings and things\nIn Java and other object-oriented languages, an object is a collection of data\nthat provides a set of methods. For example, Scanner, which we saw in\nSection 3.2, is an object that provides methods for parsing input. System.out\nand System.in are also objects.\nStrings are objects, too. They contain characters and provide methods for ma-\nnipulating character data. We explore some of those methods in this chapter.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 156,
      "page_label": "139"
    }
  },
  {
    "text": "Not everything in Java is an object: int, double, and boolean are so-called\nprimitive types. We will explain some of the di\ufb00erences between object types\nand primitive types as we go along.\n9.1 Characters\nStrings provide a method namedcharAt, which extracts a character. It returns\na char, a primitive type that stores an individual character (as opposed to\nstrings of them).\nString fruit = \"banana\";\nchar letter = fruit.charAt(0);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 156,
      "page_label": "139"
    }
  },
  {
    "text": "char letter = fruit.charAt(0);\nThe argument 0 means that we want the letter at position 0. Like array\nindexes, string indexes start at 0, so the character assigned to letter is b.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 156,
      "page_label": "139"
    }
  },
  {
    "text": "140 Chapter 9 Strings and things\nCharacters work like the other primitive types we have seen. You can compare\nthem using relational operators:\nif (letter == ' a' ) {\nSystem.out.println(' ?' );\n}\nCharacter literals, like ' a' , appear in single quotes. Unlike string literals,\nwhich appear in double quotes, character literals can only contain a single\ncharacter. Escape sequences, like ' \\t' , are legal because they represent a\nsingle character.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 157,
      "page_label": "140"
    }
  },
  {
    "text": "single character.\nThe increment and decrement operators work with characters. So this loop\ndisplays the letters of the alphabet:\nSystem.out.print(\"Roman alphabet: \");\nfor (char c = ' A' ; c <= ' Z' ; c++) {\nSystem.out.print(c);\n}\nSystem.out.println();\nJava uses Unicode to represent characters, so strings can store text in other\nalphabets like Cyrillic and Greek, and non-alphabetic languages like Chinese.\nYou can read more about it at http://unicode.org/.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 157,
      "page_label": "140"
    }
  },
  {
    "text": "In Unicode, each character is represented by a \u201ccode unit\u201d, which you can\nthink of as an integer. The code units for uppercase Greek letters run from\n913 to 937, so we can display the Greek alphabet like this:\nSystem.out.print(\"Greek alphabet: \");\nfor (int i = 913; i <= 937; i++) {\nSystem.out.print((char) i);\n}\nSystem.out.println();\nThis example uses a type cast to convert each integer (in the range) to the\ncorresponding character.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 157,
      "page_label": "140"
    }
  },
  {
    "text": "9.2 Strings are immutable 141\n9.2 Strings are immutable\nStrings provide methods, toUpperCase and toLowerCase, that convert from\nuppercase to lowercase and back. These methods are often a source of confu-\nsion, because it sounds like they modify strings. But neither these methods\nnor any others can change a string, because strings are immutable.\nWhen you invoke toUpperCase on a string, you get a new string object as a\nreturn value. For example:\nString name = \"Alan Turing\";",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 158,
      "page_label": "141"
    }
  },
  {
    "text": "String name = \"Alan Turing\";\nString upperName = name.toUpperCase();\nAfter these statements run, upperName refers to the string \"ALAN TURING\".\nBut name still refers to \"Alan Turing\".\nAnother useful method is replace, which \ufb01nds and replaces instances of one\nstring within another. This example replaces \"Computer Science\" with \"CS\":\nString text = \"Computer Science is fun!\";\ntext = text.replace(\"Computer Science\", \"CS\");\nThis example demonstrates a common way to work with string methods. It in-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 158,
      "page_label": "141"
    }
  },
  {
    "text": "vokes text.replace, which returns a reference to a new string,\"CS is fun!\".\nThen it assigns the new string to text, replacing the old string.\nThis assignment is important; if you don\u2019t save the return value, invoking\ntext.replace has no e\ufb00ect.\n9.3 String traversal\nThe following loop traverses the characters in fruit and displays them, one\non each line:\nfor (int i = 0; i < fruit.length(); i++) {\nchar letter = fruit.charAt(i);\nSystem.out.println(letter);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 158,
      "page_label": "141"
    }
  },
  {
    "text": "142 Chapter 9 Strings and things\nStrings provide a method called length that returns the number of characters\nin the string. Because it is a method, you have to invoke it with the empty\nargument list, ().\nThe condition is i < fruit.length(), which means that when i is equal to\nthe length of the string, the condition is false and the loop terminates.\nUnfortunately, the enhanced for loop does not work with strings. But you\ncan convert any string to a character array and iterate that:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 159,
      "page_label": "142"
    }
  },
  {
    "text": "for (char letter : fruit.toCharArray()) {\nSystem.out.println(letter);\n}\nTo \ufb01nd the last letter of a string, you might be tempted to try something like:\nint length = fruit.length();\nchar last = fruit.charAt(length); // wrong!\nThis code compiles and runs, but invoking the charAt method throws a\nStringIndexOutOfBoundsException. The problem is that there is no sixth\nletter in \"banana\". Since we started counting at 0, the 6 letters are indexed",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 159,
      "page_label": "142"
    }
  },
  {
    "text": "from 0 to 5. To get the last character, you have to subtract 1 from length.\nint length = fruit.length();\nchar last = fruit.charAt(length - 1); // correct\nMany string traversals involve reading one string and creating another. For\nexample, to reverse a string, we simply add one character at a time:\npublic static String reverse(String s) {\nString r = \"\";\nfor (int i = s.length() - 1; i >= 0; i--) {\nr = r + s.charAt(i);\n}\nreturn r;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 159,
      "page_label": "142"
    }
  },
  {
    "text": "r = r + s.charAt(i);\n}\nreturn r;\n}\nThe initial value of r is \"\", which is the empty string. The loop traverses\nthe letters of s in reverse order. Each time through the loop, it creates a new\nstring and assigns it to r. When the loop exits, r contains the letters from s\nin reverse order. So the result of reverse(\"banana\") is \"ananab\".",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 159,
      "page_label": "142"
    }
  },
  {
    "text": "9.4 Substrings 143\n9.4 Substrings\nThe substring method returns a new string that copies letters from an exist-\ning string, starting at the given index.\n\u0088 fruit.substring(0) returns \"banana\"\n\u0088 fruit.substring(2) returns \"nana\"\n\u0088 fruit.substring(6) returns \"\"\nThe \ufb01rst example returns a copy of the entire string. The second example\nreturns all but the \ufb01rst two characters. As the last example shows, substring\nreturns the empty string if the argument is the length of the string.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 160,
      "page_label": "143"
    }
  },
  {
    "text": "To visualize how the substring method works, it helps to draw a picture like\nFigure 9.1.\n0 1 2 3\nfruit b a n a \n4 5\na n \nFigure 9.1: State diagram for a String of six characters.\nLike most string methods, substring is overloaded. That is, there are other\nversions of substring that have di\ufb00erent parameters. If it\u2019s invoked with two\narguments, they are treated as a start and end index:\n\u0088 fruit.substring(0, 3) returns \"ban\"\n\u0088 fruit.substring(2, 5) returns \"nan\"\n\u0088 fruit.substring(6, 6) returns \"\"",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 160,
      "page_label": "143"
    }
  },
  {
    "text": "\u0088 fruit.substring(6, 6) returns \"\"\nNotice that the character indicated by the end index is not included. De\ufb01n-\ning substring this way simpli\ufb01es some common operations. For example,\nto select a substring with length len, starting at index i, you could write\nfruit.substring(i, i + len).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 160,
      "page_label": "143"
    }
  },
  {
    "text": "144 Chapter 9 Strings and things\n9.5 The indexOf method\nThe indexOf method searches for a character in a string.\nString fruit = \"banana\";\nint index = fruit.indexOf(' a' );\nThis example \ufb01nds the index of ' a' in the string. But the letter appears\nthree times, so it\u2019s not obvious what indexOf should do. According to the\ndocumentation, it returns the index of the \ufb01rst appearance.\nTo \ufb01nd subsequent appearances, you can use another version ofindexOf, which",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 161,
      "page_label": "144"
    }
  },
  {
    "text": "takes a second argument that indicates where in the string to start looking.\nint index = fruit.indexOf(' a' , 2);\nThis code starts at index 2 (the \ufb01rst ' n' ) and \ufb01nds the next ' a' , which is\nat index 3. If the letter happens to appear at the starting index, the starting\nindex is the answer. So fruit.indexOf(' a' , 5) returns 5.\nIf the character does not appear in the string, indexOf returns -1. Since\nindexes cannot be negative, this value indicates the character was not found.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 161,
      "page_label": "144"
    }
  },
  {
    "text": "You can also use indexOf to search for a substring, not just a single character.\nFor example, the expression fruit.indexOf(\"nan\") returns 2.\n9.6 String comparison\nTo compare two strings, it may be tempting to use the == and != operators.\nString name1 = \"Alan Turing\";\nString name2 = \"Ada Lovelace\";\nif (name1 == name2) { // wrong!\nSystem.out.println(\"The names are the same.\");\n}\nThis code compiles and runs, and most of the time it gets the answer right.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 161,
      "page_label": "144"
    }
  },
  {
    "text": "But it is not correct, and sometimes it gets the answer wrong. The problem is\nthat the == operator checks whether the two variables refer to the same object",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 161,
      "page_label": "144"
    }
  },
  {
    "text": "9.7 String formatting 145\n(by comparing the references). If you give it two di\ufb00erent strings that contain\nthe same letters, it yields false.\nThe right way to compare strings is with the equals method, like this:\nif (name1.equals(name2)) {\nSystem.out.println(\"The names are the same.\");\n}\nThis example invokes equals on name1 and passes name2 as an argument.\nThe equals method returns true if the strings contain the same characters;\notherwise it returns false.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 162,
      "page_label": "145"
    }
  },
  {
    "text": "otherwise it returns false.\nIf the strings di\ufb00er, we can use compareTo to see which comes \ufb01rst in alpha-\nbetical order:\nint diff = name1.compareTo(name2);\nif (diff == 0) {\nSystem.out.println(\"The names are the same.\");\n} else if (diff < 0) {\nSystem.out.println(\"name1 comes before name2.\");\n} else if (diff > 0) {\nSystem.out.println(\"name2 comes before name1.\");\n}\nThe return value from compareTo is the di\ufb00erence between the \ufb01rst characters",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 162,
      "page_label": "145"
    }
  },
  {
    "text": "in the strings that di\ufb00er. If the strings are equal, their di\ufb00erence is zero. If\nthe \ufb01rst string (the one on which the method is invoked) comes \ufb01rst in the\nalphabet, the di\ufb00erence is negative. Otherwise, the di\ufb00erence is positive.\nIn the preceding code, compareTo returns positive 8, because the second letter\nof \"Ada\" comes before the second letter of \"Alan\" by 8 letters.\nBoth equals and compareTo are case-sensitive. The uppercase letters come",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 162,
      "page_label": "145"
    }
  },
  {
    "text": "before the lowercase letters, so \"Ada\" comes before \"ada\".\n9.7 String formatting\nIn Section 3.6, we learned how to use printf to display formatted output.\nSometimes programs need to create strings that are formatted a certain way,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 162,
      "page_label": "145"
    }
  },
  {
    "text": "146 Chapter 9 Strings and things\nbut not display them immediately, or ever. For example, the following method\nreturns a time string in 12-hour format:\npublic static String timeString(int hour, int minute) {\nString ampm;\nif (hour < 12) {\nampm = \"AM\";\nif (hour == 0) {\nhour = 12; // midnight\n}\n} else {\nampm = \"PM\";\nhour = hour - 12;\n}\nreturn String.format(\"%02d:%02d %s\", hour, minute, ampm);\n}\nString.format takes the same arguments as System.out.printf: a for-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 163,
      "page_label": "146"
    }
  },
  {
    "text": "mat speci\ufb01er followed by a sequence of values. The main di\ufb00erence is that\nSystem.out.printf displays the result on the screen; String.format creates\na new string, but does not display anything.\nIn this example, the format speci\ufb01er %02d means \u201ctwo digit integer padded\nwith zeros\u201d, so timeString(19, 5) returns the string \"07:05 PM\".\n9.8 Wrapper classes\nPrimitive values (like ints, doubles, and chars) do not provide methods. For\nexample, you can\u2019t call equals on an int:\nint i = 5;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 163,
      "page_label": "146"
    }
  },
  {
    "text": "int i = 5;\nSystem.out.println(i.equals(5)); // compiler error\nBut for each primitive type, there is a corresponding class in the Java library,\ncalled a wrapper class. The wrapper class for char is called Character; for\nint it\u2019s called Integer. Other wrapper classes include Boolean, Long, and\nDouble. They are in the java.lang package, so you can use them without\nimporting them.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 163,
      "page_label": "146"
    }
  },
  {
    "text": "9.9 Command-line arguments 147\nEach wrapper class de\ufb01nes constantsMIN_VALUE and MAX_VALUE. For example,\nInteger.MIN_VALUE is -2147483648, and Integer.MAX_VALUE is 2147483647.\nBecause these constants are available in wrapper classes, you don\u2019t have to\nremember them, and you don\u2019t have to include them in your programs.\nWrapper classes provide methods for converting strings to other types. For\nexample, Integer.parseInt converts a string to (you guessed it) an integer:\nString str = \"12345\";",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 164,
      "page_label": "147"
    }
  },
  {
    "text": "String str = \"12345\";\nint num = Integer.parseInt(str);\nIn this context, parse means something like \u201cread and translate\u201d.\nThe other wrapper classes provide similar methods, like Double.parseDouble\nand Boolean.parseBoolean. They also provide toString, which returns a\nstring representation of a value:\nint num = 12345;\nString str = Integer.toString(num);\nThe result is the string \"12345\".\n9.9 Command-line arguments\nNow that you know about arrays and strings, we can \ufb01nally explain the args",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 164,
      "page_label": "147"
    }
  },
  {
    "text": "parameter for main that we have been ignoring since Chapter 1. If you are un-\nfamiliar with the command-line interface, please read or review Appendix A.3.\nContinuing an earlier example, let\u2019s write a program to \ufb01nd the largest value\nin a sequence of numbers. Rather than read the numbers from System.in,\nwe\u2019ll pass them as command-line arguments. Here is a starting point:\npublic class Max {\npublic static void main(String[] args) {\nSystem.out.println(Arrays.toString(args));\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 164,
      "page_label": "147"
    }
  },
  {
    "text": "System.out.println(Arrays.toString(args));\n}\n}\nYou can run this program from the command line by typing:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 164,
      "page_label": "147"
    }
  },
  {
    "text": "148 Chapter 9 Strings and things\njava Max\nThe output indicates that args is an empty array; that is, it has no elements:\n[]\nBut if you provide additional values on the command line, they are passed as\narguments to main. For example, if you run it like this:\njava Max 10 -3 55 0 14\nThe output is:\n[10, -3, 55, 0, 14]\nBut remember that the elements of args are strings. To \ufb01nd the maximum\nnumber, we have to convert the arguments to integers.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 165,
      "page_label": "148"
    }
  },
  {
    "text": "The following fragment uses an enhanced for loop to parse the arguments\n(using the Integer wrapper class) and \ufb01nd the largest value:\nint max = Integer.MIN_VALUE;\nfor (String arg : args) {\nint value = Integer.parseInt(arg);\nif (value > max) {\nmax = value;\n}\n}\nSystem.out.println(\"The max is \" + max);\nThe initial value of max is the smallest (most negative) number anint can rep-\nresent, so any other value is greater. If args is empty, the result is MIN_VALUE.\n9.10 Vocabulary",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 165,
      "page_label": "148"
    }
  },
  {
    "text": "9.10 Vocabulary\nobject: A collection of related data that comes with a set of methods that\noperate on it.\nprimitive: A data type that stores a single value and provides no methods.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 165,
      "page_label": "148"
    }
  },
  {
    "text": "9.11 Exercises 149\nUnicode: A standard for representing characters in most of the world\u2019s lan-\nguages.\nimmutable: An object that, once created, cannot be modi\ufb01ed. Strings are\nimmutable by design.\nempty string: The string \"\", which contains no characters and has a length\nof zero.\nwrapper class: Classes in java.lang that provide constants and methods\nfor working with primitive types.\nparse: To read a string and interpret or translate it.\nempty array: An array with no elements and a length of zero.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 166,
      "page_label": "149"
    }
  },
  {
    "text": "9.11 Exercises\nThe code for this chapter is in the ch09 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nExercise 9.1 The point of this exercise is to explore Java types and \ufb01ll in\nsome of the details that aren\u2019t covered in the chapter.\n1. Create a new program named Test.java and write a main method that",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 166,
      "page_label": "149"
    }
  },
  {
    "text": "contains expressions that combine various types using the + operator.\nFor example, what happens when you \u201cadd\u201d a String and a char?\nDoes it perform character addition or string concatenation? What is the\ntype of the result? (How can you determine the type of the result?)\n2. Make a bigger copy of the following table and \ufb01ll it in. At the intersection\nof each pair of types, you should indicate whether it is legal to use the\n+ operator with these types, what operation is performed (addition or",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 166,
      "page_label": "149"
    }
  },
  {
    "text": "concatenation), and what the type of the result is.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 166,
      "page_label": "149"
    }
  },
  {
    "text": "150 Chapter 9 Strings and things\nboolean char int double String\nboolean\nchar\nint\ndouble\nString\n3. Think about some of the choices the designers of Java made when they\n\ufb01lled in this table. How many of the entries seem unavoidable, as if there\nwas no other choice? How many seem like arbitrary choices from several\nequally reasonable possibilities? Which entries seem most problematic?\n4. Here\u2019s a puzzler: normally, the statement x++ is exactly equivalent to",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 167,
      "page_label": "150"
    }
  },
  {
    "text": "x = x + 1. But if x is a char, it\u2019s not exactly the same! In that case,\nx++ is legal, but x = x + 1 causes an error. Try it out and see what the\nerror message is, then see if you can \ufb01gure out what is going on.\n5. What happens when you add \"\" (the empty string) to the other types,\nfor example, \"\" + 5?\n6. For each data type, what types of values can you assign to it? For\nexample, you can assign an int to a double but not vice versa.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 167,
      "page_label": "150"
    }
  },
  {
    "text": "Exercise 9.2 Write a method called letterHist that takes a string as a\nparameter and returns a histogram of the letters in the string. The zeroth\nelement of the histogram should contain the number of a\u2019s in the string (upper-\nand lowercase); the 25th element should contain the number of z\u2019s. Your\nsolution should only traverse the string once.\nExercise 9.3 The purpose of this exercise is to review encapsulation and\ngeneralization (see Section 7.3). The following code fragment traverses a string",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 167,
      "page_label": "150"
    }
  },
  {
    "text": "and checks whether it has the same number of open and close parentheses:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 167,
      "page_label": "150"
    }
  },
  {
    "text": "9.11 Exercises 151\nString s = \"((3 + 7) * 2)\";\nint count = 0;\nfor (int i = 0; i < s.length(); i++) {\nchar c = s.charAt(i);\nif (c == ' (' ) {\ncount++;\n} else if (c == ' )' ) {\ncount--;\n}\n}\nSystem.out.println(count);\n1. Encapsulate this fragment in a method that takes a string argument and\nreturns the \ufb01nal value of count.\n2. Now that you have generalized the code so that it works on any string,\nwhat could you do to generalize it more?",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 168,
      "page_label": "151"
    }
  },
  {
    "text": "what could you do to generalize it more?\n3. Test your method with multiple strings, including some that are balanced\nand some that are not.\nExercise 9.4 Create a program called Recurse.java and type in the fol-\nlowing methods:\n/**\n* Returns the first character of the given String.\n*/\npublic static char first(String s) {\nreturn s.charAt(0);\n}\n/**\n* Returns all but the first letter of the given String.\n*/\npublic static String rest(String s) {\nreturn s.substring(1);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 168,
      "page_label": "151"
    }
  },
  {
    "text": "152 Chapter 9 Strings and things\n/**\n* Returns all but the first and last letter of the String.\n*/\npublic static String middle(String s) {\nreturn s.substring(1, s.length() - 1);\n}\n/**\n* Returns the length of the given String.\n*/\npublic static int length(String s) {\nreturn s.length();\n}\n1. Write some code in main that tests each of these methods. Make sure\nthey work, and you understand what they do.\n2. Using these methods, and without using any other String methods,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 169,
      "page_label": "152"
    }
  },
  {
    "text": "write a method called printString that takes a string as a parameter\nand that displays the letters of the string, one on each line. It should be\na void method.\n3. Again using only these methods, write a method called printBackward\nthat does the same thing as printString but that displays the string\nbackward (again, one character per line).\n4. Now write a method called reverseString that takes a string as a pa-\nrameter and that returns a new string as a return value. The new string",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 169,
      "page_label": "152"
    }
  },
  {
    "text": "should contain the same letters as the parameter, but in reverse order.\nString backwards = reverseString(\"coffee\");\nSystem.out.println(backwards);\nThe output of this example code should be:\neeffoc\n5. A palindrome is a word that reads the same both forward and backward,\nlike \u201cotto\u201d and \u201cpalindromeemordnilap\u201d. Here\u2019s one way to test whether\na string is a palindrome:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 169,
      "page_label": "152"
    }
  },
  {
    "text": "9.11 Exercises 153\nA single letter is a palindrome, a two-letter word is a palin-\ndrome if the letters are the same, and any other word is a\npalindrome if the \ufb01rst letter is the same as the last and the\nmiddle is a palindrome.\nWrite a recursive method named isPalindrome that takes a String and\nreturns a boolean indicating whether the word is a palindrome.\nExercise 9.5 A word is said to be \u201cabecedarian\u201d if the letters in the word",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 170,
      "page_label": "153"
    }
  },
  {
    "text": "appear in alphabetical order. For example, the following are all six-letter\nEnglish abecedarian words:\nabdest, acknow, acorsy, adempt, adipsy, agnosy, be\ufb01st, behint, be-\nknow, bijoux, biopsy, cestuy, chintz, de\ufb02ux, dehors, dehort, deinos,\ndiluvy, dimpsy\nWrite a method called isAbecedarian that takes a String and returns a\nboolean indicating whether the word is abecedarian. Your method can be\niterative or recursive.\nExercise 9.6 A word is said to be a \u201cdoubloon\u201d if every letter that appears",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 170,
      "page_label": "153"
    }
  },
  {
    "text": "in the word appears exactly twice. Here are some example doubloons found\nin the dictionary:\nAbba, Anna, appall, appearer, appeases, arraigning, beriberi, bil-\nabial, boob, Caucasus, coco, Dada, deed, Emmett, Hannah, horse-\nshoer, intestines, Isis, mama, Mimi, murmur, noon, Otto, papa,\npeep, reappear, redder, sees, Shanghaiings, Toto\nWrite a method called isDoubloon that takes a string and checks whether it is\na doubloon. To ignore case, invoke the toLowerCase method before checking.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 170,
      "page_label": "153"
    }
  },
  {
    "text": "Exercise 9.7 Two words are anagrams if they contain the same letters and\nthe same number of each letter. For example, \u201cstop\u201d is an anagram of \u201cpots\u201d\nand \u201callen downey\u201d is an anagram of \u201cwell annoyed\u201d.\nWrite a method that takes two strings and checks whether they are anagrams\nof each other.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 170,
      "page_label": "153"
    }
  },
  {
    "text": "154 Chapter 9 Strings and things\nExercise 9.8 In Scrabble1 each player has a set of tiles with letters on them.\nThe object of the game is to use those letters to spell words. The scoring system\nis complex, but longer words are usually worth more than shorter words.\nImagine you are given your set of tiles as a string, like \"quijibo\", and you\nare given another string to test, like \"jib\".\nWrite a method called canSpell that takes two strings and checks whether",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 171,
      "page_label": "154"
    }
  },
  {
    "text": "the set of tiles can spell the word. You might have more than one tile with\nthe same letter, but you can only use each tile once.\n1Scrabble is a registered trademark owned in the USA and Canada by Hasbro Inc., and\nin the rest of the world by J. W. Spear & Sons Limited of Maidenhead, Berkshire, England,\na subsidiary of Mattel Inc.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 171,
      "page_label": "154"
    }
  },
  {
    "text": "Chapter 10\nObjects\nAs we learned in the previous chapter, an object is a collection of data that\nprovides a set of methods. For example, a String is a collection of characters\nthat provides methods like charAt and substring.\nJava is an \u201cobject-oriented\u201d language, which means that it uses objects to\nrepresent data and provide methods related to them. This way of organizing\nprograms is a powerful design concept, and we will introduce it a little at a\ntime throughout the remainder of the book.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 172,
      "page_label": "155"
    }
  },
  {
    "text": "time throughout the remainder of the book.\nIn this chapter, we introduce two new types of objects: Point and Rectangle.\nWe show how to write methods that take objects as parameters and produce\nobjects as return values. We also take a look at the source code for the Java\nlibrary.\n10.1 Point objects\nThe java.awt package provides a class named Point intended to represent\nthe coordinates of a location in a Cartesian plane. In mathematical notation,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 172,
      "page_label": "155"
    }
  },
  {
    "text": "points are often written in parentheses with a comma separating the coordi-\nnates. For example, (0 ,0) indicates the origin, and ( x,y) indicates the point\nx units to the right and y units up from the origin.\nIn order to use the Point class, you have to import it:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 172,
      "page_label": "155"
    }
  },
  {
    "text": "156 Chapter 10 Objects\nimport java.awt.Point;\nThen, to create a new point, you have to use the new operator:\nPoint blank;\nblank = new Point(3, 4);\nThe \ufb01rst line declares that blank has type Point. The second line creates the\nnew Point with the given arguments as coordinates.\nThe result of the new operator is a reference to the new object. So blank\ncontains a reference to the new Point object. Figure 10.1 shows the result.\n4y\n3x\nblank\nPoint",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 173,
      "page_label": "156"
    }
  },
  {
    "text": "4y\n3x\nblank\nPoint\nFigure 10.1: State diagram showing a variable that refers to a Point object.\nAs usual, the name of the variable blank appears outside the box, and its\nvalue appears inside the box. In this case, the value is a reference, which is\nrepresented with an arrow. The arrow points to the new object, which contains\ntwo variables, x and y.\n10.2 Attributes\nVariables that belong to an object are usually called attributes, but you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 173,
      "page_label": "156"
    }
  },
  {
    "text": "might also see them called \u201c\ufb01elds\u201d. To access an attribute of an object, Java\nuses dot notation. For example:\nint x = blank.x;\nThe expression blank.x means \u201cgo to the object blank refers to, and get the\nvalue of the attribute x.\u201d In this case, we assign that value to a local variable\nnamed x. There is no con\ufb02ict between the local variable named x and the\nattribute named x. The purpose of dot notation is to identify which variable\nyou are referring to unambiguously.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 173,
      "page_label": "156"
    }
  },
  {
    "text": "10.3 Objects as parameters 157\nYou can use dot notation as part of an expression. For example:\nSystem.out.println(blank.x + \", \" + blank.y);\nint sum = blank.x * blank.x + blank.y * blank.y;\nThe \ufb01rst line displays 3, 4; the second line calculates the value 25.\n10.3 Objects as parameters\nYou can pass objects as parameters in the usual way. For example:\npublic static void printPoint(Point p) {\nSystem.out.println(\"(\" + p.x + \", \" + p.y + \")\");\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 174,
      "page_label": "157"
    }
  },
  {
    "text": "}\nThis method takes a point as an argument and displays its attributes in paren-\ntheses. If you invoke printPoint(blank), it displays (3, 4).\nBut we don\u2019t really need a method like printPoint, because if you invoke\nSystem.out.println(blank) you get:\njava.awt.Point[x=3,y=4]\nPoint objects provide a method called toString that returns a string repre-\nsentation of a point. When you call println with objects, it automatically",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 174,
      "page_label": "157"
    }
  },
  {
    "text": "calls toString and displays the result. In this case, it shows the name of the\ntype (java.awt.Point) and the names and values of the attributes.\nAs another example, we can rewrite the distance method from Section 6.2 so\nthat it takes two Points as parameters instead of four doubles.\npublic static double distance(Point p1, Point p2) {\nint dx = p2.x - p1.x;\nint dy = p2.y - p1.y;\nreturn Math.sqrt(dx * dx + dy * dy);\n}\nPassing objects as parameters makes the source code more readable and less",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 174,
      "page_label": "157"
    }
  },
  {
    "text": "error-prone, because related values are bundled together.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 174,
      "page_label": "157"
    }
  },
  {
    "text": "158 Chapter 10 Objects\n10.4 Objects as return types\nThe java.awt package also provides a class called Rectangle. To use it, you\nhave to import it:\nimport java.awt.Rectangle;\nRectangle objects are similar to points, but they have four attributes: x, y,\nwidth, and height. The following example creates a Rectangle object and\nmakes the variable box refer to it:\nRectangle box = new Rectangle(0, 0, 100, 200);\nFigure 10.2 shows the e\ufb00ect of this assignment.\n100width0x\n0 200 heighty\nbox\nRectangle",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 175,
      "page_label": "158"
    }
  },
  {
    "text": "100width0x\n0 200 heighty\nbox\nRectangle\nFigure 10.2: State diagram showing a Rectangle object.\nIf you run System.out.println(box), you get:\njava.awt.Rectangle[x=0,y=0,width=100,height=200]\nAgain, println uses the toString method provided by Rectangle, which\nknows how to display Rectangle objects.\nYou can write methods that return objects. For example, findCenter takes\na Rectangle as an argument and returns a Point with the coordinates of the\ncenter of the rectangle:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 175,
      "page_label": "158"
    }
  },
  {
    "text": "center of the rectangle:\npublic static Point findCenter(Rectangle box) {\nint x = box.x + box.width / 2;\nint y = box.y + box.height / 2;\nreturn new Point(x, y);\n}\nThe return type of this method is Point. The last line creates a new Point\nobject and returns a reference to it.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 175,
      "page_label": "158"
    }
  },
  {
    "text": "10.5 Mutable objects 159\n10.5 Mutable objects\nYou can change the contents of an object by making an assignment to one of\nits attributes. For example, to \u201cmove\u201d a rectangle without changing its size,\nyou can modify the x and y values:\nRectangle box = new Rectangle(0, 0, 100, 200);\nbox.x = box.x + 50;\nbox.y = box.y + 100;\nThe result is shown in Figure 10.3.\nbox\nx\n200heighty\n100width\n100\n50\nRectangle\nFigure 10.3: State diagram showing updated attributes.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 176,
      "page_label": "159"
    }
  },
  {
    "text": "We can encapsulate this code in a method and generalize it to move the rect-\nangle by any amount:\npublic static void moveRect(Rectangle box, int dx, int dy) {\nbox.x = box.x + dx;\nbox.y = box.y + dy;\n}\nThe variables dx and dy indicate how far to move the rectangle in each direc-\ntion. Invoking this method has the e\ufb00ect of modifying the Rectangle that is\npassed as an argument.\nRectangle box = new Rectangle(0, 0, 100, 200);\nmoveRect(box, 50, 100);\nSystem.out.println(box);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 176,
      "page_label": "159"
    }
  },
  {
    "text": "moveRect(box, 50, 100);\nSystem.out.println(box);\nModifying objects by passing them as arguments to methods can be useful.\nBut it can also make debugging more di\ufb03cult, because it is not always clear\nwhich method invocations modify their arguments.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 176,
      "page_label": "159"
    }
  },
  {
    "text": "160 Chapter 10 Objects\nJava provides a number of methods that operate on Points and Rectangles.\nFor example, translate has the same e\ufb00ect as moveRect, but instead of pass-\ning the rectangle as an argument, you use dot notation:\nbox.translate(50, 100);\nThis line invokes the translate method for the object that box refers to. As\na result, the box object is updated directly.\nThis example is a good illustration of object-oriented programming. Rather",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 177,
      "page_label": "160"
    }
  },
  {
    "text": "than write methods like moveRect that modify one or more parameters, we\napply methods to objects themselves using dot notation.\n10.6 Aliasing\nRemember that when you assign an object to a variable, you are assigning a\nreference to an object. It is possible to have multiple variables that refer to\nthe same object. The state diagram in Figure 10.4 shows the result.\nRectangle box1 = new Rectangle(0, 0, 100, 200);\nRectangle box2 = box1;\nx\nheighty\nwidthbox1\nbox2\n0\n0\n100\n200\nRectangle",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 177,
      "page_label": "160"
    }
  },
  {
    "text": "x\nheighty\nwidthbox1\nbox2\n0\n0\n100\n200\nRectangle\nFigure 10.4: State diagram showing two variables that refer to the same object.\nNotice how box1 and box2 are aliases for the same object, so any changes\nthat a\ufb00ect one variable also a\ufb00ect the other. This example adds 50 to all four\nsides of the rectangle, so it moves the corner up and to the left by 50, and it\nincreases the height and width by 100:\nSystem.out.println(box2.width);\nbox1.grow(50, 50);\nSystem.out.println(box2.width);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 177,
      "page_label": "160"
    }
  },
  {
    "text": "10.7 The null keyword 161\nThe \ufb01rst line displays 100, which is the width of the Rectangle referred to by\nbox2. The second line invokes the grow method on box1, which stretches the\nRectangle horizontally and vertically. The e\ufb00ect is shown in Figure 10.5.\nx\nheighty\nwidthbox1\nbox2\n\u221250\n\u221250\n200\n300\nRectangle\nFigure 10.5: State diagram showing the e\ufb00ect of invoking grow.\nWhen we make a change using box1, we see the change using box2. Thus, the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 178,
      "page_label": "161"
    }
  },
  {
    "text": "value displayed by the third line is 200, the width of the expanded rectangle.\n10.7 The null keyword\nWhen you create an object variable, remember that you are storing a reference\nto an object. In Java, the keyword null is a special value that means \u201cno\nobject\u201d. You can declare and initialize object variables this way:\nPoint blank = null;\nThe value null is represented in state diagrams by a small box with no arrow,\nas in Figure 10.6.\nblank",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 178,
      "page_label": "161"
    }
  },
  {
    "text": "as in Figure 10.6.\nblank\nFigure 10.6: State diagram showing a variable that contains a null reference.\nIf you try to use a null value, either by accessing an attribute or invoking a\nmethod, Java throws a NullPointerException.\nPoint blank = null;\nint x = blank.x; // NullPointerException\nblank.translate(50, 50); // NullPointerException\nOn the other hand, it is legal to pass a null reference as an argument or receive\none as a return value. For example, null is often used to represent a special",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 178,
      "page_label": "161"
    }
  },
  {
    "text": "condition or indicate an error.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 178,
      "page_label": "161"
    }
  },
  {
    "text": "162 Chapter 10 Objects\n10.8 Garbage collection\nIn Section 10.6, we saw what happens when more than one variable refers to\nthe same object. What happens when no variables refer to an object?\nPoint blank = new Point(3, 4);\nblank = null;\nThe \ufb01rst line creates a new Point object and makes blank refer to it. The\nsecond line changes blank so that instead of referring to the object, it refers\nto nothing. In the state diagram, we remove the arrow between them, as in\nFigure 10.7.\n4y\n3x\nblank\nPoint",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 179,
      "page_label": "162"
    }
  },
  {
    "text": "Figure 10.7.\n4y\n3x\nblank\nPoint\nFigure 10.7: State diagram showing the e\ufb00ect of setting a variable to null.\nIf there are no references to an object, there is no way to access its attributes\nor invoke a method on it. From the programmer\u2019s view, it ceases to exist.\nHowever it\u2019s still present in the computer\u2019s memory, taking up space.\nAs your program runs, the system automatically looks for stranded objects\nand reclaims them; then the space can be reused for new objects. This process",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 179,
      "page_label": "162"
    }
  },
  {
    "text": "is called garbage collection.\nYou don\u2019t have to do anything to make garbage collection happen, and in\ngeneral don\u2019t have to be aware of it. But in high-performance applications,\nyou may notice a slight delay every now and then when Java reclaims space\nfrom discarded objects.\n10.9 Class diagrams\nTo summarize what we\u2019ve learned so far, Point and Rectangle objects each\nhave their own attributes and methods. Attributes are an object\u2019s data, and",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 179,
      "page_label": "162"
    }
  },
  {
    "text": "10.10 Java library source 163\nmethods are an object\u2019s code. An object\u2019s class de\ufb01nes which attributes and\nmethods it will have.\nIn practice, it\u2019s more convenient to look at high-level pictures than to examine\nthe source code. Uni\ufb01ed Modeling Language (UML) de\ufb01nes a standard\nway to summarize the design of a class.\nFigure 10.8: UML class diagrams for Point and Rectangle.\nAs shown in Figure 10.8, a class diagram is divided into two sections. The",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 180,
      "page_label": "163"
    }
  },
  {
    "text": "top half lists the attributes, and the bottom half lists the methods. UML uses\na language-independent format, so rather than showing int x, the diagram\nuses x: int.\nIn contrast to state diagrams, which visualize objects (and variables) at run-\ntime, a class diagram visualizes the source code at compile-time.\nBoth Point and Rectangle have additional methods; we are only showing the\nones introduced in this chapter. See the documentation for these classes to\nlearn more about what they can do.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 180,
      "page_label": "163"
    }
  },
  {
    "text": "learn more about what they can do.\n10.10 Java library source\nThroughout the book, you have used classes from the Java library including\nSystem, String, Scanner, Math, Random, and others. You may not have real-\nized that these classes are written in Java. In fact, you can take a look at the\nsource code to see how they work.\nThe Java library contains thousands of \ufb01les, many of which are thousands of\nlines of code. That\u2019s more than one person could read and understand fully,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 180,
      "page_label": "163"
    }
  },
  {
    "text": "so please don\u2019t be intimidated!",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 180,
      "page_label": "163"
    }
  },
  {
    "text": "164 Chapter 10 Objects\nBecause it\u2019s so large, the library source code is stored in a \ufb01le named src.zip.\nTake a few minutes to locate this \ufb01le on your machine:\n\u0088 On Linux, it\u2019s likely under: /usr/lib/jvm/openjdk-8/\n(You might need to install the openjdk-8-source package.)\n\u0088 On OS X, it\u2019s likely under:\n/Library/Java/JavaVirtualMachines/jdk.../Contents/Home/\n\u0088 On Windows, it\u2019s likely under: C:\\Program Files\\Java\\jdk...\\\nWhen you open (or unzip) the \ufb01le, you will see folders that correspond to Java",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 181,
      "page_label": "164"
    }
  },
  {
    "text": "packages. For example, open the java folder and then open the awt folder.\nYou should now see Point.java and Rectangle.java, along with the other\nclasses in the java.awt package.\nOpen Point.java in your editor and skim through the \ufb01le. It uses language\nfeatures we haven\u2019t yet discussed, so you probably won\u2019t understand every-\nthing. But you can get a sense of what professional Java software looks like\nby browsing through the library.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 181,
      "page_label": "164"
    }
  },
  {
    "text": "by browsing through the library.\nNotice how much ofPoint.java is documentation. Each method is thoroughly\ncommented, including @param, @return, and other Javadoc tags. Javadoc\nreads these comments and generates documentation in HTML. You can see\nthe results by reading the documentation for the Point class, which you can\n\ufb01nd by doing a web search for \u201cJava Point\u201d.\nNow take a look at Rectangle\u2019s grow and translate methods. There is more",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 181,
      "page_label": "164"
    }
  },
  {
    "text": "to them than you may have realized, but that doesn\u2019t limit your ability to use\nthese methods in a program.\nTo summarize the whole chapter, objects encapsulate data and provide meth-\nods to access and modify the data directly. Object-oriented programming\nmakes it possible to hide messy details so that you can more easily use and\nunderstand code that other people wrote.\n10.11 Vocabulary\nattribute: One of the named data items that make up an object.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 181,
      "page_label": "164"
    }
  },
  {
    "text": "10.12 Exercises 165\ndot notation: Use of the dot operator ( .) to access an object\u2019s attributes or\nmethods.\nobject-oriented: A way of organizing code and data into objects, rather than\nindependent methods.\ngarbage collection: The process of \ufb01nding objects that have no references\nand reclaiming their storage space.\nUML: Uni\ufb01ed Modeling Language, a standard way to draw diagrams for\nsoftware engineering.\nclass diagram: An illustration of the attributes and methods for a class.\n10.12 Exercises",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 182,
      "page_label": "165"
    }
  },
  {
    "text": "10.12 Exercises\nThe code for this chapter is in the ch10 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nExercise 10.1 The point of this exercise is to make sure you understand the\nmechanism for passing objects as parameters.\n1. For the following program, draw a stack diagram showing the local vari-\nables and parameters of main and riddle just before riddle returns.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 182,
      "page_label": "165"
    }
  },
  {
    "text": "Use arrows to show which objects each variable references.\n2. What is the output of the program?\n3. Is the blank object mutable or immutable? How can you tell?\npublic static int riddle(int x, Point p) {\nx = x + 7;\nreturn x + p.x + p.y;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 182,
      "page_label": "165"
    }
  },
  {
    "text": "166 Chapter 10 Objects\npublic static void main(String[] args) {\nint x = 5;\nPoint blank = new Point(1, 2);\nSystem.out.println(riddle(x, blank));\nSystem.out.println(x);\nSystem.out.println(blank.x);\nSystem.out.println(blank.y);\n}\nExercise 10.2 The point of this exercise is to make sure you understand the\nmechanism for returning new objects from methods.\n1. Draw a stack diagram showing the state of the program just before\ndistance returns. Include all variables and parameters, and show the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 183,
      "page_label": "166"
    }
  },
  {
    "text": "objects those variables refer to.\n2. What is the output of this program? (Can you tell without running it?)\npublic static double distance(Point p1, Point p2) {\nint dx = p2.x - p1.x;\nint dy = p2.y - p1.y;\nreturn Math.sqrt(dx * dx + dy * dy);\n}\npublic static Point findCenter(Rectangle box) {\nint x = box.x + box.width / 2;\nint y = box.y + box.height / 2;\nreturn new Point(x, y);\n}\npublic static void main(String[] args) {\nPoint blank = new Point(5, 8);\nRectangle rect = new Rectangle(0, 2, 4, 4);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 183,
      "page_label": "166"
    }
  },
  {
    "text": "Rectangle rect = new Rectangle(0, 2, 4, 4);\nPoint center = findCenter(rect);\ndouble dist = distance(center, blank);\nSystem.out.println(dist);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 183,
      "page_label": "166"
    }
  },
  {
    "text": "10.12 Exercises 167\nExercise 10.3 This exercise is about aliasing. Recall that aliases are two\nvariables that refer to the same object.\n1. Draw a diagram that shows the state of the program just before the end\nof main. Include all local variables and the objects they refer to.\n2. What is the output of the program?\n3. At the end of main, are p1 and p2 aliased? Why or why not?\npublic static void printPoint(Point p) {\nSystem.out.println(\"(\" + p.x + \", \" + p.y + \")\");\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 184,
      "page_label": "167"
    }
  },
  {
    "text": "}\npublic static Point findCenter(Rectangle box) {\nint x = box.x + box.width / 2;\nint y = box.y + box.height / 2;\nreturn new Point(x, y);\n}\npublic static void main(String[] args) {\nRectangle box1 = new Rectangle(2, 4, 7, 9);\nPoint p1 = findCenter(box1);\nprintPoint(p1);\nbox1.grow(1, 1);\nPoint p2 = findCenter(box1);\nprintPoint(p2);\n}\nExercise 10.4 You might be sick of the factorial method by now, but we\u2019re\ngoing to do one more version.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 184,
      "page_label": "167"
    }
  },
  {
    "text": "going to do one more version.\n1. Create a new program called Big.java and write (or reuse) an iterative\nversion of factorial.\n2. Display a table of the integers from 0 to 30 along with their factorials.\nAt some point around 15, you will probably see that the answers are not\nright anymore. Why not?",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 184,
      "page_label": "167"
    }
  },
  {
    "text": "168 Chapter 10 Objects\n3. BigInteger is a Java class that can represent arbitrarily big integers.\nThere is no upper bound except the limitations of memory size and\nprocessing speed. Take a minute to read the documentation, which you\ncan \ufb01nd by doing a web search for \u201cJava BigInteger\u201d.\n4. To use BigIntegers, you have to import java.math.BigInteger at the\nbeginning of your program.\n5. There are several ways to create a BigInteger, but the simplest uses",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 185,
      "page_label": "168"
    }
  },
  {
    "text": "valueOf. The following code converts an integer to a BigInteger:\nint x = 17;\nBigInteger big = BigInteger.valueOf(x);\n6. Since BigIntegers are not primitive types, the usual math operators don\u2019t\nwork. Instead, we have to use methods like add. To add two BigIntegers,\ninvoke add on one and pass the other as an argument.\nBigInteger small = BigInteger.valueOf(17);\nBigInteger big = BigInteger.valueOf(1700000000);\nBigInteger total = small.add(big);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 185,
      "page_label": "168"
    }
  },
  {
    "text": "BigInteger total = small.add(big);\nTry out some of the other methods, like multiply and pow.\n7. Convert factorial so that it performs its calculation using BigIntegers\nand returns a BigInteger as a result. You can leave the parameter alone;\nit will still be an integer.\n8. Try displaying the table again with your modi\ufb01ed factorial method. Is\nit correct up to 30? How high can you make it go?\n9. Are BigInteger objects mutable or immutable? How can you tell?",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 185,
      "page_label": "168"
    }
  },
  {
    "text": "Exercise 10.5 Many encryption algorithms depend on the ability to raise\nlarge integers to a power. Here is a method that implements an e\ufb03cient\nalgorithm for integer exponentiation:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 185,
      "page_label": "168"
    }
  },
  {
    "text": "10.12 Exercises 169\npublic static int pow(int x, int n) {\nif (n == 0) return 1;\n// find x to the n/2 recursively\nint t = pow(x, n / 2);\n// if n is even, the result is t squared\n// if n is odd, the result is t squared times x\nif (n % 2 == 0) {\nreturn t * t;\n} else {\nreturn t * t * x;\n}\n}\nThe problem with this method is that it only works if the result is small enough\nto be represented by an int. Rewrite it so that the result is a BigInteger.\nThe parameters should still be integers, though.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 186,
      "page_label": "169"
    }
  },
  {
    "text": "The parameters should still be integers, though.\nYou should use the BigInteger methods add and multiply. But don\u2019t use\nBigInteger.pow; that would spoil the fun.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 186,
      "page_label": "169"
    }
  },
  {
    "text": "170 Chapter 10 Objects",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 187,
      "page_label": "170"
    }
  },
  {
    "text": "Chapter 11\nClasses\nWhenever you de\ufb01ne a new class, you also create a new type with the same\nname. So way back in Section 1.4, when we de\ufb01ned the classHello, we created\na type named Hello. We didn\u2019t declare any variables with type Hello, and\nwe didn\u2019t use new to create a Hello object. It wouldn\u2019t have done much if we\nhad \u2013 but we could have!\nIn this chapter, we will de\ufb01ne classes that represent useful object types. We\nwill also clarify the di\ufb00erence between classes and objects. Here are the most",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 188,
      "page_label": "171"
    }
  },
  {
    "text": "important ideas:\n\u0088 De\ufb01ning a class creates a new object type with the same name.\n\u0088 Every object belongs to some object type; that is, it is an instance of\nsome class.\n\u0088 A class de\ufb01nition is like a template for objects: it speci\ufb01es what at-\ntributes the objects have and what methods can operate on them.\n\u0088 The new operator instantiates objects, that is, it creates new instances\nof a class.\n\u0088 Think of a class like a blueprint for a house: you can use the same",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 188,
      "page_label": "171"
    }
  },
  {
    "text": "blueprint to build any number of houses.\n\u0088 The methods that operate on an object type are de\ufb01ned in the class for\nthat object.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 188,
      "page_label": "171"
    }
  },
  {
    "text": "172 Chapter 11 Classes\n11.1 The Time class\nOne common reason to de\ufb01ne a new class is to encapsulate related data in\nan object that can be treated as a single unit. That way, we can use objects\nas parameters and return values, rather than passing and returning multiple\nvalues. This design principle is called data encapsulation.\nWe have already seen two types that encapsulate data in this way: Point and\nRectangle. Another example, which we will implement ourselves, is Time,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 189,
      "page_label": "172"
    }
  },
  {
    "text": "which represents a time of day. The data encapsulated in a Time object are an\nhour, a minute, and a number of seconds. Because every Time object contains\nthese data, we de\ufb01ne attributes to hold them.\nAttributes are also called instance variables, because each instance has its\nown variables (as opposed to class variables, coming up in Section 12.3).\nThe \ufb01rst step is to decide what type each variable should be. It seems clear",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 189,
      "page_label": "172"
    }
  },
  {
    "text": "that hour and minute should be integers. Just to keep things interesting, let\u2019s\nmake second a double.\nInstance variables are declared at the beginning of the class de\ufb01nition, outside\nof any method. By itself, this code fragment is a legal class de\ufb01nition:\npublic class Time {\nprivate int hour;\nprivate int minute;\nprivate double second;\n}\nThe Time class is public, which means that it can be used in other classes.\nBut the instance variables areprivate, which means they can only be accessed",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 189,
      "page_label": "172"
    }
  },
  {
    "text": "from inside the Time class. If you try to read or write them from another class,\nyou will get a compiler error.\nPrivate instance variables help keep classes isolated from each other so that\nchanges in one class won\u2019t require changes in other classes. It also simpli\ufb01es\nwhat other programmers need to understand in order to use your classes. This\nkind of isolation is called information hiding.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 189,
      "page_label": "172"
    }
  },
  {
    "text": "11.2 Constructors 173\n11.2 Constructors\nAfter declaring the instance variables, the next step is to de\ufb01ne aconstructor,\nwhich is a special method that initializes the instance variables. The syntax\nfor constructors is similar to that of other methods, except:\n\u0088 The name of the constructor is the same as the name of the class.\n\u0088 Constructors have no return type (and no return value).\n\u0088 The keyword static is omitted.\nHere is an example constructor for the Time class:\npublic Time() {\nthis.hour = 0;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 190,
      "page_label": "173"
    }
  },
  {
    "text": "public Time() {\nthis.hour = 0;\nthis.minute = 0;\nthis.second = 0.0;\n}\nThis constructor does not take any arguments. Each line initializes an instance\nvariable to zero (which in this example means midnight).\nThe name this is a keyword that refers to the object we are creating. You can\nuse this the same way you use the name of any other object. For example,\nyou can read and write the instance variables of this, and you can pass this",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 190,
      "page_label": "173"
    }
  },
  {
    "text": "as an argument to other methods. But you do not declare this, and you can\u2019t\nmake an assignment to it.\nA common error when writing constructors is to put a return statement at\nthe end. Like void methods, constructors do not return values.\nTo create a Time object, you must use the new operator:\nTime time = new Time();\nWhen you invoke new, Java creates the object and calls your constructor to\ninitialize the instance variables. When the constructor is done, new returns a",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 190,
      "page_label": "173"
    }
  },
  {
    "text": "reference to the new object. In this example, the reference gets assigned to\nthe variable time, which has type Time. Figure 11.1 shows the result.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 190,
      "page_label": "173"
    }
  },
  {
    "text": "174 Chapter 11 Classes\nhour 0\nminute 0\n0.0second\ntime\nTime\nFigure 11.1: State diagram of a Time object.\nBeginners sometimes make the mistake of invoking new inside the constructor.\nYou don\u2019t have to, and you shouldn\u2019t. In this example, invoking new Time()\nin the constructor causes an in\ufb01nite recursion:\npublic Time() {\nnew Time(); // wrong!\nthis.hour = 0;\nthis.minute = 0;\nthis.second = 0.0;\n}\n11.3 More constructors\nLike other methods, constructors can be overloaded, which means you can",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 191,
      "page_label": "174"
    }
  },
  {
    "text": "provide multiple constructors with di\ufb00erent parameters. Java knows which\nconstructor to invoke by matching the arguments you provide with the pa-\nrameters of the constructors.\nIt is common to provide a constructor that takes no arguments, like the pre-\nvious one, and a \u201cvalue constructor\u201d, like this one:\npublic Time(int hour, int minute, double second) {\nthis.hour = hour;\nthis.minute = minute;\nthis.second = second;\n}\nAll this constructor does is copy values from the parameters to the instance",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 191,
      "page_label": "174"
    }
  },
  {
    "text": "variables. In this example, the names and types of the parameters are the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 191,
      "page_label": "174"
    }
  },
  {
    "text": "11.3 More constructors 175\nsame as the instance variables. As a result, the parameters shadow (or hide)\nthe instance variables, so the keyword this is necessary to tell them apart.\nParameters don\u2019t have to use the same names, but that\u2019s a common style.\nTo invoke this second constructor, you have to provide arguments after the\nnew operator. This example creates a Time object that represents a fraction\nof a second before noon:\nTime time = new Time(11, 59, 59.9);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 192,
      "page_label": "175"
    }
  },
  {
    "text": "Time time = new Time(11, 59, 59.9);\nOverloading constructors provides the \ufb02exibility to create an object \ufb01rst and\nthen \ufb01ll in the attributes, or collect all the information before creating the\nobject itself.\nOnce you get the hang of it, writing constructors gets boring. You can write\nthem quickly just by looking at the list of instance variables. In fact, some\nIDEs can generate them for you.\nPulling it all together, here is the complete class de\ufb01nition so far:\npublic class Time {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 192,
      "page_label": "175"
    }
  },
  {
    "text": "public class Time {\nprivate int hour;\nprivate int minute;\nprivate double second;\npublic Time() {\nthis.hour = 0;\nthis.minute = 0;\nthis.second = 0.0;\n}\npublic Time(int hour, int minute, double second) {\nthis.hour = hour;\nthis.minute = minute;\nthis.second = second;\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 192,
      "page_label": "175"
    }
  },
  {
    "text": "176 Chapter 11 Classes\n11.4 Getters and setters\nRecall that the instance variables of Time are private. We can access them\nfrom within the Time class, but if we try to access them from another class,\nthe compiler generates an error.\nFor example, here\u2019s a new class called TimeClient, because a class that uses\nobjects de\ufb01ned in another class is called a client:\npublic class TimeClient {\npublic static void main(String[] args) {\nTime time = new Time(11, 59, 59.9);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 193,
      "page_label": "176"
    }
  },
  {
    "text": "Time time = new Time(11, 59, 59.9);\nSystem.out.println(time.hour); // compiler error\n}\n}\nIf you try to compile this code, you will get a message like hour has private\naccess in Time. There are three ways to solve this problem:\n\u0088 We could make the instance variables public.\n\u0088 We could provide methods to access the instance variables.\n\u0088 We could decide that it\u2019s not a problem, and refuse to let other classes\naccess the instance variables.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 193,
      "page_label": "176"
    }
  },
  {
    "text": "access the instance variables.\nThe \ufb01rst choice is appealing because it\u2019s simple. But the problem is that\nwhen Class A accesses the instance variables of Class B directly, A becomes\n\u201cdependent\u201d on B. If anything in B changes later, it is likely that Awill have\nto change, too.\nBut if A only uses methods to interact with B, A and B are \u201cindependent\u201d,\nwhich means that we can make changes in B without a\ufb00ecting A (as long as\nwe don\u2019t change the method signatures).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 193,
      "page_label": "176"
    }
  },
  {
    "text": "we don\u2019t change the method signatures).\nSo if we decide that TimeClient should be able to read the instance variables\nof Time, we can provide methods to do it:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 193,
      "page_label": "176"
    }
  },
  {
    "text": "11.4 Getters and setters 177\npublic int getHour() {\nreturn this.hour;\n}\npublic int getMinute() {\nreturn this.minute;\n}\npublic int getSecond() {\nreturn this.second;\n}\nMethods like these are formally called \u201caccessors\u201d, but more commonly re-\nferred to as getters. By convention, the method that gets a variable named\nsomething is called getSomething.\nIf we decide that TimeClient should also be able to modify the instance vari-\nables of Time, we can provide methods to do that, too:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 194,
      "page_label": "177"
    }
  },
  {
    "text": "public void setHour(int hour) {\nthis.hour = hour;\n}\npublic void setMinute(int minute) {\nthis.minute = minute;\n}\npublic void setSecond(int second) {\nthis.second = second;\n}\nThese methods are formally called \u201cmutators\u201d, but more commonly known as\nsetters. The naming convention is similar; the method that sets something\nis usually called setSomething.\nWriting getters and setters can get boring, but many IDEs can generate them\nfor you based on the instance variables.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 194,
      "page_label": "177"
    }
  },
  {
    "text": "178 Chapter 11 Classes\n11.5 Displaying objects\nIf you create a Time object and display it with println:\npublic static void main(String[] args) {\nTime time = new Time(11, 59, 59.9);\nSystem.out.println(time);\n}\nThe output will look something like:\nTime@80cc7c0\nWhen Java displays the value of an object type, it displays the name of the\ntype and the address of the object (in hexadecimal). This address can be\nuseful for debugging, if you want to keep track of individual objects.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 195,
      "page_label": "178"
    }
  },
  {
    "text": "To display Time objects in a way that is more meaningful to users, you could\nwrite a method to display the hour, minute, and second. Using printTime in\nSection 4.6 as a starting point, we could write:\npublic static void printTime(Time t) {\nSystem.out.print(t.hour);\nSystem.out.print(\":\");\nSystem.out.println(t.minute);\nSystem.out.print(\":\");\nSystem.out.println(t.second);\n}\nThe output of this method, given the time object from the previous section,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 195,
      "page_label": "178"
    }
  },
  {
    "text": "would be 11:59:59.9. We can use printf to write it more concisely:\npublic static void printTime(Time t) {\nSystem.out.printf(\"%02d:%02d:%04.1f\\n\",\nt.hour, t.minute, t.second);\n}\nAs a reminder, you need to use %d with integers and %f with \ufb02oating-point\nnumbers. The 02 option means \u201ctotal width 2, with leading zeros if necessary\u201d,\nand the 04.1 option means \u201ctotal width 4, one digit after the decimal point,\nleading zeros if necessary\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 195,
      "page_label": "178"
    }
  },
  {
    "text": "11.6 The toString method 179\n11.6 The toString method\nEvery object type has a method called toString that returns a string repre-\nsentation of the object. When you display an object using print or println,\nJava invokes the object\u2019s toString method.\nBy default it simply displays the type of the object and its address, but you\ncan override this behavior by providing your own toString method. For\nexample, here is a toString method for Time:\npublic String toString() {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 196,
      "page_label": "179"
    }
  },
  {
    "text": "public String toString() {\nreturn String.format(\"%02d:%02d:%04.1f\\n\",\nthis.hour, this.minute, this.second);\n}\nThe de\ufb01nition does not have the keyword static, because it is not a static\nmethod. It is an instance method, so called because when you invoke it, you\ninvoke it on an instance of the class ( Time in this case). Instance methods are\nsometimes called \u201cnon-static\u201d; you might see this term in an error message.\nThe body of the method is similar to printTime in the previous section, with",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 196,
      "page_label": "179"
    }
  },
  {
    "text": "two changes:\n\u0088 Inside the method, we use this to refer to the current instance; that is,\nthe object the method is invoked on.\n\u0088 Instead of printf, it uses String.format, which returns a formatted\nString rather than displaying it.\nNow you can call toString directly:\nTime time = new Time(11, 59, 59.9);\nString s = time.toString();\nOr you can invoke it indirectly through println:\nSystem.out.println(time);\nIn this example, this in toString refers to the same object as time. The\noutput is 11:59:59.9.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 196,
      "page_label": "179"
    }
  },
  {
    "text": "180 Chapter 11 Classes\n11.7 The equals method\nWe have seen two ways to check whether values are equal: the == operator\nand the equals method. With objects you can use either one, but they are\nnot the same.\n\u0088 The == operator checks whether objects are identical; that is, whether\nthey are the same object.\n\u0088 The equals method checks whether they areequivalent; that is, whether\nthey have the same value.\nThe de\ufb01nition of identity is always the same, so the == operator always does",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 197,
      "page_label": "180"
    }
  },
  {
    "text": "the same thing. But the de\ufb01nition of equivalence is di\ufb00erent for di\ufb00erent\nobjects, so objects can de\ufb01ne their own equals methods.\nConsider the following variables:\nTime time1 = new Time(9, 30, 0.0);\nTime time2 = time1;\nTime time3 = new Time(9, 30, 0.0);\nFigure 11.2 is a state diagram that shows these variables and their values.\ntime3time1\ntime2\nTime\nhour 9\nminute 30\n0.0second\nTime\nhour 9\nminute 30\n0.0second\nFigure 11.2: State diagram of three Time variables.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 197,
      "page_label": "180"
    }
  },
  {
    "text": "The assignment operator copies references, so time1 and time2 refer to the\nsame object. Because they are identical, time1 == time2 is true.\nBut time1 and time3 refer to di\ufb00erent objects. Because they are not identical,\ntime1 == time3 is false.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 197,
      "page_label": "180"
    }
  },
  {
    "text": "11.8 Adding times 181\nBy default, the equals method does the same thing as ==. For Time objects,\nthat\u2019s probably not what we want. For example, time1 and time3 represent\nthe same time of day, so we should consider them equivalent.\nWe can provide anequals method that implements this notion of equivalence:\npublic boolean equals(Time that) {\nreturn this.hour == that.hour\n&& this.minute == that.minute\n&& this.second == that.second;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 198,
      "page_label": "181"
    }
  },
  {
    "text": "&& this.second == that.second;\n}\nequals is an instance method, so it uses this to refer to the current object\nand it doesn\u2019t have the keyword static. We can invoke equals as follows:\ntime1.equals(time3);\nInside the equals method, this refers to the same object as time1, and that\nrefers to the same object as time3. Since their instance variables are equal,\nthe result is true.\nMany objects use a similar notion of equivalence; that is, two objects are equiv-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 198,
      "page_label": "181"
    }
  },
  {
    "text": "alent if their instance variables are equal. But other de\ufb01nitions are possible.\n11.8 Adding times\nSuppose you are going to a movie that starts at 18:50 (or 6:50 PM), and the\nrunning time is 2 hours 16 minutes. What time does the movie end?\nWe\u2019ll use Time objects to \ufb01gure it out. Here are two ways we could \u201cadd\u201d\nTime objects:\n\u0088 We could write a static method that takes the two Time objects as pa-\nrameters.\n\u0088 We could write an instance method that gets invoked on one object and",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 198,
      "page_label": "181"
    }
  },
  {
    "text": "takes the other as a parameter.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 198,
      "page_label": "181"
    }
  },
  {
    "text": "182 Chapter 11 Classes\nTo demonstrate the di\ufb00erence, we\u2019ll do both. Here is a rough draft that uses\nthe static approach:\npublic static Time add(Time t1, Time t2) {\nTime sum = new Time();\nsum.hour = t1.hour + t2.hour;\nsum.minute = t1.minute + t2.minute;\nsum.second = t1.second + t2.second;\nreturn sum;\n}\nAnd here\u2019s how we would invoke the static method:\nTime startTime = new Time(18, 50, 0.0);\nTime runningTime = new Time(2, 16, 0.0);\nTime endTime = Time.add(startTime, runningTime);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 199,
      "page_label": "182"
    }
  },
  {
    "text": "Time endTime = Time.add(startTime, runningTime);\nOn the other hand, here\u2019s what it looks like as an instance method:\npublic Time add(Time t2) {\nTime sum = new Time();\nsum.hour = this.hour + t2.hour;\nsum.minute = this.minute + t2.minute;\nsum.second = this.second + t2.second;\nreturn sum;\n}\nThe changes are:\n\u0088 We removed the keyword static.\n\u0088 We removed the \ufb01rst parameter.\n\u0088 We replaced t1 with this.\nOptionally, you could replace t2 with that. Unlike this, that is not a key-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 199,
      "page_label": "182"
    }
  },
  {
    "text": "word; it\u2019s just a slightly clever variable name.\nAnd here\u2019s how we would invoke the instance method:\nTime endTime = startTime.add(runningTime);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 199,
      "page_label": "182"
    }
  },
  {
    "text": "11.9 Pure methods and modi\ufb01ers 183\nThat\u2019s all there is to it. Static methods and instance methods do the same\nthing, and you can convert from one to the other with just a few changes.\nThere\u2019s only one problem: the addition code itself is not correct. For this\nexample, it returns 20:66, which is not a valid time. If second exceeds 59, we\nhave to \u201ccarry\u201d into the minutes column, and if minute exceeds 59, we have\nto carry into hour.\nHere is a better version of add:\npublic Time add(Time t2) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 200,
      "page_label": "183"
    }
  },
  {
    "text": "public Time add(Time t2) {\nTime sum = new Time();\nsum.hour = this.hour + t2.hour;\nsum.minute = this.minute + t2.minute;\nsum.second = this.second + t2.second;\nif (sum.second >= 60.0) {\nsum.second -= 60.0;\nsum.minute += 1;\n}\nif (sum.minute >= 60) {\nsum.minute -= 60;\nsum.hour += 1;\n}\nreturn sum;\n}\nIt\u2019s still possible that hour may exceed 23, but there\u2019s no days attribute to\ncarry into. In that case, sum.hour -= 24 would yield the correct result.\n11.9 Pure methods and modi\ufb01ers",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 200,
      "page_label": "183"
    }
  },
  {
    "text": "11.9 Pure methods and modi\ufb01ers\nThis implementation of add does not modify either of the parameters. Instead,\nit creates and returns a new Time object. As an alternative, we could have\nwritten a method like this:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 200,
      "page_label": "183"
    }
  },
  {
    "text": "184 Chapter 11 Classes\npublic void increment(double seconds) {\nthis.second += seconds;\nwhile (this.second >= 60.0) {\nthis.second -= 60.0;\nthis.minute += 1;\n}\nwhile (this.minute >= 60) {\nthis.minute -= 60;\nthis.hour += 1;\n}\n}\nThe increment method modi\ufb01es an existing Time object. It doesn\u2019t create a\nnew one, and it doesn\u2019t return anything.\nIn contrast, methods like add are called pure because:\n\u0088 They don\u2019t modify the parameters.\n\u0088 They don\u2019t have any other \u201cside e\ufb00ects\u201d, like printing.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 201,
      "page_label": "184"
    }
  },
  {
    "text": "\u0088 The return value only depends on the parameters, not on any other state.\nMethods like increment, which breaks the \ufb01rst rule, are sometimes called\nmodi\ufb01ers. They are usually void methods, but sometimes they return a\nreference to the object they modify.\nModi\ufb01ers can be more e\ufb03cient because they don\u2019t create new objects. But\nthey can also be error-prone. When objects are aliased, the e\ufb00ects of modi\ufb01ers\ncan be confusing.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 201,
      "page_label": "184"
    }
  },
  {
    "text": "can be confusing.\nTo make a class immutable, likeString, you can provide getters but no setters\nand pure methods but no modi\ufb01ers. Immutable objects can be more di\ufb03cult\nto work with, at \ufb01rst, but they can save you from long hours of debugging.\n11.10 Vocabulary\nclass: Previously, we de\ufb01ned a class as a collection of related methods. Now\nyou know that a class is also a template for a new type of object.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 201,
      "page_label": "184"
    }
  },
  {
    "text": "11.10 Vocabulary 185\ninstance: A member of a class. Every object is an instance of some class.\ninstantiate: Create a new instance of a class in the computer\u2019s memory.\ndata encapsulation: A technique for bundling multiple named variables into\na single object.\ninstance variable: An attribute of an object; a non-static variable de\ufb01ned\nat the class level.\ninformation hiding: The practice of making instance variables private to\nlimit dependencies between classes.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 202,
      "page_label": "185"
    }
  },
  {
    "text": "limit dependencies between classes.\nconstructor: A special method that initializes the instance variables of a\nnewly-constructed object.\nshadowing: De\ufb01ning a local variable or parameter with the same name and\ntype as an instance variable.\nclient: A class that uses objects de\ufb01ned in another class.\ngetter: A method that returns the value of an instance variable.\nsetter: A method that assigns a value to an instance variable.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 202,
      "page_label": "185"
    }
  },
  {
    "text": "override: Replacing a default implementation of a method, such astoString.\ninstance method: A non-static method that has access to this and the\ninstance variables.\nidentical: Two values that are the same; in the case of objects, two variables\nthat refer to the same object.\nequivalent: Two objects that are \u201cequal\u201d but not necessarily identical, as\nde\ufb01ned by the equals method.\npure method: A static method that depends only on its parameters and no\nother data.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 202,
      "page_label": "185"
    }
  },
  {
    "text": "other data.\nmodi\ufb01er method: A method that changes the state (instance variables) of\nan object.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 202,
      "page_label": "185"
    }
  },
  {
    "text": "186 Chapter 11 Classes\n11.11 Exercises\nThe code for this chapter is in the ch11 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nAt this point you know enough to read Appendix B, which is about simple\n2D graphics and animations. During the next few chapters, you should take a\ndetour to read this appendix and work through the exercises.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 203,
      "page_label": "186"
    }
  },
  {
    "text": "Exercise 11.1 Review the documentation of java.awt.Rectangle. Which\nmethods are pure? Which are modi\ufb01ers?\nIf you review the documentation of java.lang.String, you should see that\nthere are no modi\ufb01ers, because strings are immutable.\nExercise 11.2 The implementation of increment in this chapter is not very\ne\ufb03cient. Can you rewrite it so it doesn\u2019t use any loops? Hint: Remember the\nmodulus operator.\nExercise 11.3 In the board game Scrabble, each tile contains a letter, which",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 203,
      "page_label": "186"
    }
  },
  {
    "text": "is used to spell words in rows and columns, and a score, which is used to\ndetermine the value of words.\n1. Write a de\ufb01nition for a class named Tile that represents Scrabble tiles.\nThe instance variables should include a character named letter and an\ninteger named value.\n2. Write a constructor that takes parameters named letter and value and\ninitializes the instance variables.\n3. Write a method named printTile that takes a Tile object as a param-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 203,
      "page_label": "186"
    }
  },
  {
    "text": "eter and displays the instance variables in a reader-friendly format.\n4. Write a method named testTile that creates a Tile object with the\nletter Z and the value 10, and then uses printTile to display the state\nof the object.\n5. Implement the toString and equals methods for a Tile.\n6. Create getters and setters for each of the attributes.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 203,
      "page_label": "186"
    }
  },
  {
    "text": "11.11 Exercises 187\nThe point of this exercise is to practice the mechanical part of creating a new\nclass de\ufb01nition and code that tests it.\nExercise 11.4 Write a class de\ufb01nition forDate, an object type that contains\nthree integers: year, month, and day. This class should provide two construc-\ntors. The \ufb01rst should take no parameters and initialize a default date. The\nsecond should take parameters named year, month and day, and use them to\ninitialize the instance variables.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 204,
      "page_label": "187"
    }
  },
  {
    "text": "initialize the instance variables.\nWrite a main method that creates a new Date object named birthday. The\nnew object should contain your birth date. You can use either constructor.\nExercise 11.5 A rational number is a number that can be represented as\nthe ratio of two integers. For example, 2 /3 is a rational number, and you can\nthink of 7 as a rational number with an implicit 1 in the denominator.\n1. De\ufb01ne a class called Rational. A Rational object should have two",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 204,
      "page_label": "187"
    }
  },
  {
    "text": "integer instance variables that store the numerator and denominator.\n2. Write a constructor that takes no arguments and that sets the numerator\nto 0 and denominator to 1.\n3. Write an instance method called printRational that displays aRational\nin some reasonable format.\n4. Write a main method that creates a new object with type Rational, sets\nits instance variables to some values, and displays the object.\n5. At this stage, you have a minimal testable program. Test it and, if",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 204,
      "page_label": "187"
    }
  },
  {
    "text": "necessary, debug it.\n6. Write a toString method for Rational and test it using println.\n7. Write a second constructor that takes two arguments and uses them to\ninitialize the instance variables.\n8. Write an instance method called negate that reverses the sign of a ra-\ntional number. This method should be a modi\ufb01er, so it should be void.\nAdd lines to main to test the new method.\n9. Write an instance method called invert that inverts the number by",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 204,
      "page_label": "187"
    }
  },
  {
    "text": "swapping the numerator and denominator. It should be a modi\ufb01er. Add\nlines to main to test the new method.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 204,
      "page_label": "187"
    }
  },
  {
    "text": "188 Chapter 11 Classes\n10. Write an instance method called toDouble that converts the rational\nnumber to a double (\ufb02oating-point number) and returns the result. This\nmethod is a pure method; it does not modify the object. As always, test\nthe new method.\n11. Write an instance method named reduce that reduces a rational number\nto its lowest terms by \ufb01nding the greatest common divisor (GCD) of the\nnumerator and denominator and dividing through. This method should",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 205,
      "page_label": "188"
    }
  },
  {
    "text": "be a pure method; it should not modify the instance variables of the\nobject on which it is invoked.\nHint: Finding the GCD only takes a few lines of code. Search the web\nfor \u201cEuclidean algorithm\u201d.\n12. Write an instance method called add that takes a Rational number as\nan argument, adds it to this, and returns a new Rational object.\nThere are several ways to add fractions. You can use any one you want,\nbut you should make sure that the result of the operation is reduced",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 205,
      "page_label": "188"
    }
  },
  {
    "text": "so that the numerator and denominator have no common divisor (other\nthan 1).\nThe purpose of this exercise is to write a class de\ufb01nition that includes a va-\nriety of methods, including constructors, static methods, instance methods,\nmodi\ufb01ers, and pure methods.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 205,
      "page_label": "188"
    }
  },
  {
    "text": "Chapter 12\nArrays of objects\nIn the remaining chapters, we will develop programs that work with playing\ncards and decks of cards. Here is an outline of the road ahead:\n\u0088 In this chapter, we de\ufb01ne a Card class and write methods that work with\ncards and arrays of cards.\n\u0088 In Chapter 13.1, we create a Deck class that encapsulates an array of\ncards, and we write methods that operate on decks.\n\u0088 In Chapter 14, we introduce inheritance as a way to create new classes",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 206,
      "page_label": "189"
    }
  },
  {
    "text": "that extend existing classes. We then use all these classes to implement\nthe card game Crazy Eights.\nThe code for this chapter is in Card.java, which is in the directory ch12 in\nthe repository for this book. Instructions for downloading this code are on\npage xv.\n12.1 Card objects\nIf you are unfamiliar with traditional playing cards, now would be a good time\nto get a deck or read through https://en.wikipedia.org/wiki/Standard_\n52-card_deck.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 206,
      "page_label": "189"
    }
  },
  {
    "text": "190 Chapter 12 Arrays of objects\nThere are 52 cards in a standard deck. Each card belongs to one of four suits\nand one of 13 ranks. The suits are Spades, Hearts, Diamonds, and Clubs. The\nranks are Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, and King.\nIf we want to de\ufb01ne a class to represent a playing card, it is pretty obvious\nwhat the instance variables should be: rank and suit. It is not as obvious\nwhat types they should be. One possibility is a String containing things like",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 207,
      "page_label": "190"
    }
  },
  {
    "text": "\"Spade\" for suits and \"Queen\" for ranks. A problem with this design is that\nit would not be easy to compare cards to see which had a higher rank or suit.\nAn alternative is to use integers to encode the ranks and suits. By \u201cencode\u201d\nwe don\u2019t mean to encrypt or translate into a secret code. We mean \u201cde\ufb01ne a\nmapping between a sequence of numbers and the things we want to represent.\u201d\nHere is a mapping for suits:\nClubs \u21a6\u2192 0\nDiamonds \u21a6\u2192 1\nHearts \u21a6\u2192 2\nSpades \u21a6\u2192 3",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 207,
      "page_label": "190"
    }
  },
  {
    "text": "Clubs \u21a6\u2192 0\nDiamonds \u21a6\u2192 1\nHearts \u21a6\u2192 2\nSpades \u21a6\u2192 3\nWe use the mathematical symbol \u21a6\u2192to make it clear that these mappings are\nnot part of the program. They are part of the program design, but they never\nappear explicitly in the code.\nEach of the numerical ranks (2 through 10) maps to the corresponding integer,\nand for face cards:\nAce \u21a6\u2192 1\nJack \u21a6\u2192 11\nQueen \u21a6\u2192 12\nKing \u21a6\u2192 13\nSo far, the class de\ufb01nition for the Card type looks like this:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 207,
      "page_label": "190"
    }
  },
  {
    "text": "12.2 Card toString 191\npublic class Card {\nprivate int rank;\nprivate int suit;\npublic Card(int rank, int suit) {\nthis.rank = rank;\nthis.suit = suit;\n}\n}\nThe instance variables are private: we can access them from inside this class,\nbut not from other classes.\nThe constructor takes a parameter for each instance variable. To create aCard\nobject, we use the new operator:\nCard threeOfClubs = new Card(3, 0);\nThe result is a reference to a Card that represents the 3 of Clubs.\n12.2 Card toString",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 208,
      "page_label": "191"
    }
  },
  {
    "text": "12.2 Card toString\nWhen you create a new class, the \ufb01rst step is to declare the instance variables\nand write constructors. A good next step is to write toString, which is useful\nfor debugging and incremental development.\nTo display Card objects in a way that humans can read easily, we need to map\nthe integer codes onto words. A natural way to do that is with an array of\nStrings. We can create the array like this:\nString[] suits = new String[4];\nAnd then assign values to the elements:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 208,
      "page_label": "191"
    }
  },
  {
    "text": "And then assign values to the elements:\nsuits[0] = \"Clubs\";\nsuits[1] = \"Diamonds\";\nsuits[2] = \"Hearts\";\nsuits[3] = \"Spades\";",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 208,
      "page_label": "191"
    }
  },
  {
    "text": "192 Chapter 12 Arrays of objects\nOr we can create the array and initialize the elements at the same time, as we\nsaw in Section 8.3:\nString[] suits = {\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"};\nThe state diagram in Figure 12.1 shows the result. Each element of the array\nis a reference to a String.\n\"Spades\"\n\"Clubs\"\n\"Diamonds\"\n\"Hearts\"\nsuits\nFigure 12.1: State diagram of an array of strings.\nNow we need an array to decode the ranks:\nString[] ranks = {null, \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\",",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 209,
      "page_label": "192"
    }
  },
  {
    "text": "\"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\"};\nThe zeroth element should never be used, because the only valid ranks are\n1\u201313. We set it to null to indicate an unused element.\nUsing these arrays, we can create a meaningful String using suit and rank\nas indexes.\nString s = ranks[card.rank] + \" of \" + suits[card.suit];\nThe expression suits[card.suit] means \u201cuse the instance variablesuit from\nthe object card as an index into the array suits.\u201d\nNow we can wrap all that in a toString method.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 209,
      "page_label": "192"
    }
  },
  {
    "text": "Now we can wrap all that in a toString method.\npublic String toString() {\nString[] ranks = {null, \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\",\n\"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\"};\nString[] suits = {\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"};\nString s = ranks[this.rank] + \" of \" + suits[this.suit];\nreturn s;\n}\nWhen we display a card, println automatically calls toString:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 209,
      "page_label": "192"
    }
  },
  {
    "text": "12.3 Class variables 193\nCard card = new Card(11, 1);\nSystem.out.println(card);\nThe output is Jack of Diamonds.\n12.3 Class variables\nSo far we have seen local variables, which are declared inside a method, and\ninstance variables, which are declared in a class de\ufb01nition, usually before the\nmethod de\ufb01nitions.\nLocal variables are created when a method is invoked, and their space is re-\nclaimed when the method ends. Instance variables are created when you con-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 210,
      "page_label": "193"
    }
  },
  {
    "text": "struct an object and reclaimed when the object is garbage-collected.\nNow it\u2019s time to learn about class variables. Like instance variables, class\nvariables are de\ufb01ned in a class de\ufb01nition, before the method de\ufb01nitions. But\nthey are identi\ufb01ed by the keywordstatic. They are created when the program\nbegins (or when the class is used for the \ufb01rst time) and survive until the\nprogram ends. Class variables are shared across all instances of the class.\npublic class Card {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 210,
      "page_label": "193"
    }
  },
  {
    "text": "public class Card {\npublic static final String[] RANKS = {\nnull, \"Ace\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n\"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\"};\npublic static final String[] SUITS = {\n\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"};\n// instance variables and constructors go here\npublic String toString() {\nreturn RANKS[this.rank] + \" of \" + SUITS[this.suit];\n}\n}\nClass variables are often used to store constant values that are needed in several",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 210,
      "page_label": "193"
    }
  },
  {
    "text": "places. In that case, they should also be de\ufb01ned as final. Note that whether",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 210,
      "page_label": "193"
    }
  },
  {
    "text": "194 Chapter 12 Arrays of objects\na variable is static or final involves two separate considerations: static\nmeans the variable is shared, and final means the variable is constant.\nNaming static final variables with capital letters is a common convention\nthat makes it easier to recognize their role in the class. Inside toString we\ncan refer to SUITS and RANKS as if they were local variables, but we can tell\nthat they are class variables.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 211,
      "page_label": "194"
    }
  },
  {
    "text": "that they are class variables.\nOne advantage of de\ufb01ningSUITS and RANKS as class variables is that they don\u2019t\nneed to be created (and garbage-collected) every timetoString is called. They\nmay also be needed in other methods and classes, so it\u2019s helpful to make them\navailable everywhere. Since the array variables are final, and the strings they\nreference are immutable, there is no danger in making them public.\n12.4 The compareTo method",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 211,
      "page_label": "194"
    }
  },
  {
    "text": "12.4 The compareTo method\nAs we saw in Section 11.7, it\u2019s helpful to create an equals method to test\nwhether two objects are equivalent.\npublic boolean equals(Card that) {\nreturn this.rank == that.rank\n&& this.suit == that.suit;\n}\nIt would also be nice to have a method for comparing cards, so we can tell\nif one is higher or lower than another. For primitive types, we can use the\ncomparison operators \u2013 <, >, etc. \u2013 to compare values. But these operators\ndon\u2019t work for object types.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 211,
      "page_label": "194"
    }
  },
  {
    "text": "don\u2019t work for object types.\nFor Strings, Java provides a compareTo method, as we saw in Section 9.6.\nLike the equals method, we can write our own version of compareTo for the\nclasses that we de\ufb01ne.\nSome types are \u201ctotally ordered\u201d, which means that you can compare any two\nvalues and tell which is bigger. Integers and strings are totally ordered.\nOther types are \u201cunordered\u201d, which means that there is no meaningful way\nto say that one element is bigger than another. In Java, the boolean type is",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 211,
      "page_label": "194"
    }
  },
  {
    "text": "unordered; if you try to compare true < false, you get a compiler error.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 211,
      "page_label": "194"
    }
  },
  {
    "text": "12.5 Cards are immutable 195\nThe set of playing cards is \u201cpartially ordered\u201d, which means that sometimes\nwe can compare cards and sometimes not. For example, we know that the 3\nof Clubs is higher than the 2 of Clubs, and the 3 of Diamonds is higher than\nthe 3 of Clubs. But which is better, the 3 of Clubs or the 2 of Diamonds? One\nhas a higher rank, but the other has a higher suit.\nTo make cards comparable, we have to decide which is more important: rank",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 212,
      "page_label": "195"
    }
  },
  {
    "text": "or suit. The choice is arbitrary, and it might be di\ufb00erent for di\ufb00erent games.\nBut when you buy a new deck of cards, it comes sorted with all the Clubs\ntogether, followed by all the Diamonds, and so on. So for now, let\u2019s say that\nsuit is more important.\nWith that decided, we can write compareTo as follows:\npublic int compareTo(Card that) {\nif (this.suit < that.suit) {\nreturn -1;\n}\nif (this.suit > that.suit) {\nreturn 1;\n}\nif (this.rank < that.rank) {\nreturn -1;\n}\nif (this.rank > that.rank) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 212,
      "page_label": "195"
    }
  },
  {
    "text": "return -1;\n}\nif (this.rank > that.rank) {\nreturn 1;\n}\nreturn 0;\n}\ncompareTo returns 1 if this wins, -1 if that wins, and 0 if they are equivalent.\nIt compares suits \ufb01rst. If the suits are the same, it compares ranks. If the\nranks are also the same, it returns 0.\n12.5 Cards are immutable\nThe instance variables of Card are private, so they can\u2019t be accessed from\nother classes. We can provide getters to allow other classes to read the rank\nand suit values:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 212,
      "page_label": "195"
    }
  },
  {
    "text": "196 Chapter 12 Arrays of objects\npublic int getRank() {\nreturn this.rank;\n}\npublic int getSuit() {\nreturn this.suit;\n}\nWhether or not to provide setters is a design decision. If we did, cards would\nbe mutable, so you could transform one card into another. That is probably\nnot a feature we need, and in general mutable objects are more error-prone.\nSo it might be better to make cards immutable. To do that, all we have to do\nis not provide any modi\ufb01er methods (including setters).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 213,
      "page_label": "196"
    }
  },
  {
    "text": "That\u2019s easy enough, but it is not foolproof, because some fool might come\nalong later and add a modi\ufb01er. We can prevent that possibility by declaring\nthe instance variables final:\npublic class Card {\nprivate final int rank;\nprivate final int suit;\n...\n}\nYou can still assign values to these variables inside a constructor. But if\nsomeone writes a method that tries to modify these variables, they\u2019ll get a\ncompiler error.\n12.6 Arrays of cards",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 213,
      "page_label": "196"
    }
  },
  {
    "text": "compiler error.\n12.6 Arrays of cards\nJust as you can create an array of String objects, you can create an array of\nCard objects. The following statement creates an array of 52 cards:\nCard[] cards = new Card[52];\nFigure 12.2 shows the state diagram for this array.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 213,
      "page_label": "196"
    }
  },
  {
    "text": "12.6 Arrays of cards 197\n1 2 3 510\ncards\nFigure 12.2: State diagram of an unpopulated Card array.\nAlthough we call it an \u201carray of cards\u201d, the array containsreferencesto objects;\nit does not contain the Card objects themselves. The elements are initialized\nto null. You can access the elements of the array in the usual way:\nif (cards[0] == null) {\nSystem.out.println(\"No card yet!\");\n}\nBut if you try to access the instance variables of the non-existent Cards, you\nwill get a NullPointerException.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 214,
      "page_label": "197"
    }
  },
  {
    "text": "will get a NullPointerException.\ncards[0].rank // NullPointerException\nThat code won\u2019t work until we put cards in the array. One way to populate\nthe array is to write nested for loops:\nint index = 0;\nfor (int suit = 0; suit <= 3; suit++) {\nfor (int rank = 1; rank <= 13; rank++) {\ncards[index] = new Card(rank, suit);\nindex++;\n}\n}\nThe outer loop iterates suits from 0 to 3. For each suit, the inner loop iterates\nranks from 1 to 13. Since the outer loop runs 4 times, and the inner loop runs",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 214,
      "page_label": "197"
    }
  },
  {
    "text": "13 times for each suit, the body is executed 52 times.\nWe use a separate variable index to keep track of where in the array the next\ncard should go. Figure 12.3 shows what the array looks like after the \ufb01rst two\ncards have been created.\nWhen you work with arrays, it is convenient to have a method that displays\nthe contents. We have seen the pattern for traversing an array several times,\nso the following method should be familiar:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 214,
      "page_label": "197"
    }
  },
  {
    "text": "198 Chapter 12 Arrays of objects\n2\n0suit\nrank1\n0suit\nrank\n1 2 3 510\ncards\nCard Card\nFigure 12.3: State diagram of a Card array with two cards.\npublic static void printDeck(Card[] cards) {\nfor (int i = 0; i < cards.length; i++) {\nSystem.out.println(cards[i]);\n}\n}\nSince cards has type Card[], an element of cards has type Card. So println\ninvokes the toString method in the Card class. This method is similar to\ninvoking System.out.println(Arrays.toString(cards)).\n12.7 Sequential search",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 215,
      "page_label": "198"
    }
  },
  {
    "text": "12.7 Sequential search\nThe next method we\u2019ll write is search, which takes an array of cards and a\nCard object as parameters. It returns the index where the Card appears in the\narray, or -1 if it doesn\u2019t. This version of search uses the algorithm we saw in\nSection 8.6, which is called sequential search:\npublic static int search(Card[] cards, Card target) {\nfor (int i = 0; i < cards.length; i++) {\nif (cards[i].equals(target)) {\nreturn i;\n}\n}\nreturn -1;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 215,
      "page_label": "198"
    }
  },
  {
    "text": "12.8 Binary search 199\nThe method returns as soon as it discovers the card, which means we don\u2019t\nhave to traverse the entire array if we \ufb01nd the target. If we get to the end\nof the loop, we know the card is not in the array. Notice that this algorithm\ndepends on the equals method.\nIf the cards in the array are not in order, there is no way to search faster than\nsequential search. We have to look at every card, because otherwise we can\u2019t",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 216,
      "page_label": "199"
    }
  },
  {
    "text": "be certain the card we want is not there. But if the cards are in order, we can\nuse better algorithms.\nWe will learn in the next chapter how to sort arrays. If you pay the price to\nkeep them sorted, \ufb01nding elements becomes much easier. Especially for large\narrays, sequential search is rather ine\ufb03cient.\n12.8 Binary search\nWhen you look for a word in a dictionary, you don\u2019t just search page by page\nfrom front to back. Since the words are in alphabetical order, you probably",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 216,
      "page_label": "199"
    }
  },
  {
    "text": "use a binary search algorithm:\n1. Start on a page near the middle of the dictionary.\n2. Compare a word on the page to the word you are looking for. If you \ufb01nd\nit, stop.\n3. If the word on the page comes before the word you are looking for, \ufb02ip\nto somewhere later in the dictionary and go to step 2.\n4. If the word on the page comes after the word you are looking for, \ufb02ip to\nsomewhere earlier in the dictionary and go to step 2.\nIf you \ufb01nd two adjacent words on the page and your word comes between",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 216,
      "page_label": "199"
    }
  },
  {
    "text": "them, you can conclude that your word is not in the dictionary.\nGetting back to the array of cards, we can write a faster version of search if\nwe know the cards are in order:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 216,
      "page_label": "199"
    }
  },
  {
    "text": "200 Chapter 12 Arrays of objects\npublic static int binarySearch(Card[] cards, Card target) {\nint low = 0;\nint high = cards.length - 1;\nwhile (low <= high) {\nint mid = (low + high) / 2; // step 1\nint comp = cards[mid].compareTo(target);\nif (comp == 0) { // step 2\nreturn mid;\n} else if (comp < 0) { // step 3\nlow = mid + 1;\n} else { // step 4\nhigh = mid - 1;\n}\n}\nreturn -1;\n}\nFirst, we declare low and high variables to represent the range we are search-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 217,
      "page_label": "200"
    }
  },
  {
    "text": "ing. Initially we search the entire array, from 0 to length - 1.\nInside the while loop, we repeat the four steps of binary search:\n1. Choose an index between low and high \u2013 call it mid \u2013 and compare the\ncard at mid to the target.\n2. If you found the target, return the index.\n3. If the card at mid is lower than the target, search the range frommid + 1\nto high.\n4. If the card at mid is higher than the target, search the range from low\nto mid - 1.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 217,
      "page_label": "200"
    }
  },
  {
    "text": "to mid - 1.\nIf low exceeds high, there are no cards in the range, so we break out of the\nloop and return -1. Notice that this algorithm depends on the compareTo\nmethod of the object.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 217,
      "page_label": "200"
    }
  },
  {
    "text": "12.9 Tracing the code 201\n12.9 Tracing the code\nTo see how binary search works, it\u2019s helpful to add the following print state-\nment at the beginning of the loop:\nSystem.out.println(low + \", \" + high);\nIf we invoke binarySearch like this:\nCard card = new Card(11, 0);\nSystem.out.println(binarySearch(cards, card));\nWe expect to \ufb01nd this card at position 10. Here is the result:\n0, 51\n0, 24\n0, 11\n6, 11\n9, 11\n10\nIf we search for a card that\u2019s not in the array, like new Card(15, 1), which is",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 218,
      "page_label": "201"
    }
  },
  {
    "text": "the \u201c15 of Diamonds\u201d, we get the following:\n0, 51\n26, 51\n26, 37\n26, 30\n26, 27\n-1\nEach time through the loop, we cut the distance between low and high in\nhalf. After k iterations, the number of remaining cards is 52 /2k. To \ufb01nd the\nnumber of iterations it takes to complete, we set 52 /2k = 1 and solve for k.\nThe result is log 2 52, which is about 5.7. So we might have to look at 5 or 6\ncards, as opposed to all 52 if we did a sequential search.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 218,
      "page_label": "201"
    }
  },
  {
    "text": "More generally, if the array contains n elements, binary search requires log 2 n\ncomparisons, and sequential search requires n. For large values of n, binary\nsearch can be much faster.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 218,
      "page_label": "201"
    }
  },
  {
    "text": "202 Chapter 12 Arrays of objects\n12.10 Recursive version\nAnother way to write a binary search is with a recursive method. The trick\nis to write a method that takes low and high as parameters, and turn steps 3\nand 4 into recursive invocations. Here\u2019s what the code looks like:\npublic static int binarySearch(Card[] cards, Card target,\nint low, int high) {\nif (high < low) {\nreturn -1;\n}\nint mid = (low + high) / 2; // step 1\nint comp = cards[mid].compareTo(target);\nif (comp == 0) { // step 2",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 219,
      "page_label": "202"
    }
  },
  {
    "text": "if (comp == 0) { // step 2\nreturn mid;\n} else if (comp < 0) { // step 3\nreturn binarySearch(cards, target, mid + 1, high);\n} else { // step 4\nreturn binarySearch(cards, target, low, mid - 1);\n}\n}\nInstead of a while loop, we have an if statement to terminate the recursion.\nIf high is less than low, there are no cards between them, and we conclude\nthat the card is not in the array.\nTwo common errors in recursive programs are (1) forgetting to include a base",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 219,
      "page_label": "202"
    }
  },
  {
    "text": "case, and (2) writing the recursive call so that the base case is never reached.\nEither error causes in\ufb01nite recursion and a StackOverflowException.\n12.11 Vocabulary\nencode: To represent one set of values using another set of values, by con-\nstructing a mapping between them.\nclass variable: A variable declared within a class as static. There is only\none copy of a class variable, no matter how many objects there are.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 219,
      "page_label": "202"
    }
  },
  {
    "text": "12.12 Exercises 203\nsequential search: An algorithm that searches array elements, one by one,\nuntil a target value is found.\nbinary search: An algorithm that searches a sorted array by starting in the\nmiddle, comparing and element to the target, and eliminating half of the\nremaining elements.\n12.12 Exercises\nThe code for this chapter is in the ch12 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 220,
      "page_label": "203"
    }
  },
  {
    "text": "the exercises, we recommend that you compile and run the examples.\nExercise 12.1 Encapsulate the deck-building code from Section 12.6 in\na method called makeDeck that takes no parameters and returns a fully-\npopulated array of Cards.\nExercise 12.2 In some card games, Aces are ranked higher than Kings.\nModify the compareTo method to implement this ordering.\nExercise 12.3 In Poker a \u201c\ufb02ush\u201d is a hand that contains \ufb01ve or more cards\nof the same suit. A hand can contain any number of cards.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 220,
      "page_label": "203"
    }
  },
  {
    "text": "1. Write a method called suitHist that takes an array of cards as a pa-\nrameter and that returns a histogram of the suits in the hand. Your\nsolution should only traverse the array once.\n2. Write a method called hasFlush that takes an array of cards as a param-\neter and returns true if the hand contains a \ufb02ush (andfalse otherwise).\nExercise 12.4 Working with cards is more interesting if you can display\nthem on the screen. If you have not already read Appendix B about 2D",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 220,
      "page_label": "203"
    }
  },
  {
    "text": "graphics, you should read it before working on this exercise. In the code\ndirectory for this chapter, ch12, you will \ufb01nd:\n\u0088 cardset-oxymoron: A directory containing images of playing cards.\n\u0088 CardTable.java: A sample program that demonstrates how to read and\ndisplay images.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 220,
      "page_label": "203"
    }
  },
  {
    "text": "204 Chapter 12 Arrays of objects\nThis code demonstrates the use of a 2D array, speci\ufb01cally an array of images.\nThe declaration looks like this:\nprivate Image[][] images;\nThe variable images refers to a 2D array of Image objects, which are de\ufb01ned\nin the java.awt package. Here\u2019s the code that creates the array itself:\nimages = new Image[14][4];\nThe array has 14 rows (one for each rank plus an unused row for rank 0) and\n4 columns (one for each suit). Here\u2019s the loop that populates the array:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 221,
      "page_label": "204"
    }
  },
  {
    "text": "String cardset = \"cardset-oxymoron\";\nString suits = \"cdhs\";\nfor (int suit = 0; suit <= 3; suit++) {\nchar c = suits.charAt(suit);\nfor (int rank = 1; rank <= 13; rank++) {\nString s = String.format(\"%s/%02d%c.gif\",\ncardset, rank, c);\nimages[rank][suit] = new ImageIcon(s).getImage();\n}\n}\nThe variable cardset contains the name of the directory that contains the\nimage \ufb01les. suits is a string that contains the single-letter abbreviations for",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 221,
      "page_label": "204"
    }
  },
  {
    "text": "the suits. These strings are used to assemble s, which contains the \ufb01lename\nfor each image. For example, when rank=1 and suit=2, the value of s is\n\"cardset-oxymoron/01h.gif\", which is an image of the Ace of Hearts.\nThe last line of the loop reads the image \ufb01le, extracts an Image object, and\nassigns it to a location in the array, as speci\ufb01ed by the indexes rank and suit.\nFor example, the image of the Ace of Hearts is stored in row 1, column 2.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 221,
      "page_label": "204"
    }
  },
  {
    "text": "If you compile and run CardTable.java, you should see images of a deck of\ncards laid out on a green table. You can use this class as a starting place to\nimplement your own card games.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 221,
      "page_label": "204"
    }
  },
  {
    "text": "Chapter 13\nObjects of arrays\nIn the previous chapter, we de\ufb01ned a class to represent cards and used an\narray of Card objects to represent a deck.\nIn this chapter, we take another step toward object-oriented programming by\nde\ufb01ning a class to represent a deck of cards. And we present algorithms for\nshu\ufb04ing and sorting arrays.\nThe code for this chapter is in Card.java and Deck.java, which are in the\ndirectory ch13 in the repository for this book. Instructions for downloading",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 222,
      "page_label": "205"
    }
  },
  {
    "text": "this code are on page xv.\n13.1 The Deck class\nThe main idea of this chapter is to create a Deck class that encapsulates an\narray of Cards. The initial class de\ufb01nition looks like this:\npublic class Deck {\nprivate Card[] cards;\npublic Deck(int n) {\nthis.cards = new Card[n];\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 222,
      "page_label": "205"
    }
  },
  {
    "text": "206 Chapter 13 Objects of arrays\nThe constructor initializes the instance variable with an array of n cards, but\nit doesn\u2019t create any card objects. Figure 13.1 shows what a Deck looks like\nwith no cards.\ncardsdeck\nDeck\nFigure 13.1: State diagram of an unpopulated Deck object.\nWe\u2019ll add a second constructor that makes a standard 52-card deck and pop-\nulates it with Card objects:\npublic Deck() {\nthis.cards = new Card[52];\nint index = 0;\nfor (int suit = 0; suit <= 3; suit++) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 223,
      "page_label": "206"
    }
  },
  {
    "text": "for (int suit = 0; suit <= 3; suit++) {\nfor (int rank = 1; rank <= 13; rank++) {\nthis.cards[index] = new Card(rank, suit);\nindex++;\n}\n}\n}\nThis method is similar to the example in Section 12.6; we just turned it into\na constructor. We can now create a standard Deck like this:\nDeck deck = new Deck();\nNow that we have a Deck class, we have a logical place to put methods that\npertain to decks. Looking at the methods we have written so far, one obvious\ncandidate is printDeck from Section 12.6.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 223,
      "page_label": "206"
    }
  },
  {
    "text": "candidate is printDeck from Section 12.6.\npublic void print() {\nfor (int i = 0; i < this.cards.length; i++) {\nSystem.out.println(this.cards[i]);\n}\n}\nWhen you transform a static method into an instance method, it usually gets\nshorter. We can simply type deck.print() to invoke the instance method.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 223,
      "page_label": "206"
    }
  },
  {
    "text": "13.2 Shu\ufb04ing decks 207\n13.2 Shu\ufb04ing decks\nFor most card games you need to be able to shu\ufb04e the deck; that is, put\nthe cards in a random order. In Section 8.7 we saw how to generate random\nnumbers, but it is not obvious how to use them to shu\ufb04e a deck.\nOne possibility is to model the way humans shu\ufb04e, which is usually dividing\nthe deck in two halves and then choosing alternately from each one. Since\nhumans usually don\u2019t shu\ufb04e perfectly, after about seven iterations the order",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 224,
      "page_label": "207"
    }
  },
  {
    "text": "of the deck is pretty well randomized.\nBut a computer program would have the annoying property of doing a perfect\nshu\ufb04e every time, which is not very random. In fact, after eight perfect\nshu\ufb04es, you would \ufb01nd the deck back in the order you started in! (For more\ninformation, see https://en.wikipedia.org/wiki/Faro_shuffle.)\nA better shu\ufb04ing algorithm is to traverse the deck one card at a time, and at\neach iteration choose two cards and swap them. Here is an outline of how this",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 224,
      "page_label": "207"
    }
  },
  {
    "text": "algorithm works. To sketch the program, we will use a combination of Java\nstatements and English. This technique is sometimes called pseudocode.\nfor each index i {\n// choose a random number between i and length - 1\n// swap the ith card and the randomly-chosen card\n}\nThe nice thing about pseudocode is that it often makes clear what methods\nyou are going to need. In this case, we need a method that chooses a random\ninteger between low and high, and a method that takes two indexes and swaps",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 224,
      "page_label": "207"
    }
  },
  {
    "text": "the cards at those positions. Methods like these are called helper methods,\nbecause they help you implement more complex algorithms.\nAnd this process \u2013 writing pseudocode \ufb01rst and then writing methods to make\nit work \u2013 is called top-down development (see https://en.wikipedia.\norg/wiki/Top-down_and_bottom-up_design).\nOne of the exercises at the end of the chapter asks you to write the helper\nmethods randomInt and swapCards and use them to implement shuffle.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 224,
      "page_label": "207"
    }
  },
  {
    "text": "208 Chapter 13 Objects of arrays\n13.3 Selection sort\nNow that we have messed up the deck, we need a way to put it back in order.\nThere is an algorithm for sorting that is ironically similar to the algorithm for\nshu\ufb04ing. It\u2019s called selection sort, because it works by traversing the array\nrepeatedly and selecting the lowest (or highest) remaining card each time.\nDuring the \ufb01rst iteration, we \ufb01nd the lowest card and swap it with the card",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 225,
      "page_label": "208"
    }
  },
  {
    "text": "in the 0th position. During the ith iteration, we \ufb01nd the lowest card to the\nright of iand swap it with the ith card. Here is pseudocode for selection sort:\npublic void selectionSort() {\nfor each index i {\n// find the lowest card at or to the right of i\n// swap the ith card and the lowest card found\n}\n}\nAgain, the pseudocode helps with the design of the helper methods. In this\nalgorithm we can use swapCards again, so we only need a method to \ufb01nd the\nlowest card; we\u2019ll call it indexLowest.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 225,
      "page_label": "208"
    }
  },
  {
    "text": "lowest card; we\u2019ll call it indexLowest.\nOne of the exercises at the end of the chapter asks you to write the helper\nmethod indexLowest and use it to implement selectionSort.\n13.4 Merge sort\nSelection sort is a simple algorithm, but it is not very e\ufb03cient. To sort n\nitems, it has to traverse the array n\u22121 times. Each traversal takes an amount\nof time proportional to n. The total time, therefore, is proportional to n2.\nIn the next two sections, we\u2019ll develop a more e\ufb03cient algorithm calledmerge",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 225,
      "page_label": "208"
    }
  },
  {
    "text": "sort. To sort n items, merge sort takes time proportional to nlog2 n. That\nmay not seem impressive, but as n gets big, the di\ufb00erence between n2 and\nnlog2 n can be enormous.\nFor example, log2 of one million is around 20. So if you had to sort a million\nnumbers, selection sort would require one trillion steps; merge sort would\nrequire only 20 million.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 225,
      "page_label": "208"
    }
  },
  {
    "text": "13.5 Subdecks 209\nThe idea behind merge sort is this: if you have two subdecks, each of which\nhas already been sorted, it is easy and fast to merge them into a single, sorted\ndeck. Try this out with a deck of cards:\n1. Form two subdecks with about 10 cards each, and sort them so that\nwhen they are face up the lowest cards are on top. Place both decks face\nup in front of you.\n2. Compare the top card from each deck and choose the lower one. Flip it\nover and add it to the merged deck.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 226,
      "page_label": "209"
    }
  },
  {
    "text": "over and add it to the merged deck.\n3. Repeat step 2 until one of the decks is empty. Then take the remaining\ncards and add them to the merged deck.\nThe result should be a single sorted deck. In the next few sections, we\u2019ll\nexplain how to implement this algorithm in Java.\n13.5 Subdecks\nThe \ufb01rst step of merge sort is to split the deck into two subdecks, each with\nabout half the cards. So we might want a method, subdeck, that takes a deck",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 226,
      "page_label": "209"
    }
  },
  {
    "text": "and a range of indexes. It returns a new deck that contains the speci\ufb01ed subset\nof the cards:\npublic Deck subdeck(int low, int high) {\nDeck sub = new Deck(high - low + 1);\nfor (int i = 0; i < sub.cards.length; i++) {\nsub.cards[i] = this.cards[low + i];\n}\nreturn sub;\n}\nThe \ufb01rst line creates an unpopulated subdeck. Inside thefor loop, the subdeck\ngets populated with copies of references from the deck.\nThe length of the subdeck is high - low + 1, because both the low card and",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 226,
      "page_label": "209"
    }
  },
  {
    "text": "the high card are included. This sort of computation can be confusing, and\nforgetting the + 1 often leads to \u201co\ufb00-by-one\u201d errors. Drawing a picture is\nusually the best way to avoid them.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 226,
      "page_label": "209"
    }
  },
  {
    "text": "210 Chapter 13 Objects of arrays\nFigure 13.2 is a state diagram of a subdeck with low = 0 and high = 4. The\nresult is a hand with \ufb01ve cards that are shared with the original deck; that is,\nthey are aliased.\ndeck cards\nsub cards\nDeck\nDeck\nFigure 13.2: State diagram showing the e\ufb00ect of subdeck.\nAliasing might not be a good idea, because changes to shared cards would be\nre\ufb02ected in multiple decks. But since Card objects are immutable, this kind\nof aliasing is not a problem at all.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 227,
      "page_label": "210"
    }
  },
  {
    "text": "of aliasing is not a problem at all.\n13.6 Merging decks\nThe next helper method we need is merge, which takes two sorted subdecks\nand returns a new deck containing all cards from both decks, in order. Here\u2019s\nwhat the algorithm looks like in pseudocode, assuming the subdecks are named\nd1 and d2:\npublic static Deck merge(Deck d1, Deck d2) {\n// create a new deck big enough for all the cards\n// use the index i to keep track of where we are at in\n// the first deck, and the index j for the second deck",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 227,
      "page_label": "210"
    }
  },
  {
    "text": "int i = 0;\nint j = 0;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 227,
      "page_label": "210"
    }
  },
  {
    "text": "13.7 Adding recursion 211\n// the index k traverses the result deck\nfor (int k = 0; k < result.cards.length; k++) {\n// if d1 is empty, d2 wins\n// if d2 is empty, d1 wins\n// otherwise, compare the two cards\n// add the winner to the new deck at position k\n// increment either i or j\n}\n// return the new deck\n}\nOne of the exercises at the end of the chapter asks you to implement merge.\n13.7 Adding recursion\nOnce your merge method is working correctly, you can try out a simple version\nof merge sort:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 228,
      "page_label": "211"
    }
  },
  {
    "text": "of merge sort:\npublic Deck almostMergeSort() {\n// divide the deck into two subdecks\n// sort the subdecks using selectionSort\n// merge the two halves and return the result\n}\nAn exercise at the end of the chapter asks you to implement this algorithm.\nOnce you get it working, the real fun begins! The magical thing about merge\nsort is that it is inherently recursive.\nAt the point where you sort the subdecks, why should you invoke the slower",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 228,
      "page_label": "211"
    }
  },
  {
    "text": "algorithm, selectionSort? Why not invoke the spi\ufb00y new mergeSort you\nare in the process of writing? Not only is that a good idea, it is necessary to\nachieve the log2 performance advantage.\nTo make mergeSort work recursively, you have to add a base case; otherwise\nit repeats forever. A simple base case is a subdeck with 0 or 1 cards. If\nmergeSort receives such a small subdeck, it can return it unmodi\ufb01ed since it\nwould already be sorted.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 228,
      "page_label": "211"
    }
  },
  {
    "text": "212 Chapter 13 Objects of arrays\nThe recursive version of mergeSort should look something like this:\npublic Deck mergeSort() {\n// if the deck is 0 or 1 cards, return it\n// divide the deck into two subdecks\n// sort the subdecks using mergeSort\n// merge the two halves and return the result\n}\nAs usual, there are two ways to think about recursive programs: you can think\nthrough the entire \ufb02ow of execution, or you can make the \u201cleap of faith\u201d (see",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 229,
      "page_label": "212"
    }
  },
  {
    "text": "Section 6.8). This example should encourage you to make the leap of faith.\nWhen you used selectionSort to sort the subdecks, you didn\u2019t feel compelled\nto follow the \ufb02ow of execution. You just assumed it works because you had\nalready debugged it. And all you did to make mergeSort recursive was replace\none sorting algorithm with another. There is no reason to read the program\nany di\ufb00erently.\nWell, almost. You might have to give some thought to getting the base case",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 229,
      "page_label": "212"
    }
  },
  {
    "text": "right and making sure that you reach it eventually. But other than that,\nwriting the recursive version should be no problem.\n13.8 Vocabulary\npseudocode: A way of designing programs by writing rough drafts in a com-\nbination of English and Java.\nhelper method: Often a small method that does not do anything enormously\nuseful by itself, but which helps another, more complex method.\ntop-down development: Breaking down a problem into sub-problems, and\nsolving each sub-problem one at a time.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 229,
      "page_label": "212"
    }
  },
  {
    "text": "solving each sub-problem one at a time.\nselection sort: A simple sorting algorithm that searches for the smallest or\nlargest element n times.\nmerge sort: A recursive sorting algorithm that divides an array into two\nparts, sorts each part (using merge sort), and merges the results.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 229,
      "page_label": "212"
    }
  },
  {
    "text": "13.9 Exercises 213\n13.9 Exercises\nThe code for this chapter is in the ch13 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nExercise 13.1 You can learn more about the sorting algorithms in this\nchapter, and others, at http://www.sorting-algorithms.com/. This site\nincludes explanations of the algorithms, animations that show how they work,\nand analysis of their e\ufb03ciency.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 230,
      "page_label": "213"
    }
  },
  {
    "text": "and analysis of their e\ufb03ciency.\nExercise 13.2 The goal of this exercise is to implement the shu\ufb04ing algo-\nrithm from this chapter.\n1. In the repository for this book, you should \ufb01nd a \ufb01le called Deck.java\nthat contains the code in this chapter. Check that you can compile it in\nyour environment.\n2. Add a Deck method called randomInt that takes two integers, low and\nhigh, and returns a random integer between low and high, including\nboth. You can use the nextInt provided by java.util.Random, which",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 230,
      "page_label": "213"
    }
  },
  {
    "text": "we saw in Section 8.7. But you should avoid creating a Random object\nevery time randomInt is invoked.\n3. Write a method called swapCards that takes two indexes and swaps the\ncards at the given locations.\n4. Write a method called shuffle that uses the algorithm in Section 13.2.\nExercise 13.3 The goal of this exercise is to implement the sorting algo-\nrithms from this chapter. Use the Deck.java \ufb01le from the previous exercise\n(or create a new one from scratch).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 230,
      "page_label": "213"
    }
  },
  {
    "text": "(or create a new one from scratch).\n1. Write a method called indexLowest that uses the compareCard method\nto \ufb01nd the lowest card in a given range of the deck (from lowIndex to\nhighIndex, including both).\n2. Write a method called selectionSort that implements the selection sort\nalgorithm in Section 13.3.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 230,
      "page_label": "213"
    }
  },
  {
    "text": "214 Chapter 13 Objects of arrays\n3. Using the pseudocode in Section 13.4, write the method called merge.\nThe best way to test it is to build and shu\ufb04e a deck. Then use subdeck\nto form two small subdecks, and use selection sort to sort them. Then\nyou can pass the two halves to merge to see if it works.\n4. Write the simple version of mergeSort, the one that divides the deck\nin half, uses selectionSort to sort the two halves, and uses merge to\ncreate a new, sorted deck.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 231,
      "page_label": "214"
    }
  },
  {
    "text": "create a new, sorted deck.\n5. Write a recursive version of mergeSort. Remember that selectionSort\nis a modi\ufb01er and mergeSort is a pure method, which means that they\nget invoked di\ufb00erently:\ndeck.selectionSort(); // modifies an existing deck\ndeck = deck.mergeSort(); // replaces old deck with new\nExercise 13.4 The goal of this exercise is to practice top-down program-\nming by implementing \u201cinsertion sort\u201d. Read about insertion sort at http:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 231,
      "page_label": "214"
    }
  },
  {
    "text": "//www.sorting-algorithms.com/insertion-sort. Write a method named\ninsertionSort that implements this algorithm.\nExercise 13.5 Write atoString method for the Deck class. It should return\na single string that represents the cards in the deck. When it\u2019s printed, this\nstring should display the same results as the print method in Section 13.1.\nHint: You can use the + operator to concatenate strings, but it is not very\ne\ufb03cient. Consider using java.lang.StringBuilder; you can \ufb01nd the docu-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 231,
      "page_label": "214"
    }
  },
  {
    "text": "mentation by doing a web search for \u201cJava StringBuilder\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 231,
      "page_label": "214"
    }
  },
  {
    "text": "Chapter 14\nObjects of objects\nNow that we have classes that represent cards and decks, let\u2019s use them to\nmake a game! Crazy Eights is a classic card game for two or more players.\nThe main objective is to be the \ufb01rst player to get rid of all your cards. Here\u2019s\nhow to play:\n\u0088 Deal \ufb01ve or more cards to each player, and then deal one card face up to\ncreate the \u201cdiscard pile\u201d. Place the remaining cards face down to create\nthe \u201cdraw pile\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 232,
      "page_label": "215"
    }
  },
  {
    "text": "the \u201cdraw pile\u201d.\n\u0088 Each player takes turns placing a single card on the discard pile. The\ncard must match the rank or suit of the previously played card, or be an\neight, which is a \u201cwild card\u201d.\n\u0088 When players don\u2019t have a matching card or an eight, they must draw\nnew cards until they get one.\n\u0088 If the draw pile ever runs out, the discard pile is shu\ufb04ed (except the top\ncard) and becomes the new draw pile.\n\u0088 As soon as a player has no cards, the game ends and all other players",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 232,
      "page_label": "215"
    }
  },
  {
    "text": "score penalty points for their remaining cards. Eights are worth 20, face\ncards are worth 10, and all others are worth their rank.\nYou can read https://en.wikipedia.org/wiki/Crazy_Eights for more de-\ntails, but we have enough to get started.\nThe code for this chapter is in the directory ch14 in the repository for this\nbook. Instructions for downloading this code are on page xv.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 232,
      "page_label": "215"
    }
  },
  {
    "text": "216 Chapter 14 Objects of objects\n14.1 Decks and hands\nTo implement this game, we need to represent a deck of cards, a discard pile,\na draw pile, and a hand for each player. And we need to be able to deal, draw,\nand discard cards.\nThe Deck class from the previous chapter meets some of these requirements,\nbut there are two problems:\n\u0088 Hands and piles have di\ufb00erent sizes, and their sizes change as the game\nprogresses. Our implementation of Deck uses a Card array, and the size",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 233,
      "page_label": "216"
    }
  },
  {
    "text": "of an array can\u2019t change.\n\u0088 It\u2019s not clear that a Deck object is the right way to represent hands and\npiles. We might want new classes for other collections of cards.\nWe can solve the \ufb01rst problem by replacing theCard array with an ArrayList,\nwhich is in the java.util package. An ArrayList is a collection, which is\nan object that contains other objects.\nThe Java library provides a variety of collections. For our purposes,ArrayList",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 233,
      "page_label": "216"
    }
  },
  {
    "text": "is a good choice because it provides methods to add and remove elements, and\nit grows and shrinks automatically.\nTo solve the second problem, we can use a language feature calledinheritance.\nWe\u2019ll de\ufb01ne a new class, CardCollection, to represent a collection of cards.\nThen we\u2019ll de\ufb01ne Deck and Hand as subclasses of CardCollection.\nA subclass is a new class that \u201cextends\u201d an existing class; that is, it has the\nattributes and methods of the existing class, plus more. We\u2019ll see the details",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 233,
      "page_label": "216"
    }
  },
  {
    "text": "soon, but let\u2019s start with CardCollection:\n14.2 CardCollection\nHere\u2019s the beginning of a CardCollection class that uses ArrayList instead\nof a primitive array:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 233,
      "page_label": "216"
    }
  },
  {
    "text": "14.2 CardCollection 217\npublic class CardCollection {\nprivate String label;\nprivate ArrayList<Card> cards;\npublic CardCollection(String label) {\nthis.label = label;\nthis.cards = new ArrayList<Card>();\n}\n}\nWhen you declare an ArrayList, you specify the type it contains in angle\nbrackets (<>). This declaration says that cards is not just an ArrayList, it\u2019s\nan ArrayList of Card objects.\nThe constructor takes a string as an argument and assigns it to an instance",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 234,
      "page_label": "217"
    }
  },
  {
    "text": "variable, label. It also initializes cards with an empty ArrayList.\nArrayList provides a method, add, that adds an element to the collection.\nWe will write a CardCollection method that does the same thing:\npublic void addCard(Card card) {\nthis.cards.add(card);\n}\nUntil now, we have used this explicitly to make it easy to identify attributes.\nInside addCard and other instance methods, you can access instance variables\nwithout using the keyword this. So from here on, we will drop it:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 234,
      "page_label": "217"
    }
  },
  {
    "text": "public void addCard(Card card) {\ncards.add(card);\n}\nWe also need to be able to remove cards from a collection. The following\nmethod takes an index, removes the card at that location, and shifts the\nfollowing cards left to \ufb01ll the gap:\npublic Card popCard(int i) {\nreturn cards.remove(i);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 234,
      "page_label": "217"
    }
  },
  {
    "text": "218 Chapter 14 Objects of objects\nIf we are dealing cards from a shu\ufb04ed deck, we don\u2019t care which card gets\nremoved. It is most e\ufb03cient to choose the last one, so we don\u2019t have to shift\nany following cards. Here is an overloaded version of popCard that removes\nand returns the last card:\npublic Card popCard() {\nint i = size() - 1;\nreturn popCard(i);\n}\nNotice that popCard uses CardCollection\u2019s own size method, which in turn\ncalls the ArrayList\u2019s size method:\npublic int size() {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 235,
      "page_label": "218"
    }
  },
  {
    "text": "public int size() {\nreturn cards.size();\n}\nFor convenience,CardCollection also provides an empty method that returns\ntrue when size is zero:\npublic boolean empty() {\nreturn cards.size() == 0;\n}\nMethods like addCard, popCard, and size, which invoke another method with-\nout doing much additional work, are called wrapper methods. We will use\nthese wrapper methods to implement less trivial methods, like deal:\npublic void deal(CardCollection that, int n) {\nfor (int i = 0; i < n; i++) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 235,
      "page_label": "218"
    }
  },
  {
    "text": "for (int i = 0; i < n; i++) {\nCard card = popCard();\nthat.addCard(card);\n}\n}\nThe deal method removes cards from the collection it is invoked on, this,\nand adds them to the collection it gets as a parameter, that. The second\nparameter, n, is the number of cards to deal.\nTo access the elements of an ArrayList, you can\u2019t use the array [] operator.\nInstead, you have to use the methods get and set. Here is a wrapper for get:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 235,
      "page_label": "218"
    }
  },
  {
    "text": "14.3 Inheritance 219\npublic Card getCard(int i) {\nreturn cards.get(i);\n}\nThe last method gets the last card (but doesn\u2019t remove it):\npublic Card last() {\nint i = size() - 1;\nreturn cards.get(i);\n}\nIn order to control the ways card collections are modi\ufb01ed, we don\u2019t provide\na wrapper for set. The only modi\ufb01ers we provide are the two versions of\npopCard and the following version of swapCards:\npublic void swapCards(int i, int j) {\nCard temp = cards.get(i);\ncards.set(i, cards.get(j));",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 236,
      "page_label": "219"
    }
  },
  {
    "text": "cards.set(i, cards.get(j));\ncards.set(j, temp);\n}\nWe use swapCards to implement shuffle, which we described in Section 13.2:\npublic void shuffle() {\nRandom random = new Random();\nfor (int i = size() - 1; i > 0; i--) {\nint j = random.nextInt(i);\nswapCards(i, j);\n}\n}\nArrayList provides additional methods we aren\u2019t using here. You can read\nabout them in the documentation, which you can \ufb01nd by doing a web search\nfor \u201cJava ArrayList\u201d.\n14.3 Inheritance",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 236,
      "page_label": "219"
    }
  },
  {
    "text": "for \u201cJava ArrayList\u201d.\n14.3 Inheritance\nAt this point we have a class that represents a collection of cards. Next we\u2019ll\nuse it to de\ufb01ne Deck and Hand. Here is the complete de\ufb01nition of Deck:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 236,
      "page_label": "219"
    }
  },
  {
    "text": "220 Chapter 14 Objects of objects\npublic class Deck extends CardCollection {\npublic Deck(String label) {\nsuper(label);\nfor (int suit = 0; suit <= 3; suit++) {\nfor (int rank = 1; rank <= 13; rank++) {\ncards.add(new Card(rank, suit));\n}\n}\n}\n}\nThe \ufb01rst line uses the keyword extends to indicate that Deck extends the\nclass CardCollection. That means a Deck object has the same instance\nvariables and methods as a CardCollection. Another way to say the same",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 237,
      "page_label": "220"
    }
  },
  {
    "text": "thing is that Deck \u201cinherits from\u201d CardCollection. We could also say that\nCardCollection is a superclass, and Deck is one of its subclasses.\nIn Java, classes may only extend one superclass. Classes that do not specify a\nsuperclass with extends automatically inherit from java.lang.Object. So in\nthis example, Deck extends CardCollection, which in turn extends Object.\nThe Object class provides the default equals and toString methods, among\nother things.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 237,
      "page_label": "220"
    }
  },
  {
    "text": "other things.\nConstructors are not inherited, but all other public attributes and methods\nare. The only additional method in Deck, at least for now, is a constructor.\nSo you can create a Deck object like this:\nDeck deck = new Deck(\"Deck\");\nThe \ufb01rst line of the constructor uses something new,super, which is a keyword\nthat refers to the superclass of the current class. When super is used like a\nmethod, as in this example, it invokes the constructor of the superclass.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 237,
      "page_label": "220"
    }
  },
  {
    "text": "So in this case, super invokes the CardCollection constructor, which initial-\nizes the attributes label and cards. When it returns, the Deck constructor\nresumes and populates the (empty) ArrayList with Card objects.\nThat\u2019s it for the Deck class. Next we need a way to represent a hand, which\nis the collection of cards held by a player, and a pile, which is a collection of",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 237,
      "page_label": "220"
    }
  },
  {
    "text": "14.4 Dealing cards 221\ncards on the table. We could de\ufb01ne two classes, one for hands and one for\npiles, but there is not much di\ufb00erence between them. So we\u2019ll use one class,\ncalled Hand, for both hands and piles. Here\u2019s what the de\ufb01nition looks like:\npublic class Hand extends CardCollection {\npublic Hand(String label) {\nsuper(label);\n}\npublic void display() {\nSystem.out.println(getLabel() + \": \");\nfor (int i = 0; i < size(); i++) {\nSystem.out.println(getCard(i));\n}\nSystem.out.println();\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 238,
      "page_label": "221"
    }
  },
  {
    "text": "}\nSystem.out.println();\n}\n}\nLike Deck, Hand extends CardCollection, so it inherits methods likegetLabel,\nsize, and getCard, which are used in display. Hand also provides a construc-\ntor, which invokes the constructor of CardCollection (and nothing else).\nIn summary, a Deck is just like a CardCollection, but it provides a di\ufb00erent\nconstructor. And a Hand is just like a CardCollection, but it provides an\nadditional method, display.\n14.4 Dealing cards",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 238,
      "page_label": "221"
    }
  },
  {
    "text": "additional method, display.\n14.4 Dealing cards\nAt this point we can create a Deck and start dealing cards. Here\u2019s a simple\nexample that deals \ufb01ve cards to a hand, and deals the rest into a draw pile:\nDeck deck = new Deck(\"Deck\");\ndeck.shuffle();\nHand hand = new Hand(\"Hand\");\ndeck.deal(hand, 5);\nhand.display();",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 238,
      "page_label": "221"
    }
  },
  {
    "text": "222 Chapter 14 Objects of objects\nHand drawPile = new Hand(\"Draw Pile\");\ndeck.dealAll(drawPile);\nSystem.out.printf(\"Draw Pile has %d cards.\\n\",\ndrawPile.size());\nCardCollection provides dealAll, which deals all of the remaining cards.\nHere\u2019s the output of the previous example:\nHand:\n5 of Diamonds\nAce of Hearts\n6 of Clubs\n6 of Diamonds\n2 of Clubs\nDraw Pile has 47 cards.\nOf course, if you run this example you will probably get a di\ufb00erent hand,\nbecause the deck is shu\ufb04ed randomly.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 239,
      "page_label": "222"
    }
  },
  {
    "text": "because the deck is shu\ufb04ed randomly.\nIf you are a careful reader, you might notice something strange about this\nexample. Take another look at the de\ufb01nition of deal:\npublic void deal(CardCollection that, int n) {\nfor (int i = 0; i < n; i++) {\nCard card = popCard();\nthat.addCard(card);\n}\n}\nNotice that the \ufb01rst parameter is supposed to be a CardCollection. But we\ninvoked it like this:\nHand hand = new Hand(\"Hand\");\ndeck.deal(hand, 5);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 239,
      "page_label": "222"
    }
  },
  {
    "text": "Hand hand = new Hand(\"Hand\");\ndeck.deal(hand, 5);\nThe argument is a Hand, not a CardCollection. So why is this example\nlegal? It\u2019s because Hand is a subclass of CardCollection, so a Hand object\nis also considered to be a CardCollection object. If a method expects a\nCardCollection, you can give it a Hand, a Deck, or a CardCollection.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 239,
      "page_label": "222"
    }
  },
  {
    "text": "14.5 The Player class 223\nBut it doesn\u2019t work the other way around: not every CardCollection is\na Hand, so if a method expects a Hand, you have to give it a Hand, not a\nCardCollection.\nIf it seems strange that an object can belong to more than one type, remember\nthat this happens in real life, too. Every cat is also a mammal, and every\nmammal is also an animal. But not every animal is a mammal, and not every\nmammal is a cat.\n14.5 The Player class",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 240,
      "page_label": "223"
    }
  },
  {
    "text": "mammal is a cat.\n14.5 The Player class\nThe classes we have de\ufb01ned so far could be used for any card game; we have\nnot yet implemented any of the rules speci\ufb01c to Crazy Eights . And that\u2019s\nprobably a good thing, since it makes it easy to reuse these classes if we want\nto make another game in the future.\nBut now it\u2019s time to implement the rules. We\u2019ll use two classes: Player,\nwhich encapsulates player strategy, and Eights, which creates and maintains",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 240,
      "page_label": "223"
    }
  },
  {
    "text": "the state of the game. Here is the beginning of the Player de\ufb01nition:\npublic class Player {\nprivate String name;\nprivate Hand hand;\npublic Player(String name) {\nthis.name = name;\nthis.hand = new Hand(name);\n}\nA Player has two private attributes: a name and a hand. The constructor\ntakes the player\u2019s name as a string and saves it in an instance variable. In this\nexample, we have to use this to distinguish between the instance variable and\nthe parameter with the same name.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 240,
      "page_label": "223"
    }
  },
  {
    "text": "the parameter with the same name.\nThe primary method that Player provides is play, which decides which card\nto discard during each turn:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 240,
      "page_label": "223"
    }
  },
  {
    "text": "224 Chapter 14 Objects of objects\npublic Card play(Eights eights, Card prev) {\nCard card = searchForMatch(prev);\nif (card == null) {\ncard = drawForMatch(eights, prev);\n}\nreturn card;\n}\nThe \ufb01rst parameter is a reference to the Eights object that encapsulates the\nstate of the game. We\u2019ll need it if we have to draw a new card. The second\nparameter, prev, is the card on top of the discard pile.\nUsing top-down development, we\u2019ll have play invoke two helper methods,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 241,
      "page_label": "224"
    }
  },
  {
    "text": "searchForMatch and drawForMatch. searchForMatch looks in the player\u2019s\nhand for a card that matches the previously played card:\npublic Card searchForMatch(Card prev) {\nfor (int i = 0; i < hand.size(); i++) {\nCard card = hand.getCard(i);\nif (cardMatches(card, prev)) {\nreturn hand.popCard(i);\n}\n}\nreturn null;\n}\nThe strategy is pretty simple: the for loop searches for the \ufb01rst card that\u2019s\nlegal to play and returns it. If there are no cards that match, it returns null.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 241,
      "page_label": "224"
    }
  },
  {
    "text": "And in that case, we have to draw cards until we get a match:\npublic Card drawForMatch(Eights eights, Card prev) {\nwhile (true) {\nCard card = eights.draw();\nSystem.out.println(name + \" draws \" + card);\nif (cardMatches(card, prev)) {\nreturn card;\n}\nhand.addCard(card);\n}\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 241,
      "page_label": "224"
    }
  },
  {
    "text": "14.5 The Player class 225\nThe while loop runs until it \ufb01nds a match (we\u2019ll assume for now that it always\ndoes). It uses the Eights object to draw a card. If it matches, it returns the\ncard. Otherwise it adds the card to the player\u2019s hand and continues.\nBoth searchForMatch and drawForMatch use cardMatches, which is a static\nmethod, also de\ufb01ned in Player. cardMatches is a straightforward translation\nof the rules of the game:\npublic static boolean cardMatches(Card card1, Card card2) {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 242,
      "page_label": "225"
    }
  },
  {
    "text": "if (card1.getSuit() == card2.getSuit()) {\nreturn true;\n}\nif (card1.getRank() == card2.getRank()) {\nreturn true;\n}\nif (card1.getRank() == 8) {\nreturn true;\n}\nreturn false;\n}\nFinally, Player provides score, which computes penalty points for cards left\nin a player\u2019s hand at the end of the game:\npublic int score() {\nint sum = 0;\nfor (int i = 0; i < hand.size(); i++) {\nCard card = hand.getCard(i);\nint rank = card.getRank();\nif (rank == 8) {\nsum -= 20;\n} else if (rank > 10) {\nsum -= 10;\n} else {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 242,
      "page_label": "225"
    }
  },
  {
    "text": "} else if (rank > 10) {\nsum -= 10;\n} else {\nsum -= rank;\n}\n}\nreturn sum;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 242,
      "page_label": "225"
    }
  },
  {
    "text": "226 Chapter 14 Objects of objects\n14.6 The Eights class\nIn Section 13.2 we introduced top-down development, which is a way of de-\nveloping programs by identifying high-level goals, like shu\ufb04ing a deck, and\nbreaking them into smaller problems, like \ufb01nding the lowest element in an\narray or swapping two elements.\nIn this section we present bottom-up development, which goes the other\nway around: \ufb01rst we identify simple pieces we need, then we assemble them\ninto more complex algorithms.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 243,
      "page_label": "226"
    }
  },
  {
    "text": "into more complex algorithms.\nLooking at the rules of Crazy Eights, we can identify some methods we\u2019ll need:\n\u0088 Create the deck, the discard and draw piles, and the player objects.\n\u0088 Deal the cards.\n\u0088 Check whether the game is over.\n\u0088 If the draw pile is empty, shu\ufb04e the discard pile and move the cards into\nthe draw pile.\n\u0088 Draw a card.\n\u0088 Keep track of whose turn it is and switch from one player to the next.\n\u0088 Display the state of the game.\n\u0088 Wait for the user before running the next turn.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 243,
      "page_label": "226"
    }
  },
  {
    "text": "\u0088 Wait for the user before running the next turn.\nNow we can start implementing the pieces. Here is the beginning of the class\nde\ufb01nition for Eights, which encapsulates the state of the game:\npublic class Eights {\nprivate Player one;\nprivate Player two;\nprivate Hand drawPile;\nprivate Hand discardPile;\nprivate Scanner in;",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 243,
      "page_label": "226"
    }
  },
  {
    "text": "14.6 The Eights class 227\nIn this version, there are always two players. One of the exercises at the end\nof the chapter asks you to modify this code to handle more players.\nThe last instance variable is a Scanner that we\u2019ll use to prompt the user after\neach move. Here\u2019s a constructor that initializes the instance variables and\ndeals the cards:\npublic Eights() {\nDeck deck = new Deck(\"Deck\");\ndeck.shuffle();\nint handSize = 5;\none = new Player(\"Allen\");\ndeck.deal(one.getHand(), handSize);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 244,
      "page_label": "227"
    }
  },
  {
    "text": "deck.deal(one.getHand(), handSize);\ntwo = new Player(\"Chris\");\ndeck.deal(two.getHand(), handSize);\ndiscardPile = new Hand(\"Discards\");\ndeck.deal(discardPile, 1);\ndrawPile = new Hand(\"Draw pile\");\ndeck.dealAll(drawPile);\nin = new Scanner(System.in);\n}\nThe next piece we\u2019ll need is a method that checks whether the game is over.\nIf either hand is empty, we\u2019re done:\npublic boolean isDone() {\nreturn one.getHand().empty() || two.getHand().empty();\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 244,
      "page_label": "227"
    }
  },
  {
    "text": "}\nWhen the draw pile is empty, we have to shu\ufb04e the discard pile. Here is a\nmethod for that:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 244,
      "page_label": "227"
    }
  },
  {
    "text": "228 Chapter 14 Objects of objects\npublic void reshuffle() {\nCard prev = discardPile.popCard();\ndiscardPile.dealAll(drawPile);\ndiscardPile.addCard(prev);\ndrawPile.shuffle();\n}\nThe \ufb01rst line saves the top card from discardPile. The next line transfers\nthe rest of the cards to drawPile. Then we put the saved card back into\ndiscardPile and shu\ufb04e drawPile.\nNow we can use reshuffle as part of draw:\npublic Card draw() {\nif (drawPile.empty()) {\nreshuffle();\n}\nreturn drawPile.popCard();\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 245,
      "page_label": "228"
    }
  },
  {
    "text": "reshuffle();\n}\nreturn drawPile.popCard();\n}\nWe can switch from one player to the next like this:\npublic Player nextPlayer(Player current) {\nif (current == one) {\nreturn two;\n} else {\nreturn one;\n}\n}\nThe nextPlayer method takes the current player as a parameter and returns\nthe player who should go next.\nThe last two pieces are displayState and waitForUser:\npublic void displayState() {\none.display();\ntwo.display();\ndiscardPile.display();\nSystem.out.println(\"Draw pile:\");",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 245,
      "page_label": "228"
    }
  },
  {
    "text": "System.out.println(\"Draw pile:\");\nSystem.out.println(drawPile.size() + \" cards\");\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 245,
      "page_label": "228"
    }
  },
  {
    "text": "14.6 The Eights class 229\npublic void waitForUser() {\nin.nextLine();\n}\nUsing these pieces, we can write takeTurn, which executes one player\u2019s turn:\npublic void takeTurn(Player player) {\nCard prev = discardPile.last();\nCard next = player.play(this, prev);\ndiscardPile.addCard(next);\nSystem.out.println(player.getName() + \" plays \" + next);\nSystem.out.println();\n}\ntakeTurn reads the top card o\ufb00 the discard pile and passes it to player.play,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 246,
      "page_label": "229"
    }
  },
  {
    "text": "which we saw in the previous section. The result is the card the player chose,\nwhich is added to the discard pile.\nFinally, we use takeTurn and the other methods to write playGame:\npublic void playGame() {\nPlayer player = one;\n// keep playing until there' s a winner\nwhile (!isDone()) {\ndisplayState();\nwaitForUser();\ntakeTurn(player);\nplayer = nextPlayer(player);\n}\n// display the final score\none.displayScore();\ntwo.displayScore();\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 246,
      "page_label": "229"
    }
  },
  {
    "text": "one.displayScore();\ntwo.displayScore();\n}\nDone! Notice the result of bottom-up development is similar to top-down: we\nhave a high-level method that calls helper methods. The main di\ufb00erence is\nthe order we used to arrive at this solution.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 246,
      "page_label": "229"
    }
  },
  {
    "text": "230 Chapter 14 Objects of objects\n14.7 Class relationships\nThis chapter demonstrates two common relationships between classes:\ncomposition: Instances of one class contain references to instances of another\nclass. For example, an instance of Eights contains references to two\nPlayer objects, two Hand objects, and a Scanner.\ninheritance: One class extends another class. For example, Hand extends\nCardCollection, so every instance of Hand is also a CardCollection.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 247,
      "page_label": "230"
    }
  },
  {
    "text": "Composition is also known as a HAS-A relationship, as in \u201c Eights HAS-A\nScanner\u201d. Inheritance is also known as an IS-A relationship, as in \u201ca Hand\nIS-A CardCollection\u201d. This vocabulary provides a concise way to talk about\nan object-oriented design.\nThere is also a standard way to represent these relationships graphically in\nUML class diagrams. As we saw in Section 10.9, the UML representation of\na class is a box with three sections: the class name, the attributes, and the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 247,
      "page_label": "230"
    }
  },
  {
    "text": "methods. The latter two sections are optional when showing relationships.\nRelationships between classes are represented by arrows: composition arrows\nhave a standard arrow head, and inheritance arrows have a hollow triangle head\n(usually pointing up). Figure 14.1 shows the classes de\ufb01ned in this chapter\nand the relationships among them.\nFigure 14.1: UML diagram for the classes in this chapter.\nUML is an international standard, so almost any software engineer in the world",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 247,
      "page_label": "230"
    }
  },
  {
    "text": "could look at this diagram and understand our design. And class diagrams\nare only one of many graphical representations de\ufb01ned in the UML standard.\nWe hope this \ufb01nal chapter has been a useful summary of all the techniques pre-\nsented in the book, including variables, methods, conditionals, loops, arrays,\nobjects, and algorithms. Congratulations on making it to the end!",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 247,
      "page_label": "230"
    }
  },
  {
    "text": "14.8 Vocabulary 231\n14.8 Vocabulary\ncollection: An object that contains other objects, or more speci\ufb01cally, one of\nthe objects in the Java library, like ArrayList, that contains objects.\ninheritance: The ability to de\ufb01ne a new class that has the same instance\nvariables and methods of an existing class.\nsubclass: A class that inherits from, or extends, an existing class.\nsuperclass: An existing class that is extended by another class.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 248,
      "page_label": "231"
    }
  },
  {
    "text": "wrapper method: A method that calls another method without doing much\nadditional work.\nbottom-up development: A way of developing programs by identifying sim-\nple pieces, implementing them, and then assembling them into more\ncomplex algorithms.\nHAS-A: A relationship between two classes where one class \u201chas\u201d an instance\nof another class as one of its attributes.\nIS-A: A relationship between two classes where one class extends another\nclass; the subclass \u201cis\u201d an instance of the superclass.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 248,
      "page_label": "231"
    }
  },
  {
    "text": "14.9 Exercises\nThe code for this chapter is in the ch14 directory of ThinkJavaCode. See\npage xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nExercise 14.1 Design a better strategy for the Player.play method. For\nexample, if there are multiple cards you can play, and one of them is an eight,\nyou might want to play the eight.\nThink of other ways you can minimize penalty points, such as playing the high-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 248,
      "page_label": "231"
    }
  },
  {
    "text": "est ranking cards \ufb01rst. Write a new class that extends Player and overrides\nplay to implement your strategy.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 248,
      "page_label": "231"
    }
  },
  {
    "text": "232 Chapter 14 Objects of objects\nExercise 14.2 Write a loop that plays the game 100 times and keeps track\nof how many times each player wins. If you implemented multiple strategies in\nthe previous exercise, you can play them against each other to evaluate which\none works best.\nHint: Design a Genius class that extends Player and overrides the play\nmethod, and then replace one of the players with a Genius object.\nExercise 14.3 One limitation of the program we wrote in this chapter is that",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 249,
      "page_label": "232"
    }
  },
  {
    "text": "it only handles two players. Modify the Eights class to create an ArrayList\nof players, and modify nextPlayer to select the next player.\nExercise 14.4 When we designed the program for this chapter, we tried to\nminimize the number of classes. As a result, we ended up with a few awkward\nmethods. For example, cardMatches is a static method in Player, but it\nwould be more natural if it were an instance method in Card.\nThe problem is that Card is supposed to be useful for any card game, not just",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 249,
      "page_label": "232"
    }
  },
  {
    "text": "Crazy Eights. You can solve this problem by adding a new class, EightsCard,\nthat extends Card and provides a method, match, that checks whether two\ncards match according to the rules of Crazy Eights.\nAt the same time, you could create a new class, EightsHand, that extends\nHand and provides a method, scoreHand, that adds up the scores of the cards\nin the hand. And while you\u2019re at it, you could add a method namedscoreCard\nto EightsCard.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 249,
      "page_label": "232"
    }
  },
  {
    "text": "to EightsCard.\nWhether or not you actually make these changes, draw a UML class diagram\nthat shows this alternative object hierarchy.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 249,
      "page_label": "232"
    }
  },
  {
    "text": "Appendix A\nDevelopment tools\nThe steps for compiling, running, and debugging Java code depend on your\ndevelopment environment and operating system. We avoided putting these de-\ntails in the main text, because they can be distracting. Instead, we provide this\nappendix with a brief introduction to DrJava \u2013 an integrated development\nenvironment (IDE) that is well suited for beginners \u2013 and other development\ntools, including Checkstyle for code quality and JUnit for testing.\nA.1 Installing DrJava",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 250,
      "page_label": "233"
    }
  },
  {
    "text": "A.1 Installing DrJava\nThe easiest way to start programming in Java is to use a website that com-\npiles and runs Java code in the browser. Examples include jdoodle.com,\ncompilejava.net, tutorialspoint.com, and others.\nIf you are unable to install software on your computer (which is often the case\nin public schools and Internet caf\u00b4 es), you can use these online development\nenvironments for almost everything in this book.\nBut if you want to compile and run Java programs on your own computer, you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 250,
      "page_label": "233"
    }
  },
  {
    "text": "will need:\n\u0088 The Java Development Kit (JDK), which includes the compiler, the\nJava Virtual Machine (JVM) that interprets the compiled byte code,\nand other tools such as Javadoc.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 250,
      "page_label": "233"
    }
  },
  {
    "text": "234 Appendix A Development tools\n\u0088 A simple text editor such as Notepad++ or Sublime Text, and/or an\nIDE such as DrJava, Eclipse, jGrasp, or NetBeans.\nThe JDK we recommend is Java SE (Standard Edition), which Oracle makes\navailable for free. The IDE we recommend is DrJava, which is an open-source\ndevelopment environment written in Java (see Figure A.1).\nTo install the JDK, search the web for \u201cdownload JDK\u201d which should take you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 251,
      "page_label": "234"
    }
  },
  {
    "text": "to Oracle\u2019s website. Scroll down to \u201cJava Platform, Standard Edition\u201d and\nclick the download button under JDK. Then accept the license agreement and\nselect the installer for your operating system. Don\u2019t forget to run the installer\nafter you download it!\nTo install DrJava, visit http://drjava.org and download the JAR \ufb01le. We\nrecommend that you save it to your Desktop or another convenient location.\nSimply double-click the JAR \ufb01le to run DrJava. Refer to the DrJava docu-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 251,
      "page_label": "234"
    }
  },
  {
    "text": "mentation (http://drjava.org/docs/quickstart/) for more details.\nFigure A.1: Screenshot of DrJava editing the hello world program.\nWhen running DrJava for the \ufb01rst time, we recommend you change three\nsettings from the Edit > Preferences menu under Miscellaneous: set the Indent\nLevel to 4, check the Automatically Close Block Comments box, and uncheck\nthe Keep Emacs-style Backup Filesbox.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 251,
      "page_label": "234"
    }
  },
  {
    "text": "A.2 DrJava interactions 235\nA.2 DrJava interactions\nOne of the most useful features of DrJava is the \u201cInteractions Pane\u201d at the\nbottom of the window. It provides the ability to try out code quickly, without\nhaving to write a class de\ufb01nition and save/compile/run the program. Fig-\nure A.2 shows an example.\nFigure A.2: Screenshot of the Interactions Pane in DrJava.\nThere is one subtle detail to note when using the Interactions feature. If you",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 252,
      "page_label": "235"
    }
  },
  {
    "text": "don\u2019t end an expression (or statement) with a semicolon, DrJava automatically\ndisplays its value. Notice in Figure A.2 how the variable declarations end with\nsemicolons, but the logic expressions in the following lines do not. This feature\nsaves you from having to type System.out.println every time.\nWhat\u2019s nice about this feature is that you don\u2019t have to create a new class, de-\nclare a main method, write arbitrary expressions inside System.out.println",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 252,
      "page_label": "235"
    }
  },
  {
    "text": "statements, save the source \ufb01le, and get all of your code to compile in advance.\nAlso, you can press the up/down arrows on the keyboard to repeat previous\ncommands and experiment with incremental di\ufb00erences.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 252,
      "page_label": "235"
    }
  },
  {
    "text": "236 Appendix A Development tools\nA.3 Command-line interface\nOne of the most powerful and useful skills you can learn is how to use the\ncommand-line interface, also called the \u201cterminal\u201d. The command line is a\ndirect interface to the operating system. It allows you to run programs, manage\n\ufb01les and directories, and monitor system resources. Many advanced tools, both\nfor software development and general purpose computing, are available only\nat the command line.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 253,
      "page_label": "236"
    }
  },
  {
    "text": "at the command line.\nThere are many good tutorials online for learning the command line for your\noperating system; just search the web for \u201ccommand line tutorial\u201d. On Unix\nsystems like Linux and OS X, you can get started with just four commands:\nchange the working directory ( cd), list directory contents ( ls), compile Java\nprograms (javac), and run Java programs ( java).\nFigure A.3 shows an example where the Hello.java source \ufb01le is stored in",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 253,
      "page_label": "236"
    }
  },
  {
    "text": "the Desktop directory. After changing to that location and listing the \ufb01les,\nwe use the javac command to compile Hello.java. Running ls again, we\nsee that the compiler generated a new \ufb01le, Hello.class, which contains the\nbyte code. We run the program using the java command, which displays the\noutput on the following line.\nFigure A.3: Compiling and running Hello.java from the command line.\nNote that the javac command requires a \ufb01lename (or multiple source \ufb01les",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 253,
      "page_label": "236"
    }
  },
  {
    "text": "separated by spaces), whereas the java command requires a single class name.\nIf you use DrJava, it runs these commands for you behind the scenes and\ndisplays the output in the Interactions Pane.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 253,
      "page_label": "236"
    }
  },
  {
    "text": "A.4 Command-line testing 237\nTaking time to learn this e\ufb03cient and elegant way of interacting with your\noperating system will make you more productive. People who don\u2019t use the\ncommand line don\u2019t know what they\u2019re missing.\nA.4 Command-line testing\nAs described in Section 1.8, it\u2019s more e\ufb00ective to program and debug your\ncode little by little than to attempt writing everything all at once. And after\nyou\u2019ve completed programming an algorithm, it\u2019s important to test that it",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 254,
      "page_label": "237"
    }
  },
  {
    "text": "works correctly on a variety of inputs.\nThroughout the book, we illustrate techniques for testing your programs. Most\nif not all testing is based on a simple idea: does the program do what we expect\nit to do? For simple programs, it\u2019s not di\ufb03cult to run them several times and\nsee what happens. But at some point, you will get tired of typing the same\ntest cases over and over.\nWe can automate the process of entering input and comparing \u201cexpected out-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 254,
      "page_label": "237"
    }
  },
  {
    "text": "put\u201d with \u201cactual output\u201d using the command line. The basic idea is to store\nthe test cases in plain text \ufb01les and trick Java into thinking they are coming\nfrom the keyboard. Here are step-by-step instructions:\n1. Make sure you can compile and run the Convert.java example in the\nch03 directory of ThinkJavaCode.\n2. In the same directory as Convert.java, create a plain text \ufb01le named\ntest.in (\u201cin\u201d is for input). Enter the following line and save the \ufb01le:\n193.04",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 254,
      "page_label": "237"
    }
  },
  {
    "text": "193.04\n3. Create a second plain text \ufb01le named test.exp (\u201cexp\u201d is for expected).\nEnter the following line and save the \ufb01le:\n193.04 cm = 6 ft, 4 in\n4. Open a terminal, and change to the directory with these \ufb01les. Run the\nfollowing command to test the program:\njava Convert < test.in > test.out",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 254,
      "page_label": "237"
    }
  },
  {
    "text": "238 Appendix A Development tools\nOn the command line, < and > are redirection operators . The \ufb01rst one\nredirects the contents of test.in to System.in, as if it were entered from\nthe keyboard. The second one redirects the contents of System.out to a new\n\ufb01le test.out, much like a screen capture. In other words, the test.out \ufb01le\ncontains the output of your program.\nBy the way, it\u2019s perfectly okay to compile your programs in DrJava (or some",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 255,
      "page_label": "238"
    }
  },
  {
    "text": "other environment) and run them from the command line. Knowing both\ntechniques allows you to use the right tool for the job.\nFigure A.4: Using meld to compare expected output with the actual output.\nAt this point, we just need to compare the contents test.out with test.exp.\nIf the \ufb01les are the same, then the program outputted what we expected it\nto output. If not, then we found a bug, and we can use the output to begin\ndebugging our program. Fortunately, there\u2019s a simple way to compare \ufb01les on",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 255,
      "page_label": "238"
    }
  },
  {
    "text": "the command line:\ndiff test.exp test.out\nThe diff utility summarizes the di\ufb00erences between two \ufb01les. If there are no\ndi\ufb00erences, then it displays nothing, which in our case is what we want. If\nthe expected output di\ufb00ers from the actual output, then we need to continue\ndebugging. Usually the program is at fault, and diff provides some insight",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 255,
      "page_label": "238"
    }
  },
  {
    "text": "A.5 Running Checkstyle 239\nabout what is broken. But there\u2019s also a chance that we have a correct program\nand the expected output is wrong.\nInterpreting the results from diff can be confusing, but fortunately there are\nmany graphical tools that show the di\ufb00erences between two \ufb01les. For example,\non Windows you can install WinMerge, on Mac you can use opendiff (which\ncomes with Xcode), and on Linux there\u2019s meld, shown in Figure A.4.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 256,
      "page_label": "239"
    }
  },
  {
    "text": "Regardless of what tool you use, the goal is the same. Debug your program\nuntil the actual output is identical to the expected output.\nA.5 Running Checkstyle\nCheckstyle is a command-line tool that can be used to determine if your source\ncode follows a set of style rules. It also checks for common programming\nmistakes, such as class and method design problems.\nYou can download the latest version as a JAR \ufb01le from http://checkstyle.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 256,
      "page_label": "239"
    }
  },
  {
    "text": "sourceforge.net/. To run Checkstyle, move (or copy) the JAR \ufb01le to the\nsame directory as your program. Open a terminal in that location, and run\nthe following command:\njava -jar checkstyle-*-all.jar -c /google_checks.xml *.java\nThe * characters are wildcards that match whatever version of Checkstyle\nyou have and whatever Java source \ufb01les are present. The output indicates\nthe \ufb01le and line number of each problem. This example refers to a method\nbeginning on line 93, column 5 of Hello.java:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 256,
      "page_label": "239"
    }
  },
  {
    "text": "beginning on line 93, column 5 of Hello.java:\nHello.java:93:5: Missing a Javadoc comment\nThe \ufb01le /google_checks.xml is inside the JAR \ufb01le and represents most of\nGoogle\u2019s style rules. You can alternatively use /sun_checks.xml or provide\nyour own con\ufb01guration \ufb01le. See Checkstyle\u2019s website for more information.\nIf you apply Checkstyle to your source code often, you will likely internalize\ngood style habits over time. But there are limits to what automatic style check-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 256,
      "page_label": "239"
    }
  },
  {
    "text": "ers can do. In particular, they can\u2019t evaluate the quality of your comments,\nthe meaning of your variable names, or the structure of your algorithms.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 256,
      "page_label": "239"
    }
  },
  {
    "text": "240 Appendix A Development tools\nGood comments make it easier for experienced developers to identify errors in\nyour code. Good variable names communicate the intent of your program and\nhow the data is organized. And good programs are designed to be e\ufb03cient\nand demonstrably correct.\nA.6 Tracing with a debugger\nA great way to visualize the \ufb02ow of execution, including how parameters and\narguments work, is to use a debugger. Most debuggers make it possible to:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 257,
      "page_label": "240"
    }
  },
  {
    "text": "1. Set a breakpoint, a line where you want the program to pause.\n2. Step through the code one line at a time and watch what it does.\n3. Check the values of variables and see when and how they change.\nFor example, open any program in DrJava and move the cursor to the \ufb01rst\nline of main. Press Ctrl+B to toggle a breakpoint on the current line; it should\nnow be highlighted in red. Press Ctrl+Shift+D to turn on Debug Mode; a new\npane should appear at the bottom of the window. These commands are also",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 257,
      "page_label": "240"
    }
  },
  {
    "text": "available from the Debugger menu, in case you forget the shortcut keys.\nWhen you run the program, execution pauses at the \ufb01rst breakpoint. The\ndebug pane displays the call stack, with the current method on top of the\nstack, as shown in Figure A.5. You might be surprised to see how many\nmethods were called before the main method!\nTo the right are several buttons that allow you to step through the code at\nyour own pace. You can also press Automatic Traceto watch DrJava run your",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 257,
      "page_label": "240"
    }
  },
  {
    "text": "code one line at a time.\nUsing a debugger is like having the computer proofread your code out loud.\nWhen the program is paused, you can examine (or even change) the value of\nany variable using the Interactions Pane.\nTracing allows you to follow the \ufb02ow of execution and see how data pass from\none method to another. You might expect the code do one thing, but then\nthe debugger shows it doing something else. At that moment, you gain insight\nabout what may be wrong with the code.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 257,
      "page_label": "240"
    }
  },
  {
    "text": "A.7 Testing with JUnit 241\nFigure A.5: Screenshot of the DrJava debugger. Execution is currently paused\non the \ufb01rst line of printTwice. There is a breakpoint on the \ufb01rst line of main.\nYou can edit your code while debugging it, but we don\u2019t recommend it. If you\nadd or delete multiple lines of code while the program is paused, the results\ncan be confusing.\nSee http://drjava.org/docs/user/ch09.html for more information about\nusing the debugger feature of DrJava.\nA.7 Testing with JUnit",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 258,
      "page_label": "241"
    }
  },
  {
    "text": "A.7 Testing with JUnit\nWhen beginners start writing methods, they usually test them by invoking\nthem from main and checking the results by hand. Writing code like this can\nget repetitive, but there are tools to make it easier. For cases where we know\nthe right answer, we can do better by writing unit tests.\nFor example, to test fibonacci from Section 6.9, we could write:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 258,
      "page_label": "241"
    }
  },
  {
    "text": "242 Appendix A Development tools\npublic static void main(String[] args) {\nif (fibonacci(1) != 1) {\nSystem.err.println(\"fibonacci(1) is incorrect\");\n}\nif (fibonacci(2) != 1) {\nSystem.err.println(\"fibonacci(2) is incorrect\");\n}\nif (fibonacci(3) != 2) {\nSystem.err.println(\"fibonacci(3) is incorrect\");\n}\n}\nThis test code is self-explanatory, but it\u2019s longer than it needs to be and\nit doesn\u2019t scale very well. In addition, the error messages provide limited",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 259,
      "page_label": "242"
    }
  },
  {
    "text": "information. Using a unit test framework addresses these and other issues.\nJUnit is a common testing tool for Java programs (see http://junit.org).\nTo use it, you have to create a test class that contains test methods. If the\nname of your class is Class, the name of the test class is ClassTest. And\nif there is a method in Class named method, there should be a method in\nTestClass named testMethod.\nFor example, suppose that the fibonacci method belongs to a class named",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 259,
      "page_label": "242"
    }
  },
  {
    "text": "Series. Here is the corresponding JUnit test class and test method:\nimport junit.framework.TestCase;\npublic class SeriesTest extends TestCase {\npublic void testFibonacci() {\nassertEquals(1, Series.fibonacci(1));\nassertEquals(1, Series.fibonacci(2));\nassertEquals(2, Series.fibonacci(3));\n}\n}\nThis example uses the keyword extends, which indicates that the new class,\nSeriesTest is based on an existing class, TestCase, which is imported from\nthe package junit.framework.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 259,
      "page_label": "242"
    }
  },
  {
    "text": "A.8 Vocabulary 243\nMany development environments can generate test classes and test methods\nautomatically. In DrJava, you can select New JUnit Test Casefrom the File\nmenu to generate an empty test class.\nassertEquals is provided by the TestCase class. It takes two arguments and\nchecks whether they are equal. If so, it does nothing; otherwise it displays a\ndetailed error message. Normally the \ufb01rst argument is the \u201cexpected value\u201d,",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 260,
      "page_label": "243"
    }
  },
  {
    "text": "which we consider correct, and the second argument is the \u201cactual value\u201d we\nwant to check. If they are not equal, the test fails.\nUsing assertEquals is more concise than writing your own if statements\nand System.err messages. JUnit provides additional assert methods, such\nas assertNull, assertSame, and assertTrue, that can be used to design a\nvariety of tests.\nTo run JUnit directly from DrJava, click the Test button on the toolbar. If",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 260,
      "page_label": "243"
    }
  },
  {
    "text": "all your test methods pass, you will see a green bar in the lower-right corner.\nOtherwise, DrJava will take you directly to the \ufb01rst assertion that failed.\nA.8 Vocabulary\nIDE: An \u201cintegrated development environment\u201d that includes tools for edit-\ning, compiling, and debugging programs.\nJDK: The \u201cJava Development Kit\u201d that contains the compiler, Javadoc, and\nother tools.\nJVM: The \u201cJava Virtual Machine\u201d that interprets the compiled byte code.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 260,
      "page_label": "243"
    }
  },
  {
    "text": "text editor: A program that edits plain text \ufb01les, the format used by most\nprogramming languages.\nJAR: A \u201cJava Archive\u201d, which is essentially a ZIP \ufb01le containing classes and\nother resources.\ncommand-line interface: A means of interacting with the computer by is-\nsuing commands in the form of successive lines of text.\nredirection operator: A command-line feature that substitutes System.in\nand/or System.out with a plain text \ufb01le.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 260,
      "page_label": "243"
    }
  },
  {
    "text": "244 Appendix A Development tools\nwildcard: A command-line feature that allows you to specify a pattern of\n\ufb01lenames using the * character.\ndebugger: A tool that allows you to run one statement at a time and see the\ncontents of variables.\nbreakpoint: A line of code where the debugger will pause a running program.\ncall stack: The history of method calls and where to resume execution after\neach method returns.\nunit test: Code that exercises a single method of a program, testing for cor-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 261,
      "page_label": "244"
    }
  },
  {
    "text": "rectness and/or e\ufb03ciency.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 261,
      "page_label": "244"
    }
  },
  {
    "text": "Appendix B\nJava 2D graphics\nThe Java library includes a simple package for drawing 2D graphics, called\njava.awt. AWT stands for \u201cAbstract Window Toolkit\u201d. We are only going\nto scratch the surface of graphics programming; you can read more about it\nin the Java tutorials at https://docs.oracle.com/javase/tutorial/2d/.\nB.1 Creating graphics\nThere are several ways to create graphics in Java; the simplest way is to use\njava.awt.Canvas and java.awt.Graphics. A Canvas is a blank rectangu-",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 262,
      "page_label": "245"
    }
  },
  {
    "text": "lar area of the screen onto which the application can draw. TheGraphics class\nprovides basic drawing methods such asdrawLine, drawRect, and drawString.\nHere is an example program that draws a circle using the fillOval method:\nimport java.awt.Canvas;\nimport java.awt.Graphics;\nimport javax.swing.JFrame;\npublic class Drawing extends Canvas {",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 262,
      "page_label": "245"
    }
  },
  {
    "text": "246 Appendix B Java 2D graphics\npublic static void main(String[] args) {\nJFrame frame = new JFrame(\"My Drawing\");\nCanvas canvas = new Drawing();\ncanvas.setSize(400, 400);\nframe.add(canvas);\nframe.pack();\nframe.setVisible(true);\n}\npublic void paint(Graphics g) {\ng.fillOval(100, 100, 200, 200);\n}\n}\nThe Drawing class extends Canvas, so it has all the methods provided by\nCanvas, including setSize. You can read about the other methods in the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 263,
      "page_label": "246"
    }
  },
  {
    "text": "documentation, which you can \ufb01nd by doing a web search for \u201cJava Canvas\u201d.\nIn the main method, we:\n1. Create a JFrame object, which is the window that will contain the canvas.\n2. Create a Drawing object (which is the canvas), set its width and height,\nand add it to the frame.\n3. Pack the frame (resize it) to \ufb01t the canvas, and display it on the screen.\nOnce the frame is visible, the paint method is called whenever the canvas",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 263,
      "page_label": "246"
    }
  },
  {
    "text": "needs to be drawn; for example, when the window is moved or resized. The\napplication doesn\u2019t end after the main method returns; instead, it waits for\nthe JFrame to close. If you run this code, you should see a black circle on a\ngray background.\nB.2 Graphics methods\nYou are probably used to Cartesian coordinates, where x and y values can\nbe positive or negative. In contrast, Java uses a coordinate system where",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 263,
      "page_label": "246"
    }
  },
  {
    "text": "B.2 Graphics methods 247\nthe origin is in the upper-left corner. That way, x and y are always positive\nintegers. Figure B.1 shows these coordinate systems.\nGraphical coordinates are measured in pixels; each pixel corresponds to a dot\non the screen.\npositive y\nnegative y\nCartesian coordinates\npositive x\norigin (0, 0)\nnegative x\nJava graphical coordinates\npositive y\npositive x\norigin (0, 0)\nFigure B.1: Diagram of the di\ufb00erence between Cartesian coordinates and Java\ngraphical coordinates.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 264,
      "page_label": "247"
    }
  },
  {
    "text": "graphical coordinates.\nTo draw on the canvas, you invoke methods on a Graphics object. You don\u2019t\nhave to create theGraphics object; it gets created when you create theCanvas,\nand it gets passed as an argument to paint.\nThe previous example used fillOval, which has the following signature:\n/**\n* Fills an oval bounded by the specified rectangle with\n* the current color.\n*/\npublic void fillOval(int x, int y, int width, int height)",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 264,
      "page_label": "247"
    }
  },
  {
    "text": "The four parameters specify a bounding box, which is the rectangle in which\nthe oval is drawn. x and y specify the the location of the upper-left corner of\nthe bounding box. The bounding box itself is not drawn (see Figure B.2).\nTo choose the color of a shape, invoke setColor on the Graphics object:\ng.setColor(Color.red);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 264,
      "page_label": "247"
    }
  },
  {
    "text": "248 Appendix B Java 2D graphics\nbounding box\ninscribed oval\nFigure B.2: Diagram of an oval inside its bounding box.\nThe setColor method determines the color of everything that gets drawn\nafterward. Color.red is a constant provided by the Color class; to use it you\nhave to import java.awt.Color. Other colors include:\nblack blue cyan darkGray gray green\nlightGray magenta orange pink white yellow\nYou can create your own colors by specifying the red, green, and blue ( RGB)\ncomponents. For example:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 265,
      "page_label": "248"
    }
  },
  {
    "text": "components. For example:\nColor purple = new Color(128, 0, 128);\nEach value is an integer in the range 0 (darkest) to 255 (lightest). The color\n(0, 0, 0) is black, and (255, 255, 255) is white.\nYou can set the background color of the Canvas by invoking setBackground:\ncanvas.setBackground(Color.white);\nB.3 Example drawing\nSuppose we want to draw a \u201cHidden Mickey\u201d, which is an icon that represents\nMickey Mouse (see https://en.wikipedia.org/wiki/Hidden_Mickey). We",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 265,
      "page_label": "248"
    }
  },
  {
    "text": "can use the oval we just drew as the face, and then add two ears. To make the\ncode more readable, let\u2019s use Rectangle objects to represent bounding boxes.\nHere\u2019s a method that takes a Rectangle and invokes fillOval:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 265,
      "page_label": "248"
    }
  },
  {
    "text": "B.3 Example drawing 249\npublic void boxOval(Graphics g, Rectangle bb) {\ng.fillOval(bb.x, bb.y, bb.width, bb.height);\n}\nAnd here\u2019s a method that draws Mickey Mouse:\npublic void mickey(Graphics g, Rectangle bb) {\nboxOval(g, bb);\nint dx = bb.width / 2;\nint dy = bb.height / 2;\nRectangle half = new Rectangle(bb.x, bb.y, dx, dy);\nhalf.translate(-dx / 2, -dy / 2);\nboxOval(g, half);\nhalf.translate(dx * 2, 0);\nboxOval(g, half);\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 266,
      "page_label": "249"
    }
  },
  {
    "text": "half.translate(dx * 2, 0);\nboxOval(g, half);\n}\nThe \ufb01rst line draws the face. The next three lines create a smaller rectangle\nfor the ears. We translate the rectangle up and left for the \ufb01rst ear, then to\nthe right for the second ear. The result is shown in Figure B.3.\nFigure B.3: A \u201cHidden Mickey\u201d drawn using Java graphics.\nYou can read more about Rectangle and translate in Chapter 10. See the\nexercises at the end of this appendix for more example drawings.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 266,
      "page_label": "249"
    }
  },
  {
    "text": "250 Appendix B Java 2D graphics\nB.4 Vocabulary\nAWT: The \u201cAbstract Window Toolkit\u201d, a Java package for creating graphical\nuser interfaces.\ncoordinate: A value that speci\ufb01es a location in a two-dimensional graphical\nwindow.\npixel: The unit in which coordinates are measured.\nbounding box: A common way to specify the coordinates of a rectangular\narea.\nRGB: A color model based on adding red, green, and blue light.\nB.5 Exercises\nThe code for this chapter is in the ap02 directory of ThinkJavaCode. See",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 267,
      "page_label": "250"
    }
  },
  {
    "text": "page xv for instructions on how to download the repository. Before you start\nthe exercises, we recommend that you compile and run the examples.\nExercise B.1 Draw the \ufb02ag of Japan: a red circle on a white background\nthat is wider than it is tall.\nExercise B.2 Modify Mickey.java to draw ears on the ears, and ears on\nthose ears, and more ears all the way down until the smallest ears are only 3\npixels wide.\nThe result should look like \u201cMickey Moose\u201d, shown in Figure B.4. Hint: You",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 267,
      "page_label": "250"
    }
  },
  {
    "text": "should only have to add or modify a few lines of code.\nExercise B.3 In this exercise, you will draw \u201cMoir\u00b4 e patterns\u201d that seem\nto shift around as you move. For an explanation of what is going on, see\nhttps://en.wikipedia.org/wiki/Moire_pattern.\n1. In the directory app02 in the repository for this book, you\u2019ll \ufb01nd a \ufb01le\nnamed Moire.java. Open it and read the paint method. Draw a sketch\nof what you expect it to do. Now run it. Did you get what you expected?",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 267,
      "page_label": "250"
    }
  },
  {
    "text": "B.5 Exercises 251\nFigure B.4: A recursive shape we call \u201cMickey Moose\u201d.\n2. Modify the program so that the space between the circles is larger or\nsmaller. See what happens to the image.\n3. Modify the program so that the circles are drawn in the center of the\nscreen and concentric, as in Figure B.5 (left). The distance between the\ncircles should be small enough that the Moir\u00b4 e interference is apparent.\nconcentric circles radial Moire pattern",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 268,
      "page_label": "251"
    }
  },
  {
    "text": "concentric circles radial Moire pattern\nFigure B.5: Graphical patterns that can exhibit Moir\u00b4 e interference.\n4. Write a method named radial that draws a radial set of line segments\nas shown in Figure B.5 (right), but they should be close enough together\nto create a Moir\u00b4 e pattern.\n5. Just about any kind of graphical pattern can generate Moir\u00b4 e-like inter-\nference patterns. Play around and see what you can create.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 268,
      "page_label": "251"
    }
  },
  {
    "text": "252 Appendix B Java 2D graphics",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 269,
      "page_label": "252"
    }
  },
  {
    "text": "Appendix C\nDebugging\nAlthough there are debugging suggestions throughout the book, we thought\nit would be useful to organize them in an appendix. If you are having a hard\ntime debugging, you might want to review this appendix from time to time.\nThe best debugging strategy depends on what kind of error you have:\n\u0088 Compile-time errors indicate that there is something wrong with the\nsyntax of the program. Example: omitting the semicolon at the end of\na statement.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 270,
      "page_label": "253"
    }
  },
  {
    "text": "a statement.\n\u0088 Run-time errors are produced if something goes wrong while the pro-\ngram is running. Example: an in\ufb01nite recursion eventually causes a\nStackOverflowError.\n\u0088 Logic errors cause the program to do the wrong thing. Example: an\nexpression may not be evaluated in the order you expect.\nThe following sections are organized by error type; some techniques are useful\nfor more than one type.\nC.1 Compile-time errors\nThe best kind of debugging is the kind you don\u2019t have to do because you avoid",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 270,
      "page_label": "253"
    }
  },
  {
    "text": "making errors in the \ufb01rst place. Incremental development, which we presented",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 270,
      "page_label": "253"
    }
  },
  {
    "text": "254 Appendix C Debugging\nin Section 6.2, can help. The key is to start with a working program and add\nsmall amounts of code at a time. When there is an error, you will have a\npretty good idea where it is.\nNevertheless, you might \ufb01nd yourself in one of the following situations. For\neach situation, we have some suggestions about how to proceed.\nThe compiler is spewing error messages.\nIf the compiler reports 100 error messages, that doesn\u2019t mean there are 100",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 271,
      "page_label": "254"
    }
  },
  {
    "text": "errors in your program. When the compiler encounters an error, it often gets\nthrown o\ufb00 track for a while. It tries to recover and pick up again after the\n\ufb01rst error, but sometimes it reports spurious errors.\nOnly the \ufb01rst error message is truly reliable. We suggest that you only \ufb01x\none error at a time, and then recompile the program. You may \ufb01nd that one\nsemicolon or brace \u201c\ufb01xes\u201d 100 errors.\nI\u2019m getting a weird compiler message, and it won\u2019t go\naway.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 271,
      "page_label": "254"
    }
  },
  {
    "text": "away.\nFirst of all, read the error message carefully. It may be written in terse jargon,\nbut often there is a carefully hidden kernel of information.\nIf nothing else, the message will tell you where in the program the problem\noccurred. Actually, it tells you where the compiler was when it noticed a\nproblem, which is not necessarily where the error is. Use the information the\ncompiler gives you as a guideline, but if you don\u2019t see an error where the\ncompiler is pointing, broaden the search.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 271,
      "page_label": "254"
    }
  },
  {
    "text": "compiler is pointing, broaden the search.\nGenerally the error will be prior to the location of the error message, but there\nare cases where it will be somewhere else entirely. For example, if you get an\nerror message at a method invocation, the actual error may be in the method\nde\ufb01nition itself.\nIf you don\u2019t \ufb01nd the error quickly, take a breath and look more broadly at the\nentire program. Make sure the program is indented properly; that makes it\neasier to spot syntax errors.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 271,
      "page_label": "254"
    }
  },
  {
    "text": "C.1 Compile-time errors 255\nNow, start looking for common syntax errors:\n1. Check that all parentheses and brackets are balanced and properly nested.\nAll method de\ufb01nitions should be nested within a class de\ufb01nition. All\nprogram statements should be within a method de\ufb01nition.\n2. Remember that uppercase letters are not the same as lowercase letters.\n3. Check for semicolons at the end of statements (and no semicolons after\nsquiggly braces).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 272,
      "page_label": "255"
    }
  },
  {
    "text": "squiggly braces).\n4. Make sure that any strings in the code have matching quotation marks.\nMake sure that you use double quotes for strings and single quotes for\ncharacters.\n5. For each assignment statement, make sure that the type on the left is\nthe same as the type on the right. Make sure that the expression on the\nleft is a variable name or something else that you can assign a value to\n(like an element of an array).\n6. For each method invocation, make sure that the arguments you provide",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 272,
      "page_label": "255"
    }
  },
  {
    "text": "are in the right order and have the right type, and that the object you\nare invoking the method on is the right type.\n7. If you are invoking a value method, make sure you are doing something\nwith the result. If you are invoking a void method, make sure you are\nnot trying to do something with the result.\n8. If you are invoking an instance method, make sure you are invoking it\non an object with the right type. If you are invoking a static method",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 272,
      "page_label": "255"
    }
  },
  {
    "text": "from outside the class where it is de\ufb01ned, make sure you specify the class\nname (using dot notation).\n9. Inside an instance method you can refer to the instance variables without\nspecifying an object. If you try that in a static method \u2013 with or without\nthis \u2013 you get a message like \u201cnon-static variable x cannot be referenced\nfrom a static context.\u201d\nIf nothing works, move on to the next section...",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 272,
      "page_label": "255"
    }
  },
  {
    "text": "256 Appendix C Debugging\nI can\u2019t get my program to compile no matter what I do.\nIf the compiler says there is an error and you don\u2019t see it, that might be\nbecause you and the compiler are not looking at the same code. Check your\ndevelopment environment to make sure the program you are editing is the\nprogram the compiler is compiling.\nThis situation is often the result of having multiple copies of the same program.\nYou might be editing one version of the \ufb01le, but compiling a di\ufb00erent version.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 273,
      "page_label": "256"
    }
  },
  {
    "text": "If you are not sure, try putting an obvious and deliberate syntax error right\nat the beginning of the program. Now compile again. If the compiler doesn\u2019t\n\ufb01nd the new error, there is probably something wrong with the way you set\nup the development environment.\nIf you have examined the code thoroughly, and you are sure the compiler is\ncompiling the right source \ufb01le, it is time for desperate measures: debugging\nby bisection.\n\u0088 Make a backup of the \ufb01le you are working on. If you are working on",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 273,
      "page_label": "256"
    }
  },
  {
    "text": "Bob.java, make a copy called Bob.java.old.\n\u0088 Delete about half the code from Bob.java. Try compiling again.\n\u2013 If the program compiles now, you know the error is in the code you\ndeleted. Bring back about half of what you deleted and repeat.\n\u2013 If the program still doesn\u2019t compile, the error must be in the code\nthat remains. Delete about half of the remaining code and repeat.\n\u0088 Once you have found and \ufb01xed the error, start bringing back the code\nyou deleted, a little bit at a time.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 273,
      "page_label": "256"
    }
  },
  {
    "text": "you deleted, a little bit at a time.\nThis process is ugly, but it goes faster than you might think, and it is very\nreliable. It works for other programming languages too!\nI did what the compiler told me to do, but it still doesn\u2019t\nwork.\nSome error messages come with tidbits of advice, like \u201cclass Golfer must be\ndeclared abstract. It does not de\ufb01ne int compareTo(java.lang.Object) from",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 273,
      "page_label": "256"
    }
  },
  {
    "text": "C.2 Run-time errors 257\ninterface java.lang.Comparable.\u201d It sounds like the compiler is telling you to\ndeclare Golfer as an abstract class, and if you are reading this book, you\nprobably don\u2019t know what that is or how to do it.\nFortunately, the compiler is wrong. The solution in this case is to make sure\nGolfer has a method called compareTo that takes an Object as a parameter.\nDon\u2019t let the compiler lead you by the nose. Error messages give you evidence",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 274,
      "page_label": "257"
    }
  },
  {
    "text": "that something is wrong, but the remedies they suggest are unreliable.\nC.2 Run-time errors\nIt\u2019s not always clear what causes a run-time error, but you can often \ufb01gure\nthings out by adding print statements to your program.\nMy program hangs.\nIf a program stops and seems to be doing nothing, we say it is \u201changing\u201d.\nOften that means it is caught in an in\ufb01nite loop or an in\ufb01nite recursion.\n\u0088 If there is a particular loop that you suspect is the problem, add a print",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 274,
      "page_label": "257"
    }
  },
  {
    "text": "statement immediately before the loop that says \u201centering the loop\u201d and\nanother immediately after that says \u201cexiting the loop\u201d.\nRun the program. If you get the \ufb01rst message and not the second,\nyou know where the program is getting stuck. Go to the section titled\n\u201cIn\ufb01nite loop\u201d.\n\u0088 Most of the time an in\ufb01nite recursion will cause the program to run for\na while and then produce a StackOverflowError. If that happens, go\nto the section titled \u201cIn\ufb01nite recursion\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 274,
      "page_label": "257"
    }
  },
  {
    "text": "to the section titled \u201cIn\ufb01nite recursion\u201d.\nIf you are not getting a StackOverflowError, but you suspect there is\na problem with a recursive method, you can still use the techniques in\nthe in\ufb01nite recursion section.\n\u0088 If neither of the previous suggestions helps, you might not understand\nthe \ufb02ow of execution in your program. Go to the section titled \u201cFlow of\nexecution\u201d.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 274,
      "page_label": "257"
    }
  },
  {
    "text": "258 Appendix C Debugging\nIn\ufb01nite loop\nIf you think you have an in\ufb01nite loop and you know which loop it is, add a\nprint statement at the end of the loop that displays the values of the variables\nin the condition, and the value of the condition.\nFor example:\nwhile (x > 0 && y < 0) {\n// do something to x\n// do something to y\nSystem.out.println(\"x: \" + x);\nSystem.out.println(\"y: \" + y);\nSystem.out.println(\"condition: \" + (x > 0 && y < 0));\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 275,
      "page_label": "258"
    }
  },
  {
    "text": "}\nNow when you run the program you see three lines of output for each time\nthrough the loop. The last time through the loop, the condition should be\nfalse. If the loop keeps going, you will see the values of x and y, and you\nmight \ufb01gure out why they are not getting updated correctly.\nIn\ufb01nite recursion\nMost of the time, an in\ufb01nite recursion will cause the program to throw a\nStackOverflowError. But if the program is slow, it may take a long time to\n\ufb01ll the stack.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 275,
      "page_label": "258"
    }
  },
  {
    "text": "\ufb01ll the stack.\nIf you know which method is causing an in\ufb01nite recursion, check that there\nis a base case. There should be some condition that makes the method re-\nturn without making a recursive invocation. If not, you need to rethink the\nalgorithm and identify a base case.\nIf there is a base case, but the program doesn\u2019t seem to be reaching it, add a\nprint statement at the beginning of the method that displays the parameters.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 275,
      "page_label": "258"
    }
  },
  {
    "text": "Now when you run the program you see a few lines of output every time\nthe method is invoked, and you can see the values of the parameters. If the\nparameters are not moving toward the base case, you might see why not.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 275,
      "page_label": "258"
    }
  },
  {
    "text": "C.2 Run-time errors 259\nFlow of execution\nIf you are not sure how the \ufb02ow of execution is moving through your program,\nadd print statements to the beginning of each method with a message like\n\u201centering method foo\u201d, where foo is the name of the method. Now when you\nrun the program, it displays a trace of each method as it is invoked.\nYou can also display the arguments each method receives. When you run the\nprogram, check whether the values are reasonable, and check for one of the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 276,
      "page_label": "259"
    }
  },
  {
    "text": "most common errors \u2013 providing arguments in the wrong order.\nWhen I run the program I get an exception.\nWhen an exception occurs, Java displays a message that includes the name\nof the exception, the line of the program where the exception occurred, and\na \u201cstack trace\u201d. The stack trace includes the method that was running, the\nmethod that invoked it, the method that invoked that one, and so on.\nThe \ufb01rst step is to examine the place in the program where the error occurred",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 276,
      "page_label": "259"
    }
  },
  {
    "text": "and see if you can \ufb01gure out what happened.\nNullPointerException: You tried to access an instance variable or invoke a\nmethod on an object that is currently null. You should \ufb01gure out which\nvariable is null and then \ufb01gure out how it got to be that way.\nRemember that when you declare a variable with an array type, its\nelements are initially null until you assign a value to them. For example,\nthis code causes a NullPointerException:\nint[] array = new Point[5];\nSystem.out.println(array[0].x);",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 276,
      "page_label": "259"
    }
  },
  {
    "text": "System.out.println(array[0].x);\nArrayIndexOutOfBoundsException: The index you are using to access\nan array is either negative or greater than array.length - 1. If you\ncan \ufb01nd the site where the problem is, add a print statement immediately\nbefore it to display the value of the index and the length of the array. Is\nthe array the right size? Is the index the right value?\nNow work your way backwards through the program and see where the",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 276,
      "page_label": "259"
    }
  },
  {
    "text": "array and the index come from. Find the nearest assignment statement",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 276,
      "page_label": "259"
    }
  },
  {
    "text": "260 Appendix C Debugging\nand see if it is doing the right thing. If either one is a parameter, go\nto the place where the method is invoked and see where the values are\ncoming from.\nStackOver\ufb02owError: See \u201cIn\ufb01nite recursion\u201d on page 258.\nFileNotFoundException: This means Java didn\u2019t \ufb01nd the \ufb01le it was look-\ning for. If you are using a project-based development environment like\nEclipse, you might have to import the \ufb01le into the project. Otherwise",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 277,
      "page_label": "260"
    }
  },
  {
    "text": "make sure the \ufb01le exists and that the path is correct. This problem\ndepends on your \ufb01le system, so it can be hard to track down.\nArithmeticException: Something went wrong during an arithmetic opera-\ntion; for example, division by zero.\nI added so many print statements I get inundated with\noutput.\nOne of the problems with using print statements for debugging is that you can\nend up buried in output. There are two ways to proceed: either simplify the\noutput, or simplify the program.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 277,
      "page_label": "260"
    }
  },
  {
    "text": "output, or simplify the program.\nTo simplify the output, you can remove or comment out print statements\nthat aren\u2019t helping, or combine them, or format the output so it is easier to\nunderstand. As you develop a program, you should write code to generate\nconcise, informative traces of what the program is doing.\nTo simplify the program, scale down the problem the program is working on.\nFor example, if you are sorting an array, sort a small array. If the program",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 277,
      "page_label": "260"
    }
  },
  {
    "text": "takes input from the user, give it the simplest input that causes the error.\nAlso, clean up the code. Remove unnecessary or experimental parts, and\nreorganize the program to make it easier to read. For example, if you suspect\nthat the error is in a deeply-nested part of the program, rewrite that part\nwith a simpler structure. If you suspect a large method, split it into smaller\nmethods and test them separately.\nThe process of \ufb01nding the minimal test case often leads you to the bug. For",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 277,
      "page_label": "260"
    }
  },
  {
    "text": "example, if you \ufb01nd that a program works when the array has an even number",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 277,
      "page_label": "260"
    }
  },
  {
    "text": "C.3 Logic errors 261\nof elements, but not when it has an odd number, that gives you a clue about\nwhat is going on.\nReorganizing the program can help you \ufb01nd subtle bugs. If you make a change\nthat you think doesn\u2019t a\ufb00ect the program, and it does, that can tip you o\ufb00.\nC.3 Logic errors\nMy program doesn\u2019t work.\nLogic errors are hard to \ufb01nd because the compiler and interpreter provide\nno information about what is wrong. Only you know what the program is",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 278,
      "page_label": "261"
    }
  },
  {
    "text": "supposed to do, and only you know that it isn\u2019t doing it.\nThe \ufb01rst step is to make a connection between the code and the behavior you\nget. You need a hypothesis about what the program is actually doing. Here\nare some questions to ask yourself:\n\u0088 Is there something the program was supposed to do, but doesn\u2019t seem to\nbe happening? Find the section of the code that performs that function,\nand make sure it is executing when you think it should. See \u201cFlow of\nexecution\u201d on page 259.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 278,
      "page_label": "261"
    }
  },
  {
    "text": "execution\u201d on page 259.\n\u0088 Is something happening that shouldn\u2019t? Find code in your program that\nperforms that function, and see if it is executing when it shouldn\u2019t.\n\u0088 Is a section of code producing an unexpected e\ufb00ect? Make sure you un-\nderstand the code, especially if it invokes methods in the Java library.\nRead the documentation for those methods, and try them out with sim-\nple test cases. They might not do what you think they do.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 278,
      "page_label": "261"
    }
  },
  {
    "text": "To program, you need a mental model of what your code does. If it doesn\u2019t\ndo what you expect, the problem might not actually be the program; it might\nbe in your head.\nThe best way to correct your mental model is to break the program into\ncomponents (usually the classes and methods) and test them independently.\nOnce you \ufb01nd the discrepancy between your model and reality, you can solve\nthe problem.\nHere are some common logic errors to check for:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 278,
      "page_label": "261"
    }
  },
  {
    "text": "262 Appendix C Debugging\n\u0088 Remember that integer division always rounds toward zero. If you want\nfractions, use double. More generally, use integers for countable things\nand \ufb02oating-point numbers for measurable things.\n\u0088 Floating-point numbers are only approximate, so don\u2019t rely on them to\nbe perfectly accurate. You should probably never use the == operator\nwith doubles. Instead of writing if (d == 1.23), do something like\nif (Math.abs(d - 1.23) < .000001).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 279,
      "page_label": "262"
    }
  },
  {
    "text": "if (Math.abs(d - 1.23) < .000001).\n\u0088 When you apply the equality operator (==) to objects, it checks whether\nthey are identical. If you meant to check equivalence, you should use the\nequals method instead.\n\u0088 By default for user-de\ufb01ned types, equals checks identity. If you want a\ndi\ufb00erent notion of equivalence, you have to override it.\n\u0088 Inheritance can lead to subtle logic errors, because you can run inherited\ncode without realizing it. See \u201cFlow of execution\u201d on page 259.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 279,
      "page_label": "262"
    }
  },
  {
    "text": "I\u2019ve got a big hairy expression and it doesn\u2019t do what I\nexpect.\nWriting complex expressions is \ufb01ne as long as they are readable, but they can\nbe hard to debug. It is often a good idea to break a complex expression into\na series of assignments to temporary variables.\nrect.setLocation(rect.getLocation().translate(\n-rect.getWidth(), -rect.getHeight()));\nThis example can be rewritten as:\nint dx = -rect.getWidth();\nint dy = -rect.getHeight();\nPoint location = rect.getLocation();",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 279,
      "page_label": "262"
    }
  },
  {
    "text": "Point location = rect.getLocation();\nPoint newLocation = location.translate(dx, dy);\nrect.setLocation(newLocation);\nThe second version is easier to read, partly because the variable names provide\nadditional documentation. It\u2019s also easier to debug, because you can check the\ntypes of the temporary variables and display their values.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 279,
      "page_label": "262"
    }
  },
  {
    "text": "C.3 Logic errors 263\nAnother problem that can occur with big expressions is that the order of\noperations may not be what you expect. For example, to evaluate x\n2\u03c0, you\nmight write:\ndouble y = x / 2 * Math.PI;\nThat is not correct, because multiplication and division have the same prece-\ndence, and they are evaluated from left to right. This code computes x\n2 \u03c0.\nIf you are not sure of the order of operations, check the documentation, or use\nparentheses to make it explicit.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 280,
      "page_label": "263"
    }
  },
  {
    "text": "parentheses to make it explicit.\ndouble y = x / (2 * Math.PI);\nThis version is correct, and more readable for other people who haven\u2019t mem-\norized the order of operations.\nMy method doesn\u2019t return what I expect.\nIf you have a return statement with a complex expression, you don\u2019t have a\nchance to display the value before returning.\npublic Rectangle intersection(Rectangle a, Rectangle b) {\nreturn new Rectangle(\nMath.min(a.x, b.x), Math.min(a.y, b.y),\nMath.max(a.x + a.width, b.x + b.width)",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 280,
      "page_label": "263"
    }
  },
  {
    "text": "Math.max(a.x + a.width, b.x + b.width)\n- Math.min(a.x, b.x)\nMath.max(a.y + a.height, b.y + b.height)\n- Math.min(a.y, b.y));\n}\nInstead of writing everything in one statement, use temporary variables:\npublic Rectangle intersection(Rectangle a, Rectangle b) {\nint x1 = Math.min(a.x, b.x);\nint y1 = Math.min(a.y, b.y);\nint x2 = Math.max(a.x + a.width, b.x + b.width);\nint y2 = Math.max(a.y + a.height, b.y + b.height);\nRectangle rect = new Rectangle(x1, y1, x2 - x1, y2 - y1);\nreturn rect;\n}",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 280,
      "page_label": "263"
    }
  },
  {
    "text": "264 Appendix C Debugging\nNow you have the opportunity to display any of the intermediate variables\nbefore returning. And by reusing x1 and y1, you made the code smaller, too.\nMy print statement isn\u2019t doing anything.\nIf you use the println method, the output is displayed immediately, but if\nyou use print (at least in some environments), the output gets stored without\nbeing displayed until the next newline. If the program terminates without",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 281,
      "page_label": "264"
    }
  },
  {
    "text": "displaying a newline, you may never see the stored output. If you suspect that\nthis is happening, change some or all of the print statements to println.\nI\u2019m really, really stuck and I need help.\nFirst, get away from the computer for a few minutes. Computers emit waves\nthat a\ufb00ect the brain, causing the following symptoms:\n\u0088 Frustration and rage.\n\u0088 Superstitious beliefs (\u201cthe computer hates me\u201d) and magical thinking\n(\u201cthe program only works when I wear my hat backwards\u201d).",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 281,
      "page_label": "264"
    }
  },
  {
    "text": "\u0088 Sour grapes (\u201cthis program is lame anyway\u201d).\nIf you su\ufb00er from any of these symptoms, get up and go for a walk. When\nyou are calm, think about the program. What is it doing? What are possible\ncauses of that behavior? When was the last time you had a working program,\nand what did you do next?\nSometimes it just takes time to \ufb01nd a bug. People often \ufb01nd bugs when they\nlet their mind wander. Good places to \ufb01nd bugs are buses, showers, and bed.\nNo, I really need help.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 281,
      "page_label": "264"
    }
  },
  {
    "text": "No, I really need help.\nIt happens. Even the best programmers get stuck. Sometimes you need a\nanother pair of eyes.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 281,
      "page_label": "264"
    }
  },
  {
    "text": "C.3 Logic errors 265\nBefore you bring someone else in, make sure you have tried the techniques\ndescribed in this appendix.\nYour program should be as simple as possible, and you should be working on\nthe smallest input that causes the error. You should have print statements in\nthe appropriate places (and the output they produce should be comprehensi-\nble). You should understand the problem well enough to describe it concisely.\nWhen you bring someone in to help, give them the information they need:",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 282,
      "page_label": "265"
    }
  },
  {
    "text": "\u0088 What kind of bug is it? Compile-time, run-time, or logic?\n\u0088 What was the last thing you did before this error occurred? What were\nthe last lines of code that you wrote, or what is the test case that fails?\n\u0088 If the bug occurs at compile time or run time, what is the error message,\nand what part of the program does it indicate?\n\u0088 What have you tried, and what have you learned?\nBy the time you explain the problem to someone, you might see the answer.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 282,
      "page_label": "265"
    }
  },
  {
    "text": "This phenomenon is so common that some people recommend a debugging\ntechnique called \u201crubber ducking\u201d. Here\u2019s how it works:\n1. Buy a standard-issue rubber duck.\n2. When you are really stuck on a problem, put the rubber duck on the\ndesk in front of you and say, \u201cRubber duck, I am stuck on a problem.\nHere\u2019s what\u2019s happening...\u201d\n3. Explain the problem to the rubber duck.\n4. Discover the solution.\n5. Thank the rubber duck.\nWe\u2019re not kidding, it works! See https://en.wikipedia.org/wiki/Rubber_",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 282,
      "page_label": "265"
    }
  },
  {
    "text": "duck_debugging.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 282,
      "page_label": "265"
    }
  },
  {
    "text": "266 Appendix C Debugging\nI found the bug!\nWhen you \ufb01nd the bug, it is usually obvious how to \ufb01x it. But not always.\nSometimes what seems to be a bug is really an indication that you don\u2019t\nunderstand the program, or there is an error in your algorithm. In these cases,\nyou might have to rethink the algorithm, or adjust your mental model. Take\nsome time away from the computer to think, work through test cases by hand,\nor draw diagrams to represent the computation.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 283,
      "page_label": "266"
    }
  },
  {
    "text": "or draw diagrams to represent the computation.\nAfter you \ufb01x the bug, don\u2019t just start in making new errors. Take a minute to\nthink about what kind of bug it was, why you made the error, how the error\nmanifested itself, and what you could have done to \ufb01nd it faster. Next time\nyou see something similar, you will be able to \ufb01nd the bug more quickly. Or\neven better, you will learn to avoid that type of bug for good.",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 283,
      "page_label": "266"
    }
  },
  {
    "text": "Index\n== operator, 180\n% operator, 41\nabecedarian, 153\naccessor, 177\naccumulator, 129, 134\naddition\ninteger, 19\nstring, 23\ntime, 181\naddress, 33, 44, 178\nalgorithm, 2, 10\nalias, 127, 134\naliasing, 160, 210\nanagram, 153\nangle brackets, 217\nargument, 49, 55, 63\narithmetic\n\ufb02oating-point, 22\ninteger, 20, 21\nArithmeticException, 27, 260\narray, 123, 134\n2D, 204\ncopying, 127\nelement, 124\nindex, 124\nlength, 128\nof cards, 205\nof objects, 196\nof strings, 191\nArrayIndexOutOfBoundsException,\n125, 259",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 284,
      "page_label": "267"
    }
  },
  {
    "text": "ArrayIndexOutOfBoundsException,\n125, 259\nArrayList, 216\nArrays class, 126, 127\nassignment, 16, 28, 67\nattribute, 156, 164\nAWT, 155, 245, 250\nbase case, 76, 79\nBigInteger, 167, 169\nbinary, 77, 79\nbinary search, 199, 203\nboolean, 67, 79, 93\nbottom-up development, 226, 231\nbounding box, 247, 250\nbranch, 69, 79\nbreak, 116\nbreakpoint, 240, 244\nbug, 2, 11\nbyte code, 4, 11\ncall stack, 77, 240, 244\ncamel case, 52\nCanvas, 245\nCard, 189\ncase-sensitive, 5, 16, 52, 145\nchaining, 71, 79\nchar, 6, 139",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 284,
      "page_label": "267"
    }
  },
  {
    "text": "268 INDEX\nCharacter, 146\ncharAt, 139\nCheckstyle, 239\nChurch, Alonzo, 95\nclass, 5, 11, 54, 184\nCanvas, 245\nCard, 189\nde\ufb01nition, 5, 171\nGraphics, 245\nJFrame, 246\nMath, 49\nPoint, 155\nRectangle, 158\nScanner, 34\nSystem, 33\nTime, 172\nutility, 34\nclass diagram, 163, 165\nclass variable, 193, 202\nclient, 176, 185\ncollection, 216, 231\nColor, 247\ncommand-line interface, 236, 243\ncomment, 11\ndocumentation, 62\ninline, 6\ncomparable, 195\ncompareTo, 144\ncomparison operator, 67\ncompile, 3, 11, 254",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 285,
      "page_label": "268"
    }
  },
  {
    "text": "comparison operator, 67\ncompile, 3, 11, 254\ncompile-time error, 25, 29, 253\ncomplete ordering, 194\ncomposition, 24, 29, 50, 90, 230\ncomputer science, 2, 10\nconcatenate, 23, 29, 149\nconditional statement, 69, 79\nconstant, 38, 45\nconstructor, 173, 185, 191, 205, 209\nvalue, 174\ncontinue, 117\ncoordinate, 246, 250\ncounter, 131\nCrazy Eights, 215\ndata encapsulation, 172, 185\nDe Morgan\u2019s laws, 69, 79\ndead code, 87, 99\ndebugger, 240, 244\ndebugging, 2, 11, 253\nby bisection, 256\nexperimental, 9",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 285,
      "page_label": "268"
    }
  },
  {
    "text": "by bisection, 256\nexperimental, 9\nrubber duck, 265\ndeclaration, 15, 28, 156\ndecrement, 115, 118\ndegrees, 50\ndependent, 176\ndeterministic, 129, 134\ndiagram\nclass, 163\nstack, 58, 76, 97\nstate, 18, 124, 156\ndivisible, 41\ndivision\n\ufb02oating-point, 107\ninteger, 20, 21\ndo-while, 115\ndocumentation, 59, 63, 164\nJavadoc comments, 62\nJavadoc tags, 94\ndot notation, 156, 165\nDouble, 146\ndouble, 21\ndoubloon, 153\nDrJava, 233\ne\ufb03ciency, 120, 132, 199, 208, 214,\n217",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 285,
      "page_label": "268"
    }
  },
  {
    "text": "INDEX 269\nelement, 123, 124, 134\nempty array, 148, 149\nempty string, 142, 149\nencapsulate, 109, 118\nencapsulation, 150, 159\ndata, 172\nencode, 190, 202\nenhanced for loop, 133, 134\nequals, 144, 180, 181\nequivalent, 180, 185, 194\nerror\ncompile-time, 25, 253\nlogic, 27, 253, 261\nmessage, 9, 25, 254\nrun-time, 26, 253\nsyntax, 255\nescape sequence, 7, 12, 140\nexception, 26, 253, 259\nArithmetic, 27\nArrayIndexOutOfBounds, 125\nInputMismatch, 73\nNegativeArraySize, 124\nNullPointer, 161, 197\nStackOver\ufb02ow, 202",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 286,
      "page_label": "269"
    }
  },
  {
    "text": "NullPointer, 161, 197\nStackOver\ufb02ow, 202\nStringIndexOutOfBounds, 142\nexecutable, 3, 11\nexperimental debugging, 9\nexpression, 19, 29, 49, 50\nbig and hairy, 262\nboolean, 72\nextends, 216, 220\nextract digits, 41\nfactorial, 95, 99, 167\n\ufb01bonacci, 98\nFileNotFoundException, 260\n\ufb01nal, 38, 109, 193, 196\n\ufb02ag, 72, 79\n\ufb02oating-point, 21, 29\n\ufb02ow of execution, 54, 63, 259\nfor, 114\nformat speci\ufb01er, 39, 45\nformat string, 39, 45, 178\nframe, 58, 63\nfunctional decomposition, 91, 99\ngarbage collection, 162, 165",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 286,
      "page_label": "269"
    }
  },
  {
    "text": "garbage collection, 162, 165\ngeneralization, 110, 112, 150, 159\ngeneralize, 109, 118\ngetter, 177, 185\nGitHub, xv\nGoogle style, 9\nGraphics, 245\nGreen\ufb01eld, Larry, 10\nhanging, 257\nHAS-A, 230, 231\nhello world, 4\nhelper method, 207, 212\nhexadecimal, 33, 178\nhigh-level language, 3, 11\nhistogram, 131, 134, 203\nHTML, 61, 94, 164\nIDE, 233, 243\nidentical, 180, 185\nif statement, 69\nimmutable, 141, 149, 184, 196\nimport statement, 35, 45\nincrement, 115, 118\nincremental development, 88, 99\nindependent, 176",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 286,
      "page_label": "269"
    }
  },
  {
    "text": "incremental development, 88, 99\nindependent, 176\nindex, 124, 134, 197\nindexOf, 144\nin\ufb01nite loop, 106, 118, 257\nin\ufb01nite recursion, 173, 202, 257, 258\ninformation hiding, 172, 185",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 286,
      "page_label": "269"
    }
  },
  {
    "text": "270 INDEX\ninheritance, 216, 230, 231\ninitialize, 17, 28, 72\nInputMismatchException, 73\ninstance, 171, 185\ninstance method, 179, 182, 185\ninstance variable, 172, 185\ninstantiate, 171, 185\nInteger, 146\ninteger division, 20, 21\ninterpret, 3, 11\ninvoke, 49, 63\nIS-A, 230, 231\niteration, 105, 118\nJAR, 234, 243\njava.awt, 155\njava.util, 34\nJavadoc, 61, 63, 94, 164, 233\nJDK, 233, 243\nJFrame, 246\nJVM, 4, 233, 243\nkeyword, 16, 28, 173\nlanguage\ncomplete, 95\nhigh-level, 3\nlow-level, 3",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 287,
      "page_label": "270"
    }
  },
  {
    "text": "language\ncomplete, 95\nhigh-level, 3\nlow-level, 3\nleap of faith, 97, 99, 212\nlength\narray, 128\nstring, 141\nlibrary, 34, 45, 163\nLinux, 10\nliteral, 38, 45\nlocal variable, 56, 63\nlogarithm, 73, 107\nlogic error, 27, 29, 253, 261\nlogical operator, 68, 79, 194\nlong, 50\nloop, 106, 118\nfor, 114\nin\ufb01nite, 106\nnested, 197\nsearch, 198\nwhile, 105\nloop body, 105, 118\nloop variable, 110, 118, 125, 142\nlow-level language, 3, 11\nmagic number, 38, 45\nmain, 5, 52\nmap to, 190\nMath class, 49\nmental model, 261",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 287,
      "page_label": "270"
    }
  },
  {
    "text": "map to, 190\nMath class, 49\nmental model, 261\nmerge sort, 208, 212\nmethod, 5, 11, 54\naccessor, 177\nboolean, 93\nconstructor, 173\nde\ufb01nition, 5, 51\nequals, 180, 181\ngetter, 177\nhelper, 207\ninstance, 179, 182\nmodi\ufb01er, 184, 219\nmutator, 177\nparameters, 56\npure, 184\nsetter, 177\nstatic, 182\ntoString, 179\nvalue, 85, 86\nvoid, 85\nMickey Mouse, 248\nmodi\ufb01er method, 184, 185, 219\nmodulus, 41, 45",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 287,
      "page_label": "270"
    }
  },
  {
    "text": "INDEX 271\nmutable, 159\nmutator, 177\nNegativeArraySizeException, 124\nnesting, 71, 79, 197\nnew, 47, 123, 156, 173\nnewline, 6, 12, 75\nnextInt\nRandom, 130\nScanner, 37\nnondeterministic, 129, 134\nnull, 161, 196\nNullPointerException, 161, 259\nobject, 139, 148\narray of, 196\nas parameter, 157\ndisplaying, 178\nmutable, 159\ntype, 171\nObject class, 220\nobject code, 3, 11\nobject-oriented, 155, 160, 165, 230\no\ufb00-by-one, 209\noperand, 19, 29\noperator, 19, 29\nassignment, 67\ncast, 40\nlogical, 68, 79, 194",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 288,
      "page_label": "271"
    }
  },
  {
    "text": "assignment, 67\ncast, 40\nlogical, 68, 79, 194\nmodulus, 41\nnew, 47, 123, 156, 173\nrelational, 67, 79\nstring, 23\norder of operations, 24, 29, 262\nordering, 194\noverload, 92, 99, 174, 209\noverride, 179, 185, 231\npackage, 33, 44\npaint, 246\npalindrome, 152\nparam tag, 94\nparameter, 52, 55, 63, 157\nmultiple, 56\nparameter passing, 55, 63\nparse, 26, 29, 147, 149\npartial ordering, 194\npi, 50\npixel, 246, 250\nPoint, 155\nportable, 3, 11\nposttest loop, 115, 118\nprecedence, 24, 262\npretest loop, 115, 118",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 288,
      "page_label": "271"
    }
  },
  {
    "text": "precedence, 24, 262\npretest loop, 115, 118\nprimitive, 139, 148\nprint, 6, 178\narray, 197\nCard, 191\nprint statement, 5, 11, 178, 260, 264\nprintDeck, 206\nprintf, 39, 145, 178\nprintln, 5\nprivate, 172, 176\nproblem solving, 1, 10\nprogram, 1, 10\nprogram development, 88, 109, 118,\n207, 226\nprogramming, 2, 10\npseudocode, 207, 212\npseudorandom, 129, 134\npublic, 52\npure method, 184, 185\nquote mark, 6, 7, 140\nradians, 50\nRandom, 130\nrank, 189",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 288,
      "page_label": "271"
    }
  },
  {
    "text": "272 INDEX\nrational number, 187\nreadability, 25\nRectangle, 158\nrecursion, 74, 79, 95, 202, 211\nin\ufb01nite, 173, 202, 258\nrecursive, 74, 79, 95\nredirection operator, 238, 243\nreduce, 129, 131, 134\nreference, 124, 134, 156, 160, 192,\n210\nrelational operator, 67, 79\nreplace, 141\nrepository, xv\nreturn, 72, 86, 158\ninside loop, 198\nreturn statement, 263\nreturn tag, 94\nreturn type, 86, 99\nreturn value, 86, 99\nRGB, 248, 250\nrounding error, 22, 29\nrubber duck, 265\nrun-time error, 26, 29, 161, 197, 253",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 289,
      "page_label": "272"
    }
  },
  {
    "text": "run-time error, 26, 29, 161, 197, 253\nsca\ufb00olding, 89, 99\nScanner, 34\nScrabble, 154, 186\nsearch, 128, 134\nselection sort, 208, 212\nsemicolon, 5, 16, 26\nsequential search, 198, 203\nsetter, 177, 185\nshadowing, 174, 185\nshort circuit, 68, 79\nshu\ufb04e, 207\nsignature, 60, 63\nsort\nmerge, 208\nselection, 208\nsource code, 3, 11\nsrc.zip, 163\nstack, 97\nstack diagram, 58, 63, 76\nstack over\ufb02ow, 77\nstack trace, 259\nStackOver\ufb02owError, 257, 260\nstate, 18, 29\nstate diagram, 18, 29, 124, 156, 192,\n205",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 289,
      "page_label": "272"
    }
  },
  {
    "text": "state diagram, 18, 29, 124, 156, 192,\n205\nstatement, 5, 11\nassignment, 16\ncomment, 6\nconditional, 69\ndeclaration, 15, 156\nelse, 69\nfor, 114\nif, 69\nimport, 35\ninitialization, 72\nprint, 6, 178, 260, 264\nreturn, 72, 86, 158, 198, 263\nwhile, 105\nstatic, 173, 182, 193\nstring, 6, 11\narray of, 191\nformat, 146, 179\nlength, 141\noperator, 23\nreference to, 192\nString class, 155\nStringBuilder, 214\nStringIndexOutOfBoundsException,\n142\nstub, 89, 99\nsubclass, 216, 231\nsubdeck, 209",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 289,
      "page_label": "272"
    }
  },
  {
    "text": "INDEX 273\nsuit, 189\nsuper, 220\nsuperclass, 220, 231\nsyntax, 16, 28, 253\nsyntax errors, 255\nSystem.err, 73, 116, 243\nSystem.in, 34, 139, 238\nSystem.out, 33, 139, 238\ntable, 107\ntwo-dimensional, 109\ntag, 94, 99\ntemporary variable, 86, 99, 262\nterminal, 236\ntesting, 214\ntext editor, 233, 243\nthis, 173, 217\nTime, 172\naddition, 181\ntoCharArray, 142\ntoken, 36, 45\ntoLowerCase, 141\ntop-down development, 207, 212,\n224, 226\nTorvalds, Linus, 10\ntoString, 179\ntoUpperCase, 141\ntraversal, 128, 134",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 290,
      "page_label": "273"
    }
  },
  {
    "text": "toUpperCase, 141\ntraversal, 128, 134\ntraverse, 141, 198\nTuring complete, 95, 99\nTuring, Alan, 95, 141\ntype, 28\narray, 123\nboolean, 67\nchar, 15, 139\ndouble, 21\nint, 15\nlong, 23, 50\nobject, 171\nString, 6, 15, 155\nvoid, 52\ntype cast, 40, 45\nUML, 163, 165, 230\nUnicode, 140, 149\nunit test, 241, 244\nutility class, 34, 126\nutility method, 145\nvalue, 15, 28\nvalue constructor, 174\nvalue method, 85, 86, 99\nvariable, 15, 28\ninstance, 172\nlocal, 56\nloop, 110, 125, 142\nprivate, 172, 176\nstatic, 193",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 290,
      "page_label": "273"
    }
  },
  {
    "text": "loop, 110, 125, 142\nprivate, 172, 176\nstatic, 193\ntemporary, 86, 262\nvirtual machine, 4, 233\nvoid, 52, 85\nvoid method, 85, 98\nwhile, 105\nwildcard, 239, 244\nwrapper class, 146, 149\nwrapper method, 218, 231",
    "metadata": {
      "producer": "pdfTeX-1.40.14",
      "creator": "LaTeX with hyperref package",
      "creationdate": "2018-08-22T14:31:20-04:00",
      "author": "Allen B. Downey and Chris Mayfield",
      "title": "Think Java: How to Think Like a Computer Scientist",
      "subject": "Version 6.1.3",
      "keywords": "",
      "moddate": "2018-08-22T14:31:20-04:00",
      "trapped": "/False",
      "ptex.fullbanner": "This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1",
      "source": "/Users/zeeshanabbasi/Desktop/pdf q&a chatbot/data/raw_pdfs/thinkjava.pdf",
      "total_pages": 291,
      "page": 290,
      "page_label": "273"
    }
  }
]